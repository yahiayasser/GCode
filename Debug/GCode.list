
GCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003730  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003864  08003864  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003864  08003864  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003864  08003864  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800386c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004290  20000024  08003890  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042b4  08003890  000242b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001821d  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b6  00000000  00000000  0003826a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0003b420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  0003c168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001702b  00000000  00000000  0003cd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f62  00000000  00000000  00053da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074d5c  00000000  00000000  00065d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004c  00000000  00000000  000daa61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a0  00000000  00000000  000daab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08003824 	.word	0x08003824

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08003824 	.word	0x08003824

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fb29 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 f8a0 	bl	80032ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fb41 	bl	800081e <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fb09 	bl	80007ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000050 	.word	0x20000050

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000050 	.word	0x20000050

08000210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d101      	bne.n	8000232 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e0be      	b.n	80003b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023c:	2b00      	cmp	r3, #0
 800023e:	d109      	bne.n	8000254 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f003 f85e 	bl	8003310 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 f9ab 	bl	80005b0 <ADC_ConversionStop_Disable>
 800025a:	4603      	mov	r3, r0
 800025c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8099 	bne.w	800039e <HAL_ADC_Init+0x18e>
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8095 	bne.w	800039e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800027c:	f023 0302 	bic.w	r3, r3, #2
 8000280:	f043 0202 	orr.w	r2, r3, #2
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4313      	orrs	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002a8:	d003      	beq.n	80002b2 <HAL_ADC_Init+0xa2>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <HAL_ADC_Init+0xa8>
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	e000      	b.n	80002ba <HAL_ADC_Init+0xaa>
 80002b8:	2300      	movs	r3, #0
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	4313      	orrs	r3, r2
 80002be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d119      	bne.n	80002fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	035a      	lsls	r2, r3, #13
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	4313      	orrs	r3, r2
 80002dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	e00b      	b.n	80002fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e8:	f043 0220 	orr.w	r2, r3, #32
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	f043 0201 	orr.w	r2, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	693a      	ldr	r2, [r7, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <HAL_ADC_Init+0x1a8>)
 8000318:	4013      	ands	r3, r2
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	6812      	ldr	r2, [r2, #0]
 800031e:	68b9      	ldr	r1, [r7, #8]
 8000320:	430b      	orrs	r3, r1
 8000322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800032c:	d003      	beq.n	8000336 <HAL_ADC_Init+0x126>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d104      	bne.n	8000340 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	3b01      	subs	r3, #1
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000346:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	430a      	orrs	r2, r1
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <HAL_ADC_Init+0x1ac>)
 800035c:	4013      	ands	r3, r2
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	429a      	cmp	r2, r3
 8000362:	d10b      	bne.n	800037c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	f043 0201 	orr.w	r2, r3, #1
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800037a:	e018      	b.n	80003ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f023 0312 	bic.w	r3, r3, #18
 8000384:	f043 0210 	orr.w	r2, r3, #16
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000390:	f043 0201 	orr.w	r2, r3, #1
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000398:	2301      	movs	r3, #1
 800039a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	e007      	b.n	80003ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a2:	f043 0210 	orr.w	r2, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	ffe1f7fd 	.word	0xffe1f7fd
 80003bc:	ff1f0efe 	.word	0xff1f0efe

080003c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003ca:	2300      	movs	r3, #0
 80003cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d101      	bne.n	80003e0 <HAL_ADC_ConfigChannel+0x20>
 80003dc:	2302      	movs	r3, #2
 80003de:	e0dc      	b.n	800059a <HAL_ADC_ConfigChannel+0x1da>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2201      	movs	r2, #1
 80003e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	2b06      	cmp	r3, #6
 80003ee:	d81c      	bhi.n	800042a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	685a      	ldr	r2, [r3, #4]
 80003fa:	4613      	mov	r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	4413      	add	r3, r2
 8000400:	3b05      	subs	r3, #5
 8000402:	221f      	movs	r2, #31
 8000404:	fa02 f303 	lsl.w	r3, r2, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	4019      	ands	r1, r3
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	6818      	ldr	r0, [r3, #0]
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	685a      	ldr	r2, [r3, #4]
 8000414:	4613      	mov	r3, r2
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	4413      	add	r3, r2
 800041a:	3b05      	subs	r3, #5
 800041c:	fa00 f203 	lsl.w	r2, r0, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	430a      	orrs	r2, r1
 8000426:	635a      	str	r2, [r3, #52]	; 0x34
 8000428:	e03c      	b.n	80004a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	2b0c      	cmp	r3, #12
 8000430:	d81c      	bhi.n	800046c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685a      	ldr	r2, [r3, #4]
 800043c:	4613      	mov	r3, r2
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	4413      	add	r3, r2
 8000442:	3b23      	subs	r3, #35	; 0x23
 8000444:	221f      	movs	r2, #31
 8000446:	fa02 f303 	lsl.w	r3, r2, r3
 800044a:	43db      	mvns	r3, r3
 800044c:	4019      	ands	r1, r3
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	6818      	ldr	r0, [r3, #0]
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	685a      	ldr	r2, [r3, #4]
 8000456:	4613      	mov	r3, r2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4413      	add	r3, r2
 800045c:	3b23      	subs	r3, #35	; 0x23
 800045e:	fa00 f203 	lsl.w	r2, r0, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	430a      	orrs	r2, r1
 8000468:	631a      	str	r2, [r3, #48]	; 0x30
 800046a:	e01b      	b.n	80004a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	4613      	mov	r3, r2
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	4413      	add	r3, r2
 800047c:	3b41      	subs	r3, #65	; 0x41
 800047e:	221f      	movs	r2, #31
 8000480:	fa02 f303 	lsl.w	r3, r2, r3
 8000484:	43db      	mvns	r3, r3
 8000486:	4019      	ands	r1, r3
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	6818      	ldr	r0, [r3, #0]
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	4613      	mov	r3, r2
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	4413      	add	r3, r2
 8000496:	3b41      	subs	r3, #65	; 0x41
 8000498:	fa00 f203 	lsl.w	r2, r0, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b09      	cmp	r3, #9
 80004aa:	d91c      	bls.n	80004e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	68d9      	ldr	r1, [r3, #12]
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4613      	mov	r3, r2
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	4413      	add	r3, r2
 80004bc:	3b1e      	subs	r3, #30
 80004be:	2207      	movs	r2, #7
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	43db      	mvns	r3, r3
 80004c6:	4019      	ands	r1, r3
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	6898      	ldr	r0, [r3, #8]
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4613      	mov	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	4413      	add	r3, r2
 80004d6:	3b1e      	subs	r3, #30
 80004d8:	fa00 f203 	lsl.w	r2, r0, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	430a      	orrs	r2, r1
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	e019      	b.n	800051a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	6919      	ldr	r1, [r3, #16]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4613      	mov	r3, r2
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	4413      	add	r3, r2
 80004f6:	2207      	movs	r2, #7
 80004f8:	fa02 f303 	lsl.w	r3, r2, r3
 80004fc:	43db      	mvns	r3, r3
 80004fe:	4019      	ands	r1, r3
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	6898      	ldr	r0, [r3, #8]
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4613      	mov	r3, r2
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4413      	add	r3, r2
 800050e:	fa00 f203 	lsl.w	r2, r0, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	430a      	orrs	r2, r1
 8000518:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b10      	cmp	r3, #16
 8000520:	d003      	beq.n	800052a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000526:	2b11      	cmp	r3, #17
 8000528:	d132      	bne.n	8000590 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d125      	bne.n	8000580 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800053e:	2b00      	cmp	r3, #0
 8000540:	d126      	bne.n	8000590 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	689a      	ldr	r2, [r3, #8]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000550:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b10      	cmp	r3, #16
 8000558:	d11a      	bne.n	8000590 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a13      	ldr	r2, [pc, #76]	; (80005ac <HAL_ADC_ConfigChannel+0x1ec>)
 8000560:	fba2 2303 	umull	r2, r3, r2, r3
 8000564:	0c9a      	lsrs	r2, r3, #18
 8000566:	4613      	mov	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000570:	e002      	b.n	8000578 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	3b01      	subs	r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f9      	bne.n	8000572 <HAL_ADC_ConfigChannel+0x1b2>
 800057e:	e007      	b.n	8000590 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000584:	f043 0220 	orr.w	r2, r3, #32
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000598:	7bfb      	ldrb	r3, [r7, #15]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	40012400 	.word	0x40012400
 80005a8:	20000008 	.word	0x20000008
 80005ac:	431bde83 	.word	0x431bde83

080005b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d127      	bne.n	800061a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f022 0201 	bic.w	r2, r2, #1
 80005d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80005da:	f7ff fe0f 	bl	80001fc <HAL_GetTick>
 80005de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80005e0:	e014      	b.n	800060c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80005e2:	f7ff fe0b 	bl	80001fc <HAL_GetTick>
 80005e6:	4602      	mov	r2, r0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d90d      	bls.n	800060c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f4:	f043 0210 	orr.w	r2, r3, #16
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000600:	f043 0201 	orr.w	r2, r3, #1
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000608:	2301      	movs	r3, #1
 800060a:	e007      	b.n	800061c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	2b01      	cmp	r3, #1
 8000618:	d0e3      	beq.n	80005e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 021f 	and.w	r2, r3, #31
 8000698:	4906      	ldr	r1, [pc, #24]	; (80006b4 <NVIC_EnableIRQ+0x2c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	095b      	lsrs	r3, r3, #5
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	da0b      	bge.n	80006e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <NVIC_SetPriority+0x4c>)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	3b04      	subs	r3, #4
 80006da:	0112      	lsls	r2, r2, #4
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	440b      	add	r3, r1
 80006e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e2:	e009      	b.n	80006f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4907      	ldr	r1, [pc, #28]	; (8000708 <NVIC_SetPriority+0x50>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00
 8000708:	e000e100 	.word	0xe000e100

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000780:	d301      	bcc.n	8000786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000782:	2301      	movs	r3, #1
 8000784:	e00f      	b.n	80007a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <SysTick_Config+0x40>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078e:	210f      	movs	r1, #15
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f7ff ff90 	bl	80006b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <SysTick_Config+0x40>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SysTick_Config+0x40>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff31 	bl	8000624 <NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff46 	bl	800066c <NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ff90 	bl	800070c <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5f 	bl	80006b8 <NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff39 	bl	8000688 <NVIC_EnableIRQ>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ffa2 	bl	8000770 <SysTick_Config>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e043      	b.n	80008d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <HAL_DMA_Init+0xa8>)
 8000856:	4413      	add	r3, r2
 8000858:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <HAL_DMA_Init+0xac>)
 800085a:	fba2 2303 	umull	r2, r3, r2, r3
 800085e:	091b      	lsrs	r3, r3, #4
 8000860:	009a      	lsls	r2, r3, #2
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <HAL_DMA_Init+0xb0>)
 800086a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2202      	movs	r2, #2
 8000870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000882:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000886:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800089c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2201      	movs	r2, #1
 80008c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	bffdfff8 	.word	0xbffdfff8
 80008e4:	cccccccd 	.word	0xcccccccd
 80008e8:	40020000 	.word	0x40020000

080008ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	2204      	movs	r2, #4
 800090a:	409a      	lsls	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4013      	ands	r3, r2
 8000910:	2b00      	cmp	r3, #0
 8000912:	d04f      	beq.n	80009b4 <HAL_DMA_IRQHandler+0xc8>
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	2b00      	cmp	r3, #0
 800091c:	d04a      	beq.n	80009b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f003 0320 	and.w	r3, r3, #32
 8000928:	2b00      	cmp	r3, #0
 800092a:	d107      	bne.n	800093c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f022 0204 	bic.w	r2, r2, #4
 800093a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a66      	ldr	r2, [pc, #408]	; (8000adc <HAL_DMA_IRQHandler+0x1f0>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d029      	beq.n	800099a <HAL_DMA_IRQHandler+0xae>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a65      	ldr	r2, [pc, #404]	; (8000ae0 <HAL_DMA_IRQHandler+0x1f4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d022      	beq.n	8000996 <HAL_DMA_IRQHandler+0xaa>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a63      	ldr	r2, [pc, #396]	; (8000ae4 <HAL_DMA_IRQHandler+0x1f8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d01a      	beq.n	8000990 <HAL_DMA_IRQHandler+0xa4>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a62      	ldr	r2, [pc, #392]	; (8000ae8 <HAL_DMA_IRQHandler+0x1fc>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d012      	beq.n	800098a <HAL_DMA_IRQHandler+0x9e>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a60      	ldr	r2, [pc, #384]	; (8000aec <HAL_DMA_IRQHandler+0x200>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d00a      	beq.n	8000984 <HAL_DMA_IRQHandler+0x98>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a5f      	ldr	r2, [pc, #380]	; (8000af0 <HAL_DMA_IRQHandler+0x204>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d102      	bne.n	800097e <HAL_DMA_IRQHandler+0x92>
 8000978:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800097c:	e00e      	b.n	800099c <HAL_DMA_IRQHandler+0xb0>
 800097e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000982:	e00b      	b.n	800099c <HAL_DMA_IRQHandler+0xb0>
 8000984:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000988:	e008      	b.n	800099c <HAL_DMA_IRQHandler+0xb0>
 800098a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800098e:	e005      	b.n	800099c <HAL_DMA_IRQHandler+0xb0>
 8000990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000994:	e002      	b.n	800099c <HAL_DMA_IRQHandler+0xb0>
 8000996:	2340      	movs	r3, #64	; 0x40
 8000998:	e000      	b.n	800099c <HAL_DMA_IRQHandler+0xb0>
 800099a:	2304      	movs	r3, #4
 800099c:	4a55      	ldr	r2, [pc, #340]	; (8000af4 <HAL_DMA_IRQHandler+0x208>)
 800099e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f000 8094 	beq.w	8000ad2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80009b2:	e08e      	b.n	8000ad2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	2202      	movs	r2, #2
 80009ba:	409a      	lsls	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4013      	ands	r3, r2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d056      	beq.n	8000a72 <HAL_DMA_IRQHandler+0x186>
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d051      	beq.n	8000a72 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0320 	and.w	r3, r3, #32
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10b      	bne.n	80009f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 020a 	bic.w	r2, r2, #10
 80009ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2201      	movs	r2, #1
 80009f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a38      	ldr	r2, [pc, #224]	; (8000adc <HAL_DMA_IRQHandler+0x1f0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d029      	beq.n	8000a52 <HAL_DMA_IRQHandler+0x166>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a37      	ldr	r2, [pc, #220]	; (8000ae0 <HAL_DMA_IRQHandler+0x1f4>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d022      	beq.n	8000a4e <HAL_DMA_IRQHandler+0x162>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a35      	ldr	r2, [pc, #212]	; (8000ae4 <HAL_DMA_IRQHandler+0x1f8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d01a      	beq.n	8000a48 <HAL_DMA_IRQHandler+0x15c>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a34      	ldr	r2, [pc, #208]	; (8000ae8 <HAL_DMA_IRQHandler+0x1fc>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d012      	beq.n	8000a42 <HAL_DMA_IRQHandler+0x156>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a32      	ldr	r2, [pc, #200]	; (8000aec <HAL_DMA_IRQHandler+0x200>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d00a      	beq.n	8000a3c <HAL_DMA_IRQHandler+0x150>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <HAL_DMA_IRQHandler+0x204>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d102      	bne.n	8000a36 <HAL_DMA_IRQHandler+0x14a>
 8000a30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a34:	e00e      	b.n	8000a54 <HAL_DMA_IRQHandler+0x168>
 8000a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a3a:	e00b      	b.n	8000a54 <HAL_DMA_IRQHandler+0x168>
 8000a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a40:	e008      	b.n	8000a54 <HAL_DMA_IRQHandler+0x168>
 8000a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a46:	e005      	b.n	8000a54 <HAL_DMA_IRQHandler+0x168>
 8000a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a4c:	e002      	b.n	8000a54 <HAL_DMA_IRQHandler+0x168>
 8000a4e:	2320      	movs	r3, #32
 8000a50:	e000      	b.n	8000a54 <HAL_DMA_IRQHandler+0x168>
 8000a52:	2302      	movs	r3, #2
 8000a54:	4a27      	ldr	r2, [pc, #156]	; (8000af4 <HAL_DMA_IRQHandler+0x208>)
 8000a56:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d034      	beq.n	8000ad2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000a70:	e02f      	b.n	8000ad2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	2208      	movs	r2, #8
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d028      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0x1e8>
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d023      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f022 020e 	bic.w	r2, r2, #14
 8000a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aaa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d004      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	4798      	blx	r3
    }
  }
  return;
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
}
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40020008 	.word	0x40020008
 8000ae0:	4002001c 	.word	0x4002001c
 8000ae4:	40020030 	.word	0x40020030
 8000ae8:	40020044 	.word	0x40020044
 8000aec:	40020058 	.word	0x40020058
 8000af0:	4002006c 	.word	0x4002006c
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b08b      	sub	sp, #44	; 0x2c
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1a:	e169      	b.n	8000df0 <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f040 8158 	bne.w	8000dea <HAL_GPIO_Init+0x2f2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	4a9a      	ldr	r2, [pc, #616]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d05e      	beq.n	8000c02 <HAL_GPIO_Init+0x10a>
 8000b44:	4a98      	ldr	r2, [pc, #608]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d875      	bhi.n	8000c36 <HAL_GPIO_Init+0x13e>
 8000b4a:	4a98      	ldr	r2, [pc, #608]	; (8000dac <HAL_GPIO_Init+0x2b4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d058      	beq.n	8000c02 <HAL_GPIO_Init+0x10a>
 8000b50:	4a96      	ldr	r2, [pc, #600]	; (8000dac <HAL_GPIO_Init+0x2b4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d86f      	bhi.n	8000c36 <HAL_GPIO_Init+0x13e>
 8000b56:	4a96      	ldr	r2, [pc, #600]	; (8000db0 <HAL_GPIO_Init+0x2b8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d052      	beq.n	8000c02 <HAL_GPIO_Init+0x10a>
 8000b5c:	4a94      	ldr	r2, [pc, #592]	; (8000db0 <HAL_GPIO_Init+0x2b8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d869      	bhi.n	8000c36 <HAL_GPIO_Init+0x13e>
 8000b62:	4a94      	ldr	r2, [pc, #592]	; (8000db4 <HAL_GPIO_Init+0x2bc>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d04c      	beq.n	8000c02 <HAL_GPIO_Init+0x10a>
 8000b68:	4a92      	ldr	r2, [pc, #584]	; (8000db4 <HAL_GPIO_Init+0x2bc>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d863      	bhi.n	8000c36 <HAL_GPIO_Init+0x13e>
 8000b6e:	4a92      	ldr	r2, [pc, #584]	; (8000db8 <HAL_GPIO_Init+0x2c0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d046      	beq.n	8000c02 <HAL_GPIO_Init+0x10a>
 8000b74:	4a90      	ldr	r2, [pc, #576]	; (8000db8 <HAL_GPIO_Init+0x2c0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d85d      	bhi.n	8000c36 <HAL_GPIO_Init+0x13e>
 8000b7a:	2b12      	cmp	r3, #18
 8000b7c:	d82a      	bhi.n	8000bd4 <HAL_GPIO_Init+0xdc>
 8000b7e:	2b12      	cmp	r3, #18
 8000b80:	d859      	bhi.n	8000c36 <HAL_GPIO_Init+0x13e>
 8000b82:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <HAL_GPIO_Init+0x90>)
 8000b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b88:	08000c03 	.word	0x08000c03
 8000b8c:	08000bdd 	.word	0x08000bdd
 8000b90:	08000bef 	.word	0x08000bef
 8000b94:	08000c31 	.word	0x08000c31
 8000b98:	08000c37 	.word	0x08000c37
 8000b9c:	08000c37 	.word	0x08000c37
 8000ba0:	08000c37 	.word	0x08000c37
 8000ba4:	08000c37 	.word	0x08000c37
 8000ba8:	08000c37 	.word	0x08000c37
 8000bac:	08000c37 	.word	0x08000c37
 8000bb0:	08000c37 	.word	0x08000c37
 8000bb4:	08000c37 	.word	0x08000c37
 8000bb8:	08000c37 	.word	0x08000c37
 8000bbc:	08000c37 	.word	0x08000c37
 8000bc0:	08000c37 	.word	0x08000c37
 8000bc4:	08000c37 	.word	0x08000c37
 8000bc8:	08000c37 	.word	0x08000c37
 8000bcc:	08000be5 	.word	0x08000be5
 8000bd0:	08000bf9 	.word	0x08000bf9
 8000bd4:	4a79      	ldr	r2, [pc, #484]	; (8000dbc <HAL_GPIO_Init+0x2c4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d013      	beq.n	8000c02 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bda:	e02c      	b.n	8000c36 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	623b      	str	r3, [r7, #32]
          break;
 8000be2:	e029      	b.n	8000c38 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	3304      	adds	r3, #4
 8000bea:	623b      	str	r3, [r7, #32]
          break;
 8000bec:	e024      	b.n	8000c38 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	3308      	adds	r3, #8
 8000bf4:	623b      	str	r3, [r7, #32]
          break;
 8000bf6:	e01f      	b.n	8000c38 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	330c      	adds	r3, #12
 8000bfe:	623b      	str	r3, [r7, #32]
          break;
 8000c00:	e01a      	b.n	8000c38 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	623b      	str	r3, [r7, #32]
          break;
 8000c0e:	e013      	b.n	8000c38 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d105      	bne.n	8000c24 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c18:	2308      	movs	r3, #8
 8000c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	611a      	str	r2, [r3, #16]
          break;
 8000c22:	e009      	b.n	8000c38 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c24:	2308      	movs	r3, #8
 8000c26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	615a      	str	r2, [r3, #20]
          break;
 8000c2e:	e003      	b.n	8000c38 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e000      	b.n	8000c38 <HAL_GPIO_Init+0x140>
          break;
 8000c36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	2bff      	cmp	r3, #255	; 0xff
 8000c3c:	d801      	bhi.n	8000c42 <HAL_GPIO_Init+0x14a>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	e001      	b.n	8000c46 <HAL_GPIO_Init+0x14e>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3304      	adds	r3, #4
 8000c46:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	2bff      	cmp	r3, #255	; 0xff
 8000c4c:	d802      	bhi.n	8000c54 <HAL_GPIO_Init+0x15c>
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	e002      	b.n	8000c5a <HAL_GPIO_Init+0x162>
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	3b08      	subs	r3, #8
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	210f      	movs	r1, #15
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	6a39      	ldr	r1, [r7, #32]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	431a      	orrs	r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 80b1 	beq.w	8000dea <HAL_GPIO_Init+0x2f2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c88:	4b4d      	ldr	r3, [pc, #308]	; (8000dc0 <HAL_GPIO_Init+0x2c8>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a4c      	ldr	r2, [pc, #304]	; (8000dc0 <HAL_GPIO_Init+0x2c8>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b4a      	ldr	r3, [pc, #296]	; (8000dc0 <HAL_GPIO_Init+0x2c8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000ca0:	4a48      	ldr	r2, [pc, #288]	; (8000dc4 <HAL_GPIO_Init+0x2cc>)
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cac:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a40      	ldr	r2, [pc, #256]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d013      	beq.n	8000cf4 <HAL_GPIO_Init+0x1fc>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a3f      	ldr	r2, [pc, #252]	; (8000dcc <HAL_GPIO_Init+0x2d4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d00d      	beq.n	8000cf0 <HAL_GPIO_Init+0x1f8>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a3e      	ldr	r2, [pc, #248]	; (8000dd0 <HAL_GPIO_Init+0x2d8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d007      	beq.n	8000cec <HAL_GPIO_Init+0x1f4>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3d      	ldr	r2, [pc, #244]	; (8000dd4 <HAL_GPIO_Init+0x2dc>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d101      	bne.n	8000ce8 <HAL_GPIO_Init+0x1f0>
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e006      	b.n	8000cf6 <HAL_GPIO_Init+0x1fe>
 8000ce8:	2304      	movs	r3, #4
 8000cea:	e004      	b.n	8000cf6 <HAL_GPIO_Init+0x1fe>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x1fe>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <HAL_GPIO_Init+0x1fe>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf8:	f002 0203 	and.w	r2, r2, #3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000d06:	492f      	ldr	r1, [pc, #188]	; (8000dc4 <HAL_GPIO_Init+0x2cc>)
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	492c      	ldr	r1, [pc, #176]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x244>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4928      	ldr	r1, [pc, #160]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <HAL_GPIO_Init+0x25e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4922      	ldr	r1, [pc, #136]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x26c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	491e      	ldr	r1, [pc, #120]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <HAL_GPIO_Init+0x286>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	4918      	ldr	r1, [pc, #96]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	608b      	str	r3, [r1, #8]
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x294>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4914      	ldr	r1, [pc, #80]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d021      	beq.n	8000ddc <HAL_GPIO_Init+0x2e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <HAL_GPIO_Init+0x2e0>)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60cb      	str	r3, [r1, #12]
 8000da4:	e021      	b.n	8000dea <HAL_GPIO_Init+0x2f2>
 8000da6:	bf00      	nop
 8000da8:	10320000 	.word	0x10320000
 8000dac:	10310000 	.word	0x10310000
 8000db0:	10220000 	.word	0x10220000
 8000db4:	10210000 	.word	0x10210000
 8000db8:	10120000 	.word	0x10120000
 8000dbc:	10110000 	.word	0x10110000
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40011400 	.word	0x40011400
 8000dd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_GPIO_Init+0x30c>)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	4907      	ldr	r1, [pc, #28]	; (8000e04 <HAL_GPIO_Init+0x30c>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	3301      	adds	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	2b0f      	cmp	r3, #15
 8000df4:	f67f ae92 	bls.w	8000b1c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	372c      	adds	r7, #44	; 0x2c
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	40010400 	.word	0x40010400

08000e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	807b      	strh	r3, [r7, #2]
 8000e14:	4613      	mov	r3, r2
 8000e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e18:	787b      	ldrb	r3, [r7, #1]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e1e:	887a      	ldrh	r2, [r7, #2]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e24:	e003      	b.n	8000e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	041a      	lsls	r2, r3, #16
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	611a      	str	r2, [r3, #16]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0f3      	b.n	800103a <HAL_I2C_Init+0x202>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d106      	bne.n	8000e6c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f002 faba 	bl	80033e0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2224      	movs	r2, #36	; 0x24
 8000e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e84:	f000 fcc2 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 8000e88:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	4a6d      	ldr	r2, [pc, #436]	; (8001044 <HAL_I2C_Init+0x20c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d807      	bhi.n	8000ea4 <HAL_I2C_Init+0x6c>
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4a6c      	ldr	r2, [pc, #432]	; (8001048 <HAL_I2C_Init+0x210>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	bf94      	ite	ls
 8000e9c:	2301      	movls	r3, #1
 8000e9e:	2300      	movhi	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	e006      	b.n	8000eb2 <HAL_I2C_Init+0x7a>
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4a69      	ldr	r2, [pc, #420]	; (800104c <HAL_I2C_Init+0x214>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	bf94      	ite	ls
 8000eac:	2301      	movls	r3, #1
 8000eae:	2300      	movhi	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0bf      	b.n	800103a <HAL_I2C_Init+0x202>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	4a64      	ldr	r2, [pc, #400]	; (8001050 <HAL_I2C_Init+0x218>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	0c9b      	lsrs	r3, r3, #18
 8000ec4:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	4a5c      	ldr	r2, [pc, #368]	; (8001044 <HAL_I2C_Init+0x20c>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d802      	bhi.n	8000ede <HAL_I2C_Init+0xa6>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3301      	adds	r3, #1
 8000edc:	e009      	b.n	8000ef2 <HAL_I2C_Init+0xba>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ee4:	fb02 f303 	mul.w	r3, r2, r3
 8000ee8:	4a5a      	ldr	r2, [pc, #360]	; (8001054 <HAL_I2C_Init+0x21c>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	099b      	lsrs	r3, r3, #6
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4a51      	ldr	r2, [pc, #324]	; (8001044 <HAL_I2C_Init+0x20c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d819      	bhi.n	8000f36 <HAL_I2C_Init+0xfe>
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00a      	beq.n	8000f32 <HAL_I2C_Init+0xfa>
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	1e5a      	subs	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f30:	e051      	b.n	8000fd6 <HAL_I2C_Init+0x19e>
 8000f32:	2304      	movs	r3, #4
 8000f34:	e04f      	b.n	8000fd6 <HAL_I2C_Init+0x19e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d111      	bne.n	8000f62 <HAL_I2C_Init+0x12a>
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1e59      	subs	r1, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f50:	3301      	adds	r3, #1
 8000f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	e012      	b.n	8000f88 <HAL_I2C_Init+0x150>
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1e59      	subs	r1, r3, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	009a      	lsls	r2, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf0c      	ite	eq
 8000f82:	2301      	moveq	r3, #1
 8000f84:	2300      	movne	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_I2C_Init+0x158>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e022      	b.n	8000fd6 <HAL_I2C_Init+0x19e>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10e      	bne.n	8000fb6 <HAL_I2C_Init+0x17e>
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	1e59      	subs	r1, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000faa:	3301      	adds	r3, #1
 8000fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb4:	e00f      	b.n	8000fd6 <HAL_I2C_Init+0x19e>
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1e59      	subs	r1, r3, #1
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009a      	lsls	r2, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69d9      	ldr	r1, [r3, #28]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1a      	ldr	r2, [r3, #32]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6919      	ldr	r1, [r3, #16]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6959      	ldr	r1, [r3, #20]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699a      	ldr	r2, [r3, #24]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0201 	orr.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2220      	movs	r2, #32
 8001026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	000186a0 	.word	0x000186a0
 8001048:	001e847f 	.word	0x001e847f
 800104c:	003d08ff 	.word	0x003d08ff
 8001050:	431bde83 	.word	0x431bde83
 8001054:	10624dd3 	.word	0x10624dd3

08001058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 8087 	beq.w	8001180 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001072:	4b92      	ldr	r3, [pc, #584]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b04      	cmp	r3, #4
 800107c:	d00c      	beq.n	8001098 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800107e:	4b8f      	ldr	r3, [pc, #572]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b08      	cmp	r3, #8
 8001088:	d112      	bne.n	80010b0 <HAL_RCC_OscConfig+0x58>
 800108a:	4b8c      	ldr	r3, [pc, #560]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001096:	d10b      	bne.n	80010b0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	4b88      	ldr	r3, [pc, #544]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d06c      	beq.n	800117e <HAL_RCC_OscConfig+0x126>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d168      	bne.n	800117e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e22d      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b8:	d106      	bne.n	80010c8 <HAL_RCC_OscConfig+0x70>
 80010ba:	4b80      	ldr	r3, [pc, #512]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a7f      	ldr	r2, [pc, #508]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e02e      	b.n	8001126 <HAL_RCC_OscConfig+0xce>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10c      	bne.n	80010ea <HAL_RCC_OscConfig+0x92>
 80010d0:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a79      	ldr	r2, [pc, #484]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b77      	ldr	r3, [pc, #476]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a76      	ldr	r2, [pc, #472]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e01d      	b.n	8001126 <HAL_RCC_OscConfig+0xce>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f2:	d10c      	bne.n	800110e <HAL_RCC_OscConfig+0xb6>
 80010f4:	4b71      	ldr	r3, [pc, #452]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a70      	ldr	r2, [pc, #448]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80010fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b6e      	ldr	r3, [pc, #440]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a6d      	ldr	r2, [pc, #436]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 8001106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e00b      	b.n	8001126 <HAL_RCC_OscConfig+0xce>
 800110e:	4b6b      	ldr	r3, [pc, #428]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a6a      	ldr	r2, [pc, #424]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 8001114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b68      	ldr	r3, [pc, #416]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a67      	ldr	r2, [pc, #412]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 8001120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001124:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d013      	beq.n	8001156 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112e:	f7ff f865 	bl	80001fc <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001136:	f7ff f861 	bl	80001fc <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	; 0x64
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e1e1      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001148:	4b5c      	ldr	r3, [pc, #368]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0xde>
 8001154:	e014      	b.n	8001180 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff f851 	bl	80001fc <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115e:	f7ff f84d 	bl	80001fc <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b64      	cmp	r3, #100	; 0x64
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1cd      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001170:	4b52      	ldr	r3, [pc, #328]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0x106>
 800117c:	e000      	b.n	8001180 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d063      	beq.n	8001254 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800118c:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00b      	beq.n	80011b0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001198:	4b48      	ldr	r3, [pc, #288]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d11c      	bne.n	80011de <HAL_RCC_OscConfig+0x186>
 80011a4:	4b45      	ldr	r3, [pc, #276]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d116      	bne.n	80011de <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b0:	4b42      	ldr	r3, [pc, #264]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_OscConfig+0x170>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e1a1      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4939      	ldr	r1, [pc, #228]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011dc:	e03a      	b.n	8001254 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d020      	beq.n	8001228 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <HAL_RCC_OscConfig+0x268>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff f806 	bl	80001fc <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff f802 	bl	80001fc <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e182      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4926      	ldr	r1, [pc, #152]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
 8001226:	e015      	b.n	8001254 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <HAL_RCC_OscConfig+0x268>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7fe ffe5 	bl	80001fc <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001236:	f7fe ffe1 	bl	80001fc <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e161      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f0      	bne.n	8001236 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d039      	beq.n	80012d4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d019      	beq.n	800129c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7fe ffc5 	bl	80001fc <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001276:	f7fe ffc1 	bl	80001fc <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e141      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_RCC_OscConfig+0x264>)
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f000 fae1 	bl	800185c <RCC_Delay>
 800129a:	e01b      	b.n	80012d4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a2:	f7fe ffab 	bl	80001fc <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a8:	e00e      	b.n	80012c8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012aa:	f7fe ffa7 	bl	80001fc <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d907      	bls.n	80012c8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e127      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	42420000 	.word	0x42420000
 80012c4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	4b92      	ldr	r3, [pc, #584]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1ea      	bne.n	80012aa <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a6 	beq.w	800142e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e6:	4b8b      	ldr	r3, [pc, #556]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10d      	bne.n	800130e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b88      	ldr	r3, [pc, #544]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a87      	ldr	r2, [pc, #540]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b85      	ldr	r3, [pc, #532]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800130a:	2301      	movs	r3, #1
 800130c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	4b82      	ldr	r3, [pc, #520]	; (8001518 <HAL_RCC_OscConfig+0x4c0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d118      	bne.n	800134c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131a:	4b7f      	ldr	r3, [pc, #508]	; (8001518 <HAL_RCC_OscConfig+0x4c0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a7e      	ldr	r2, [pc, #504]	; (8001518 <HAL_RCC_OscConfig+0x4c0>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001326:	f7fe ff69 	bl	80001fc <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7fe ff65 	bl	80001fc <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b64      	cmp	r3, #100	; 0x64
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0e5      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	4b75      	ldr	r3, [pc, #468]	; (8001518 <HAL_RCC_OscConfig+0x4c0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x30a>
 8001354:	4b6f      	ldr	r3, [pc, #444]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a6e      	ldr	r2, [pc, #440]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	e02d      	b.n	80013be <HAL_RCC_OscConfig+0x366>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x32c>
 800136a:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a69      	ldr	r2, [pc, #420]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	4b67      	ldr	r3, [pc, #412]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a66      	ldr	r2, [pc, #408]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6213      	str	r3, [r2, #32]
 8001382:	e01c      	b.n	80013be <HAL_RCC_OscConfig+0x366>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b05      	cmp	r3, #5
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x34e>
 800138c:	4b61      	ldr	r3, [pc, #388]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a60      	ldr	r2, [pc, #384]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6213      	str	r3, [r2, #32]
 8001398:	4b5e      	ldr	r3, [pc, #376]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4a5d      	ldr	r2, [pc, #372]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6213      	str	r3, [r2, #32]
 80013a4:	e00b      	b.n	80013be <HAL_RCC_OscConfig+0x366>
 80013a6:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a5a      	ldr	r2, [pc, #360]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	4b58      	ldr	r3, [pc, #352]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a57      	ldr	r2, [pc, #348]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d015      	beq.n	80013f2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7fe ff19 	bl	80001fc <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013cc:	e00a      	b.n	80013e4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ce:	f7fe ff15 	bl	80001fc <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013dc:	4293      	cmp	r3, r2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e093      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ee      	beq.n	80013ce <HAL_RCC_OscConfig+0x376>
 80013f0:	e014      	b.n	800141c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7fe ff03 	bl	80001fc <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7fe feff 	bl	80001fc <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	f241 3288 	movw	r2, #5000	; 0x1388
 8001408:	4293      	cmp	r3, r2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e07d      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001410:	4b40      	ldr	r3, [pc, #256]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ee      	bne.n	80013fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d105      	bne.n	800142e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001422:	4b3c      	ldr	r3, [pc, #240]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a3b      	ldr	r2, [pc, #236]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 8001428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d069      	beq.n	800150a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001436:	4b37      	ldr	r3, [pc, #220]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b08      	cmp	r3, #8
 8001440:	d061      	beq.n	8001506 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d146      	bne.n	80014d8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7fe fed4 	bl	80001fc <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7fe fed0 	bl	80001fc <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e050      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147e:	d108      	bne.n	8001492 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4921      	ldr	r1, [pc, #132]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a19      	ldr	r1, [r3, #32]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	430b      	orrs	r3, r1
 80014a4:	491b      	ldr	r1, [pc, #108]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7fe fea4 	bl	80001fc <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b8:	f7fe fea0 	bl	80001fc <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e020      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x460>
 80014d6:	e018      	b.n	800150a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7fe fe8d 	bl	80001fc <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e6:	f7fe fe89 	bl	80001fc <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e009      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_RCC_OscConfig+0x4bc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x48e>
 8001504:	e001      	b.n	800150a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	40007000 	.word	0x40007000
 800151c:	42420060 	.word	0x42420060

08001520 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800152e:	4b7e      	ldr	r3, [pc, #504]	; (8001728 <HAL_RCC_ClockConfig+0x208>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d910      	bls.n	800155e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153c:	4b7a      	ldr	r3, [pc, #488]	; (8001728 <HAL_RCC_ClockConfig+0x208>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f023 0207 	bic.w	r2, r3, #7
 8001544:	4978      	ldr	r1, [pc, #480]	; (8001728 <HAL_RCC_ClockConfig+0x208>)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800154c:	4b76      	ldr	r3, [pc, #472]	; (8001728 <HAL_RCC_ClockConfig+0x208>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d001      	beq.n	800155e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0e0      	b.n	8001720 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d020      	beq.n	80015ac <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001576:	4b6d      	ldr	r3, [pc, #436]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4a6c      	ldr	r2, [pc, #432]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 800157c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001580:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800158e:	4b67      	ldr	r3, [pc, #412]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a66      	ldr	r2, [pc, #408]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 8001594:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001598:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159a:	4b64      	ldr	r3, [pc, #400]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	4961      	ldr	r1, [pc, #388]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d06a      	beq.n	800168e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d107      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c0:	4b5a      	ldr	r3, [pc, #360]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d115      	bne.n	80015f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0a7      	b.n	8001720 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d8:	4b54      	ldr	r3, [pc, #336]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e09b      	b.n	8001720 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	4b50      	ldr	r3, [pc, #320]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e093      	b.n	8001720 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f8:	4b4c      	ldr	r3, [pc, #304]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f023 0203 	bic.w	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4949      	ldr	r1, [pc, #292]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800160a:	f7fe fdf7 	bl	80001fc <HAL_GetTick>
 800160e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d112      	bne.n	800163e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161a:	f7fe fdef 	bl	80001fc <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e077      	b.n	8001720 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001630:	4b3e      	ldr	r3, [pc, #248]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b04      	cmp	r3, #4
 800163a:	d1ee      	bne.n	800161a <HAL_RCC_ClockConfig+0xfa>
 800163c:	e027      	b.n	800168e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d11d      	bne.n	8001682 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001646:	e00a      	b.n	800165e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f7fe fdd8 	bl	80001fc <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e060      	b.n	8001720 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d1ee      	bne.n	8001648 <HAL_RCC_ClockConfig+0x128>
 800166a:	e010      	b.n	800168e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166c:	f7fe fdc6 	bl	80001fc <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	; 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e04e      	b.n	8001720 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1ee      	bne.n	800166c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_RCC_ClockConfig+0x208>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d210      	bcs.n	80016be <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_RCC_ClockConfig+0x208>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 0207 	bic.w	r2, r3, #7
 80016a4:	4920      	ldr	r1, [pc, #128]	; (8001728 <HAL_RCC_ClockConfig+0x208>)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <HAL_RCC_ClockConfig+0x208>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d001      	beq.n	80016be <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e030      	b.n	8001720 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d008      	beq.n	80016dc <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	4915      	ldr	r1, [pc, #84]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d009      	beq.n	80016fc <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	490d      	ldr	r1, [pc, #52]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016fc:	f000 f81c 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_RCC_ClockConfig+0x20c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	4908      	ldr	r1, [pc, #32]	; (8001730 <HAL_RCC_ClockConfig+0x210>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_RCC_ClockConfig+0x214>)
 8001716:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001718:	2000      	movs	r0, #0
 800171a:	f7fe fd2d 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40022000 	.word	0x40022000
 800172c:	40021000 	.word	0x40021000
 8001730:	0800384c 	.word	0x0800384c
 8001734:	20000008 	.word	0x20000008

08001738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b490      	push	{r4, r7}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800173e:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001740:	1d3c      	adds	r4, r7, #4
 8001742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001748:	f240 2301 	movw	r3, #513	; 0x201
 800174c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b04      	cmp	r3, #4
 8001770:	d002      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x40>
 8001772:	2b08      	cmp	r3, #8
 8001774:	d003      	beq.n	800177e <HAL_RCC_GetSysClockFreq+0x46>
 8001776:	e02d      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800177a:	623b      	str	r3, [r7, #32]
      break;
 800177c:	e02d      	b.n	80017da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	0c9b      	lsrs	r3, r3, #18
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800178a:	4413      	add	r3, r2
 800178c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001790:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	0c5b      	lsrs	r3, r3, #17
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017aa:	4413      	add	r3, r2
 80017ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017b0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017b6:	fb02 f203 	mul.w	r2, r2, r3
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
 80017c2:	e004      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	623b      	str	r3, [r7, #32]
      break;
 80017d2:	e002      	b.n	80017da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017d6:	623b      	str	r3, [r7, #32]
      break;
 80017d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017da:	6a3b      	ldr	r3, [r7, #32]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc90      	pop	{r4, r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	0800383c 	.word	0x0800383c
 80017ec:	40021000 	.word	0x40021000
 80017f0:	007a1200 	.word	0x007a1200
 80017f4:	003d0900 	.word	0x003d0900

080017f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <HAL_RCC_GetHCLKFreq+0x10>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	20000008 	.word	0x20000008

0800180c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001810:	f7ff fff2 	bl	80017f8 <HAL_RCC_GetHCLKFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4903      	ldr	r1, [pc, #12]	; (8001830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	0800385c 	.word	0x0800385c

08001834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001838:	f7ff ffde 	bl	80017f8 <HAL_RCC_GetHCLKFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	0adb      	lsrs	r3, r3, #11
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	4903      	ldr	r1, [pc, #12]	; (8001858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800184a:	5ccb      	ldrb	r3, [r1, r3]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	0800385c 	.word	0x0800385c

0800185c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <RCC_Delay+0x38>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <RCC_Delay+0x3c>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0a5b      	lsrs	r3, r3, #9
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001878:	bf00      	nop
}
 800187a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1e5a      	subs	r2, r3, #1
 8001880:	60fa      	str	r2, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f8      	bne.n	8001878 <RCC_Delay+0x1c>
}
 8001886:	bf00      	nop
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008
 8001898:	10624dd3 	.word	0x10624dd3

0800189c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d07d      	beq.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10d      	bne.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	4a4b      	ldr	r2, [pc, #300]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d2:	61d3      	str	r3, [r2, #28]
 80018d4:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e0:	2301      	movs	r3, #1
 80018e2:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d118      	bne.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f0:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a42      	ldr	r2, [pc, #264]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fc:	f7fe fc7e 	bl	80001fc <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	e008      	b.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001904:	f7fe fc7a 	bl	80001fc <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e06d      	b.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001916:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001922:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800192a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d02e      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d027      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001948:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001950:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001956:	4a29      	ldr	r2, [pc, #164]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d014      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7fe fc49 	bl	80001fc <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7fe fc45 	bl	80001fc <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	; 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e036      	b.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ee      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4917      	ldr	r1, [pc, #92]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	490b      	ldr	r1, [pc, #44]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d008      	beq.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	4904      	ldr	r1, [pc, #16]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	42420440 	.word	0x42420440

08001a08 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_SPI_Transmit+0x26>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e125      	b.n	8001c7a <HAL_SPI_Transmit+0x272>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a36:	f7fe fbe1 	bl	80001fc <HAL_GetTick>
 8001a3a:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d002      	beq.n	8001a4e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a4c:	e10c      	b.n	8001c68 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0U))
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_SPI_Transmit+0x52>
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a5e:	e103      	b.n	8001c68 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2203      	movs	r2, #3
 8001a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aa6:	d107      	bne.n	8001ab8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ab6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac2:	2b40      	cmp	r3, #64	; 0x40
 8001ac4:	d007      	beq.n	8001ad6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ade:	d147      	bne.n	8001b70 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <HAL_SPI_Transmit+0xea>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d138      	bne.n	8001b64 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	3302      	adds	r3, #2
 8001b00:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b10:	e028      	b.n	8001b64 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d10f      	bne.n	8001b40 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	881a      	ldrh	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b3e:	e011      	b.n	8001b64 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_SPI_Transmit+0x156>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4c:	d00a      	beq.n	8001b64 <HAL_SPI_Transmit+0x15c>
 8001b4e:	f7fe fb55 	bl	80001fc <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d802      	bhi.n	8001b64 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b62:	e081      	b.n	8001c68 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1d1      	bne.n	8001b12 <HAL_SPI_Transmit+0x10a>
 8001b6e:	e048      	b.n	8001c02 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d004      	beq.n	8001b82 <HAL_SPI_Transmit+0x17a>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d13a      	bne.n	8001bf8 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	330c      	adds	r3, #12
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	7812      	ldrb	r2, [r2, #0]
 8001b8c:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3301      	adds	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ba2:	e029      	b.n	8001bf8 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d110      	bne.n	8001bd4 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	330c      	adds	r3, #12
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	7812      	ldrb	r2, [r2, #0]
 8001bbc:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bd2:	e011      	b.n	8001bf8 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_SPI_Transmit+0x1ea>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d00a      	beq.n	8001bf8 <HAL_SPI_Transmit+0x1f0>
 8001be2:	f7fe fb0b 	bl	80001fc <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d802      	bhi.n	8001bf8 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001bf6:	e037      	b.n	8001c68 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1d0      	bne.n	8001ba4 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f9e5 	bl	8001fdc <SPI_WaitFlagStateUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c1c:	e024      	b.n	8001c68 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fa43 	bl	80020ae <SPI_CheckFlag_BSY>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2220      	movs	r2, #32
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001c38:	e016      	b.n	8001c68 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10a      	bne.n	8001c58 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	77fb      	strb	r3, [r7, #31]
 8001c64:	e000      	b.n	8001c68 <HAL_SPI_Transmit+0x260>
  }

error:
 8001c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b08c      	sub	sp, #48	; 0x30
 8001c86:	af02      	add	r7, sp, #8
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_SPI_TransmitReceive+0x32>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e182      	b.n	8001fba <HAL_SPI_TransmitReceive+0x338>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cbc:	f7fe fa9e 	bl	80001fc <HAL_GetTick>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d00e      	beq.n	8001cf6 <HAL_SPI_TransmitReceive+0x74>
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cde:	d106      	bne.n	8001cee <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <HAL_SPI_TransmitReceive+0x6c>
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d003      	beq.n	8001cf6 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001cf4:	e157      	b.n	8001fa6 <HAL_SPI_TransmitReceive+0x324>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_SPI_TransmitReceive+0x86>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <HAL_SPI_TransmitReceive+0x86>
 8001d02:	887b      	ldrh	r3, [r7, #2]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d103      	bne.n	8001d10 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001d0e:	e14a      	b.n	8001fa6 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d103      	bne.n	8001d24 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2205      	movs	r2, #5
 8001d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	887a      	ldrh	r2, [r7, #2]
 8001d3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	887a      	ldrh	r2, [r7, #2]
 8001d46:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d64:	2b40      	cmp	r3, #64	; 0x40
 8001d66:	d007      	beq.n	8001d78 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d80:	d171      	bne.n	8001e66 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d004      	beq.n	8001d94 <HAL_SPI_TransmitReceive+0x112>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d15d      	bne.n	8001e50 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	881a      	ldrh	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3302      	adds	r3, #2
 8001da2:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001db2:	e04d      	b.n	8001e50 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01c      	beq.n	8001df4 <HAL_SPI_TransmitReceive+0x172>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d017      	beq.n	8001df4 <HAL_SPI_TransmitReceive+0x172>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d110      	bne.n	8001df4 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	881a      	ldrh	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	3302      	adds	r3, #2
 8001de0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d018      	beq.n	8001e30 <HAL_SPI_TransmitReceive+0x1ae>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d111      	bne.n	8001e30 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e36:	d00b      	beq.n	8001e50 <HAL_SPI_TransmitReceive+0x1ce>
 8001e38:	f7fe f9e0 	bl	80001fc <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d803      	bhi.n	8001e50 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001e4e:	e0aa      	b.n	8001fa6 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ac      	bne.n	8001db4 <HAL_SPI_TransmitReceive+0x132>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1a7      	bne.n	8001db4 <HAL_SPI_TransmitReceive+0x132>
 8001e64:	e070      	b.n	8001f48 <HAL_SPI_TransmitReceive+0x2c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d004      	beq.n	8001e78 <HAL_SPI_TransmitReceive+0x1f6>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d15d      	bne.n	8001f34 <HAL_SPI_TransmitReceive+0x2b2>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	330c      	adds	r3, #12
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	3301      	adds	r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e98:	e04c      	b.n	8001f34 <HAL_SPI_TransmitReceive+0x2b2>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01c      	beq.n	8001eda <HAL_SPI_TransmitReceive+0x258>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d017      	beq.n	8001eda <HAL_SPI_TransmitReceive+0x258>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d110      	bne.n	8001eda <HAL_SPI_TransmitReceive+0x258>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	60ba      	str	r2, [r7, #8]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	320c      	adds	r2, #12
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d017      	beq.n	8001f14 <HAL_SPI_TransmitReceive+0x292>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d110      	bne.n	8001f14 <HAL_SPI_TransmitReceive+0x292>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68d9      	ldr	r1, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	b2ca      	uxtb	r2, r1
 8001f00:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001f10:	2301      	movs	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1a:	d00b      	beq.n	8001f34 <HAL_SPI_TransmitReceive+0x2b2>
 8001f1c:	f7fe f96e 	bl	80001fc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d803      	bhi.n	8001f34 <HAL_SPI_TransmitReceive+0x2b2>
      {
        errorcode = HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001f32:	e038      	b.n	8001fa6 <HAL_SPI_TransmitReceive+0x324>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ad      	bne.n	8001e9a <HAL_SPI_TransmitReceive+0x218>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1a8      	bne.n	8001e9a <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	2201      	movs	r2, #1
 8001f50:	2102      	movs	r1, #2
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f842 	bl	8001fdc <SPI_WaitFlagStateUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_SPI_TransmitReceive+0x2e4>
  {
    errorcode = HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001f64:	e01f      	b.n	8001fa6 <HAL_SPI_TransmitReceive+0x324>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f89f 	bl	80020ae <SPI_CheckFlag_BSY>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <HAL_SPI_TransmitReceive+0x302>
  {
    errorcode = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f82:	e010      	b.n	8001fa6 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10b      	bne.n	8001fa4 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	e000      	b.n	8001fa6 <HAL_SPI_TransmitReceive+0x324>
  }
  
error :
 8001fa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fd0:	b2db      	uxtb	r3, r3
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001fea:	e04d      	b.n	8002088 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff2:	d049      	beq.n	8002088 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001ffa:	f7fe f8ff 	bl	80001fc <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d83e      	bhi.n	8002088 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002018:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002022:	d111      	bne.n	8002048 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800202c:	d004      	beq.n	8002038 <SPI_WaitFlagStateUntilTimeout+0x5c>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002036:	d107      	bne.n	8002048 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002046:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002050:	d110      	bne.n	8002074 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6819      	ldr	r1, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8002060:	400b      	ands	r3, r1
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002072:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e00e      	b.n	80020a6 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4013      	ands	r3, r2
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	429a      	cmp	r2, r3
 8002096:	d101      	bne.n	800209c <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002098:	2201      	movs	r2, #1
 800209a:	e000      	b.n	800209e <SPI_WaitFlagStateUntilTimeout+0xc2>
 800209c:	2200      	movs	r2, #0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1a3      	bne.n	8001fec <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af02      	add	r7, sp, #8
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	2180      	movs	r1, #128	; 0x80
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff ff89 	bl	8001fdc <SPI_WaitFlagStateUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	f043 0220 	orr.w	r2, r3, #32
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e000      	b.n	80020e2 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e057      	b.n	80021ac <HAL_SPI_Init+0xc2>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f001 f9a4 	bl	800345c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800212a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	ea42 0103 	orr.w	r1, r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	f003 0104 	and.w	r1, r3, #4
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800218a:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219a:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e03f      	b.n	8002246 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f001 f988 	bl	80034f0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	; 0x24
 80021e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021f6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f829 	bl	8002250 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800220c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800221c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800222c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002292:	f023 030c 	bic.w	r3, r3, #12
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	68f9      	ldr	r1, [r7, #12]
 800229c:	430b      	orrs	r3, r1
 800229e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6f      	ldr	r2, [pc, #444]	; (8002478 <UART_SetConfig+0x228>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d16b      	bne.n	8002398 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022c0:	f7ff fab8 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	009a      	lsls	r2, r3, #2
 80022ce:	441a      	add	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	4a68      	ldr	r2, [pc, #416]	; (800247c <UART_SetConfig+0x22c>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	011c      	lsls	r4, r3, #4
 80022e4:	f7ff faa6 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	009a      	lsls	r2, r3, #2
 80022f2:	441a      	add	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	fbb2 f5f3 	udiv	r5, r2, r3
 80022fe:	f7ff fa99 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
 8002302:	4602      	mov	r2, r0
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	009a      	lsls	r2, r3, #2
 800230c:	441a      	add	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	4a58      	ldr	r2, [pc, #352]	; (800247c <UART_SetConfig+0x22c>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2264      	movs	r2, #100	; 0x64
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	1aeb      	subs	r3, r5, r3
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	3332      	adds	r3, #50	; 0x32
 800232c:	4a53      	ldr	r2, [pc, #332]	; (800247c <UART_SetConfig+0x22c>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002338:	441c      	add	r4, r3
 800233a:	f7ff fa7b 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
 800233e:	4602      	mov	r2, r0
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	009a      	lsls	r2, r3, #2
 8002348:	441a      	add	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fbb2 f5f3 	udiv	r5, r2, r3
 8002354:	f7ff fa6e 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
 8002358:	4602      	mov	r2, r0
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	009a      	lsls	r2, r3, #2
 8002362:	441a      	add	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a43      	ldr	r2, [pc, #268]	; (800247c <UART_SetConfig+0x22c>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	2264      	movs	r2, #100	; 0x64
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	1aeb      	subs	r3, r5, r3
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	3332      	adds	r3, #50	; 0x32
 8002382:	4a3e      	ldr	r2, [pc, #248]	; (800247c <UART_SetConfig+0x22c>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	f003 020f 	and.w	r2, r3, #15
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4422      	add	r2, r4
 8002394:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002396:	e06a      	b.n	800246e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002398:	f7ff fa38 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 800239c:	4602      	mov	r2, r0
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	009a      	lsls	r2, r3, #2
 80023a6:	441a      	add	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4a32      	ldr	r2, [pc, #200]	; (800247c <UART_SetConfig+0x22c>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	011c      	lsls	r4, r3, #4
 80023bc:	f7ff fa26 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	441a      	add	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80023d6:	f7ff fa19 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 80023da:	4602      	mov	r2, r0
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009a      	lsls	r2, r3, #2
 80023e4:	441a      	add	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <UART_SetConfig+0x22c>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2264      	movs	r2, #100	; 0x64
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	1aeb      	subs	r3, r5, r3
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	3332      	adds	r3, #50	; 0x32
 8002404:	4a1d      	ldr	r2, [pc, #116]	; (800247c <UART_SetConfig+0x22c>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002410:	441c      	add	r4, r3
 8002412:	f7ff f9fb 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 8002416:	4602      	mov	r2, r0
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	009a      	lsls	r2, r3, #2
 8002420:	441a      	add	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	fbb2 f5f3 	udiv	r5, r2, r3
 800242c:	f7ff f9ee 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 8002430:	4602      	mov	r2, r0
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	009a      	lsls	r2, r3, #2
 800243a:	441a      	add	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	4a0d      	ldr	r2, [pc, #52]	; (800247c <UART_SetConfig+0x22c>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	2264      	movs	r2, #100	; 0x64
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	1aeb      	subs	r3, r5, r3
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	3332      	adds	r3, #50	; 0x32
 800245a:	4a08      	ldr	r2, [pc, #32]	; (800247c <UART_SetConfig+0x22c>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	f003 020f 	and.w	r2, r3, #15
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4422      	add	r2, r4
 800246c:	609a      	str	r2, [r3, #8]
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bdb0      	pop	{r4, r5, r7, pc}
 8002476:	bf00      	nop
 8002478:	40013800 	.word	0x40013800
 800247c:	51eb851f 	.word	0x51eb851f

08002480 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <FATFS_LinkDriverEx+0x90>)
 8002498:	7a5b      	ldrb	r3, [r3, #9]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d831      	bhi.n	8002504 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <FATFS_LinkDriverEx+0x90>)
 80024a2:	7a5b      	ldrb	r3, [r3, #9]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <FATFS_LinkDriverEx+0x90>)
 80024aa:	2100      	movs	r1, #0
 80024ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <FATFS_LinkDriverEx+0x90>)
 80024b0:	7a5b      	ldrb	r3, [r3, #9]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	4a16      	ldr	r2, [pc, #88]	; (8002510 <FATFS_LinkDriverEx+0x90>)
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <FATFS_LinkDriverEx+0x90>)
 80024c0:	7a5b      	ldrb	r3, [r3, #9]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <FATFS_LinkDriverEx+0x90>)
 80024c8:	4413      	add	r3, r2
 80024ca:	79fa      	ldrb	r2, [r7, #7]
 80024cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <FATFS_LinkDriverEx+0x90>)
 80024d0:	7a5b      	ldrb	r3, [r3, #9]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	b2d1      	uxtb	r1, r2
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <FATFS_LinkDriverEx+0x90>)
 80024da:	7251      	strb	r1, [r2, #9]
 80024dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80024de:	7dbb      	ldrb	r3, [r7, #22]
 80024e0:	3330      	adds	r3, #48	; 0x30
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	3301      	adds	r3, #1
 80024ec:	223a      	movs	r2, #58	; 0x3a
 80024ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	3302      	adds	r3, #2
 80024f4:	222f      	movs	r2, #47	; 0x2f
 80024f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	3303      	adds	r3, #3
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8002504:	7dfb      	ldrb	r3, [r7, #23]
}
 8002506:	4618      	mov	r0, r3
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	20000040 	.word	0x20000040

08002514 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	6839      	ldr	r1, [r7, #0]
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ffac 	bl	8002480 <FATFS_LinkDriverEx>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002538:	4904      	ldr	r1, [pc, #16]	; (800254c <MX_FATFS_Init+0x18>)
 800253a:	4805      	ldr	r0, [pc, #20]	; (8002550 <MX_FATFS_Init+0x1c>)
 800253c:	f7ff ffea 	bl	8002514 <FATFS_LinkDriver>
 8002540:	4603      	mov	r3, r0
 8002542:	461a      	mov	r2, r3
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <MX_FATFS_Init+0x20>)
 8002546:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000054 	.word	0x20000054
 8002550:	20000010 	.word	0x20000010
 8002554:	20000058 	.word	0x20000058

08002558 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800255c:	2200      	movs	r2, #0
 800255e:	2110      	movs	r1, #16
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <SELECT+0x14>)
 8002562:	f7fe fc51 	bl	8000e08 <HAL_GPIO_WritePin>
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40010800 	.word	0x40010800

08002570 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002574:	2201      	movs	r2, #1
 8002576:	2110      	movs	r1, #16
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <DESELECT+0x14>)
 800257a:	f7fe fc45 	bl	8000e08 <HAL_GPIO_WritePin>
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40010800 	.word	0x40010800

08002588 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002592:	bf00      	nop
 8002594:	4808      	ldr	r0, [pc, #32]	; (80025b8 <SPI_TxByte+0x30>)
 8002596:	f7ff fd14 	bl	8001fc2 <HAL_SPI_GetState>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	d1f9      	bne.n	8002594 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80025a0:	1df9      	adds	r1, r7, #7
 80025a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a6:	2201      	movs	r2, #1
 80025a8:	4803      	ldr	r0, [pc, #12]	; (80025b8 <SPI_TxByte+0x30>)
 80025aa:	f7ff fa2d 	bl	8001a08 <HAL_SPI_Transmit>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20004254 	.word	0x20004254

080025bc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80025c2:	23ff      	movs	r3, #255	; 0xff
 80025c4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80025ca:	bf00      	nop
 80025cc:	4809      	ldr	r0, [pc, #36]	; (80025f4 <SPI_RxByte+0x38>)
 80025ce:	f7ff fcf8 	bl	8001fc2 <HAL_SPI_GetState>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d1f9      	bne.n	80025cc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80025d8:	1dba      	adds	r2, r7, #6
 80025da:	1df9      	adds	r1, r7, #7
 80025dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2301      	movs	r3, #1
 80025e4:	4803      	ldr	r0, [pc, #12]	; (80025f4 <SPI_RxByte+0x38>)
 80025e6:	f7ff fb4c 	bl	8001c82 <HAL_SPI_TransmitReceive>

  return data;
 80025ea:	79bb      	ldrb	r3, [r7, #6]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20004254 	.word	0x20004254

080025f8 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002600:	f7ff ffdc 	bl	80025bc <SPI_RxByte>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	701a      	strb	r2, [r3, #0]
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <SD_ReadyWait+0x34>)
 800261c:	2232      	movs	r2, #50	; 0x32
 800261e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8002620:	f7ff ffcc 	bl	80025bc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8002624:	f7ff ffca 	bl	80025bc <SPI_RxByte>
 8002628:	4603      	mov	r3, r0
 800262a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	2bff      	cmp	r3, #255	; 0xff
 8002630:	d004      	beq.n	800263c <SD_ReadyWait+0x28>
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <SD_ReadyWait+0x34>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f3      	bne.n	8002624 <SD_ReadyWait+0x10>

  return res;
 800263c:	79fb      	ldrb	r3, [r7, #7]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200042b0 	.word	0x200042b0

0800264c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8002652:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002656:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8002658:	f7ff ff8a 	bl	8002570 <DESELECT>

  for(int i = 0; i < 10; i++)
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e005      	b.n	800266e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002662:	20ff      	movs	r0, #255	; 0xff
 8002664:	f7ff ff90 	bl	8002588 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	3301      	adds	r3, #1
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b09      	cmp	r3, #9
 8002672:	ddf6      	ble.n	8002662 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8002674:	f7ff ff70 	bl	8002558 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8002678:	2340      	movs	r3, #64	; 0x40
 800267a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800268c:	2395      	movs	r3, #149	; 0x95
 800268e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e009      	b.n	80026aa <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8002696:	1d3a      	adds	r2, r7, #4
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff72 	bl	8002588 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3301      	adds	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	ddf2      	ble.n	8002696 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80026b0:	e002      	b.n	80026b8 <SD_PowerOn+0x6c>
  {
    Count--;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80026b8:	f7ff ff80 	bl	80025bc <SPI_RxByte>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d002      	beq.n	80026c8 <SD_PowerOn+0x7c>
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f4      	bne.n	80026b2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80026c8:	f7ff ff52 	bl	8002570 <DESELECT>
  SPI_TxByte(0XFF);
 80026cc:	20ff      	movs	r0, #255	; 0xff
 80026ce:	f7ff ff5b 	bl	8002588 <SPI_TxByte>

  PowerFlag = 1;
 80026d2:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <SD_PowerOn+0x94>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
}
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2000004d 	.word	0x2000004d

080026e4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <SD_PowerOff+0x14>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	2000004d 	.word	0x2000004d

080026fc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8002700:	4b02      	ldr	r3, [pc, #8]	; (800270c <SD_CheckPower+0x10>)
 8002702:	781b      	ldrb	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	2000004d 	.word	0x2000004d

08002710 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <SD_RxDataBlock+0x68>)
 800271c:	220a      	movs	r2, #10
 800271e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8002720:	f7ff ff4c 	bl	80025bc <SPI_RxByte>
 8002724:	4603      	mov	r3, r0
 8002726:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	2bff      	cmp	r3, #255	; 0xff
 800272c:	d104      	bne.n	8002738 <SD_RxDataBlock+0x28>
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <SD_RxDataBlock+0x68>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f3      	bne.n	8002720 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2bfe      	cmp	r3, #254	; 0xfe
 800273c:	d001      	beq.n	8002742 <SD_RxDataBlock+0x32>
    return FALSE;
 800273e:	2300      	movs	r3, #0
 8002740:	e016      	b.n	8002770 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff55 	bl	80025f8 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff4f 	bl	80025f8 <SPI_RxBytePtr>
  } while(btr -= 2);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	3b02      	subs	r3, #2
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ed      	bne.n	8002742 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8002766:	f7ff ff29 	bl	80025bc <SPI_RxByte>
  SPI_RxByte();
 800276a:	f7ff ff27 	bl	80025bc <SPI_RxByte>

  return TRUE;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200042b1 	.word	0x200042b1

0800277c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800278c:	f7ff ff42 	bl	8002614 <SD_ReadyWait>
 8002790:	4603      	mov	r3, r0
 8002792:	2bff      	cmp	r3, #255	; 0xff
 8002794:	d001      	beq.n	800279a <SD_TxDataBlock+0x1e>
    return FALSE;
 8002796:	2300      	movs	r3, #0
 8002798:	e040      	b.n	800281c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fef3 	bl	8002588 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	2bfd      	cmp	r3, #253	; 0xfd
 80027a6:	d031      	beq.n	800280c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fee7 	bl	8002588 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fee0 	bl	8002588 <SPI_TxByte>
    } while (--wc);
 80027c8:	7bbb      	ldrb	r3, [r7, #14]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	73bb      	strb	r3, [r7, #14]
 80027ce:	7bbb      	ldrb	r3, [r7, #14]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1eb      	bne.n	80027ac <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80027d4:	f7ff fef2 	bl	80025bc <SPI_RxByte>
    SPI_RxByte();
 80027d8:	f7ff fef0 	bl	80025bc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80027dc:	e00b      	b.n	80027f6 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80027de:	f7ff feed 	bl	80025bc <SPI_RxByte>
 80027e2:	4603      	mov	r3, r0
 80027e4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d006      	beq.n	80027fe <SD_TxDataBlock+0x82>
        break;

      i++;
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	3301      	adds	r3, #1
 80027f4:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80027f6:	7b7b      	ldrb	r3, [r7, #13]
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d9f0      	bls.n	80027de <SD_TxDataBlock+0x62>
 80027fc:	e000      	b.n	8002800 <SD_TxDataBlock+0x84>
        break;
 80027fe:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8002800:	bf00      	nop
 8002802:	f7ff fedb 	bl	80025bc <SPI_RxByte>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0fa      	beq.n	8002802 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2b05      	cmp	r3, #5
 8002814:	d101      	bne.n	800281a <SD_TxDataBlock+0x9e>
    return TRUE;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002830:	f7ff fef0 	bl	8002614 <SD_ReadyWait>
 8002834:	4603      	mov	r3, r0
 8002836:	2bff      	cmp	r3, #255	; 0xff
 8002838:	d001      	beq.n	800283e <SD_SendCmd+0x1a>
    return 0xFF;
 800283a:	23ff      	movs	r3, #255	; 0xff
 800283c:	e040      	b.n	80028c0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fea1 	bl	8002588 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	0e1b      	lsrs	r3, r3, #24
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fe9b 	bl	8002588 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fe95 	bl	8002588 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fe8f 	bl	8002588 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fe8a 	bl	8002588 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d101      	bne.n	8002882 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800287e:	2395      	movs	r3, #149	; 0x95
 8002880:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	2b48      	cmp	r3, #72	; 0x48
 8002886:	d101      	bne.n	800288c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002888:	2387      	movs	r3, #135	; 0x87
 800288a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fe7a 	bl	8002588 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b4c      	cmp	r3, #76	; 0x4c
 8002898:	d101      	bne.n	800289e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800289a:	f7ff fe8f 	bl	80025bc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800289e:	230a      	movs	r3, #10
 80028a0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80028a2:	f7ff fe8b 	bl	80025bc <SPI_RxByte>
 80028a6:	4603      	mov	r3, r0
 80028a8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80028aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	da05      	bge.n	80028be <SD_SendCmd+0x9a>
 80028b2:	7bbb      	ldrb	r3, [r7, #14]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	73bb      	strb	r3, [r7, #14]
 80028b8:	7bbb      	ldrb	r3, [r7, #14]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f1      	bne.n	80028a2 <SD_SendCmd+0x7e>

  return res;
 80028be:	7b7b      	ldrb	r3, [r7, #13]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0d5      	b.n	8002a88 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80028dc:	4b6c      	ldr	r3, [pc, #432]	; (8002a90 <SD_disk_initialize+0x1c8>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <SD_disk_initialize+0x2a>
    return Stat;
 80028ea:	4b69      	ldr	r3, [pc, #420]	; (8002a90 <SD_disk_initialize+0x1c8>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	e0ca      	b.n	8002a88 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80028f2:	f7ff feab 	bl	800264c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80028f6:	f7ff fe2f 	bl	8002558 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80028fe:	2100      	movs	r1, #0
 8002900:	2040      	movs	r0, #64	; 0x40
 8002902:	f7ff ff8f 	bl	8002824 <SD_SendCmd>
 8002906:	4603      	mov	r3, r0
 8002908:	2b01      	cmp	r3, #1
 800290a:	f040 80a5 	bne.w	8002a58 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800290e:	4b61      	ldr	r3, [pc, #388]	; (8002a94 <SD_disk_initialize+0x1cc>)
 8002910:	2264      	movs	r2, #100	; 0x64
 8002912:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002914:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002918:	2048      	movs	r0, #72	; 0x48
 800291a:	f7ff ff83 	bl	8002824 <SD_SendCmd>
 800291e:	4603      	mov	r3, r0
 8002920:	2b01      	cmp	r3, #1
 8002922:	d158      	bne.n	80029d6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e00c      	b.n	8002944 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800292a:	7bfc      	ldrb	r4, [r7, #15]
 800292c:	f7ff fe46 	bl	80025bc <SPI_RxByte>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4423      	add	r3, r4
 800293a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	3301      	adds	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d9ef      	bls.n	800292a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800294a:	7abb      	ldrb	r3, [r7, #10]
 800294c:	2b01      	cmp	r3, #1
 800294e:	f040 8083 	bne.w	8002a58 <SD_disk_initialize+0x190>
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	2baa      	cmp	r3, #170	; 0xaa
 8002956:	d17f      	bne.n	8002a58 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002958:	2100      	movs	r1, #0
 800295a:	2077      	movs	r0, #119	; 0x77
 800295c:	f7ff ff62 	bl	8002824 <SD_SendCmd>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d807      	bhi.n	8002976 <SD_disk_initialize+0xae>
 8002966:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800296a:	2069      	movs	r0, #105	; 0x69
 800296c:	f7ff ff5a 	bl	8002824 <SD_SendCmd>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002976:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <SD_disk_initialize+0x1cc>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1eb      	bne.n	8002958 <SD_disk_initialize+0x90>
 8002980:	e000      	b.n	8002984 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8002982:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002984:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <SD_disk_initialize+0x1cc>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d064      	beq.n	8002a58 <SD_disk_initialize+0x190>
 800298e:	2100      	movs	r1, #0
 8002990:	207a      	movs	r0, #122	; 0x7a
 8002992:	f7ff ff47 	bl	8002824 <SD_SendCmd>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d15d      	bne.n	8002a58 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e00c      	b.n	80029bc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80029a2:	7bfc      	ldrb	r4, [r7, #15]
 80029a4:	f7ff fe0a 	bl	80025bc <SPI_RxByte>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	f107 0310 	add.w	r3, r7, #16
 80029b0:	4423      	add	r3, r4
 80029b2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	3301      	adds	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d9ef      	bls.n	80029a2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80029c2:	7a3b      	ldrb	r3, [r7, #8]
 80029c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <SD_disk_initialize+0x108>
 80029cc:	2306      	movs	r3, #6
 80029ce:	e000      	b.n	80029d2 <SD_disk_initialize+0x10a>
 80029d0:	2302      	movs	r3, #2
 80029d2:	73bb      	strb	r3, [r7, #14]
 80029d4:	e040      	b.n	8002a58 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80029d6:	2100      	movs	r1, #0
 80029d8:	2077      	movs	r0, #119	; 0x77
 80029da:	f7ff ff23 	bl	8002824 <SD_SendCmd>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d808      	bhi.n	80029f6 <SD_disk_initialize+0x12e>
 80029e4:	2100      	movs	r1, #0
 80029e6:	2069      	movs	r0, #105	; 0x69
 80029e8:	f7ff ff1c 	bl	8002824 <SD_SendCmd>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d801      	bhi.n	80029f6 <SD_disk_initialize+0x12e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e000      	b.n	80029f8 <SD_disk_initialize+0x130>
 80029f6:	2301      	movs	r3, #1
 80029f8:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80029fa:	7bbb      	ldrb	r3, [r7, #14]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d10e      	bne.n	8002a1e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002a00:	2100      	movs	r1, #0
 8002a02:	2077      	movs	r0, #119	; 0x77
 8002a04:	f7ff ff0e 	bl	8002824 <SD_SendCmd>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d80e      	bhi.n	8002a2c <SD_disk_initialize+0x164>
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2069      	movs	r0, #105	; 0x69
 8002a12:	f7ff ff07 	bl	8002824 <SD_SendCmd>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d107      	bne.n	8002a2c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002a1c:	e00d      	b.n	8002a3a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2041      	movs	r0, #65	; 0x41
 8002a22:	f7ff feff 	bl	8002824 <SD_SendCmd>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <SD_disk_initialize+0x1cc>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1e1      	bne.n	80029fa <SD_disk_initialize+0x132>
 8002a36:	e000      	b.n	8002a3a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002a38:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8002a3a:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <SD_disk_initialize+0x1cc>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <SD_disk_initialize+0x18c>
 8002a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a48:	2050      	movs	r0, #80	; 0x50
 8002a4a:	f7ff feeb 	bl	8002824 <SD_SendCmd>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8002a58:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <SD_disk_initialize+0x1d0>)
 8002a5a:	7bbb      	ldrb	r3, [r7, #14]
 8002a5c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8002a5e:	f7ff fd87 	bl	8002570 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002a62:	f7ff fdab 	bl	80025bc <SPI_RxByte>

  if (type)
 8002a66:	7bbb      	ldrb	r3, [r7, #14]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <SD_disk_initialize+0x1c8>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <SD_disk_initialize+0x1c8>)
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e001      	b.n	8002a82 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002a7e:	f7ff fe31 	bl	80026e4 <SD_PowerOff>
  }

  return Stat;
 8002a82:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <SD_disk_initialize+0x1c8>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b2db      	uxtb	r3, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}
 8002a90:	20000005 	.word	0x20000005
 8002a94:	200042b1 	.word	0x200042b1
 8002a98:	2000004c 	.word	0x2000004c

08002a9c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e002      	b.n	8002ab6 <SD_disk_status+0x1a>

  return Stat;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <SD_disk_status+0x24>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	b2db      	uxtb	r3, r3
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	20000005 	.word	0x20000005

08002ac4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <SD_disk_read+0x1c>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <SD_disk_read+0x20>
    return RES_PARERR;
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	e051      	b.n	8002b88 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <SD_disk_read+0xcc>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e048      	b.n	8002b88 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8002af6:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <SD_disk_read+0xd0>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	025b      	lsls	r3, r3, #9
 8002b06:	607b      	str	r3, [r7, #4]

  SELECT();
 8002b08:	f7ff fd26 	bl	8002558 <SELECT>

  if (count == 1)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d111      	bne.n	8002b36 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	2051      	movs	r0, #81	; 0x51
 8002b16:	f7ff fe85 	bl	8002824 <SD_SendCmd>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d129      	bne.n	8002b74 <SD_disk_read+0xb0>
 8002b20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b24:	68b8      	ldr	r0, [r7, #8]
 8002b26:	f7ff fdf3 	bl	8002710 <SD_RxDataBlock>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d021      	beq.n	8002b74 <SD_disk_read+0xb0>
      count = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	e01e      	b.n	8002b74 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	2052      	movs	r0, #82	; 0x52
 8002b3a:	f7ff fe73 	bl	8002824 <SD_SendCmd>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d117      	bne.n	8002b74 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b48:	68b8      	ldr	r0, [r7, #8]
 8002b4a:	f7ff fde1 	bl	8002710 <SD_RxDataBlock>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b5a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ed      	bne.n	8002b44 <SD_disk_read+0x80>
 8002b68:	e000      	b.n	8002b6c <SD_disk_read+0xa8>
          break;
 8002b6a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	204c      	movs	r0, #76	; 0x4c
 8002b70:	f7ff fe58 	bl	8002824 <SD_SendCmd>
    }
  }

  DESELECT();
 8002b74:	f7ff fcfc 	bl	8002570 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002b78:	f7ff fd20 	bl	80025bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bf14      	ite	ne
 8002b82:	2301      	movne	r3, #1
 8002b84:	2300      	moveq	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000005 	.word	0x20000005
 8002b94:	2000004c 	.word	0x2000004c

08002b98 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <SD_disk_write+0x1c>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <SD_disk_write+0x20>
    return RES_PARERR;
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	e06b      	b.n	8002c90 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8002bb8:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <SD_disk_write+0x100>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e062      	b.n	8002c90 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8002bca:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <SD_disk_write+0x100>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <SD_disk_write+0x44>
    return RES_WRPRT;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e059      	b.n	8002c90 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8002bdc:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <SD_disk_write+0x104>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	025b      	lsls	r3, r3, #9
 8002bec:	607b      	str	r3, [r7, #4]

  SELECT();
 8002bee:	f7ff fcb3 	bl	8002558 <SELECT>

  if (count == 1)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d110      	bne.n	8002c1a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	2058      	movs	r0, #88	; 0x58
 8002bfc:	f7ff fe12 	bl	8002824 <SD_SendCmd>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d13a      	bne.n	8002c7c <SD_disk_write+0xe4>
 8002c06:	21fe      	movs	r1, #254	; 0xfe
 8002c08:	68b8      	ldr	r0, [r7, #8]
 8002c0a:	f7ff fdb7 	bl	800277c <SD_TxDataBlock>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d033      	beq.n	8002c7c <SD_disk_write+0xe4>
      count = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	e030      	b.n	8002c7c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <SD_disk_write+0x104>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002c26:	2100      	movs	r1, #0
 8002c28:	2077      	movs	r0, #119	; 0x77
 8002c2a:	f7ff fdfb 	bl	8002824 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002c2e:	6839      	ldr	r1, [r7, #0]
 8002c30:	2057      	movs	r0, #87	; 0x57
 8002c32:	f7ff fdf7 	bl	8002824 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	2059      	movs	r0, #89	; 0x59
 8002c3a:	f7ff fdf3 	bl	8002824 <SD_SendCmd>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d11b      	bne.n	8002c7c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002c44:	21fc      	movs	r1, #252	; 0xfc
 8002c46:	68b8      	ldr	r0, [r7, #8]
 8002c48:	f7ff fd98 	bl	800277c <SD_TxDataBlock>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c58:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ee      	bne.n	8002c44 <SD_disk_write+0xac>
 8002c66:	e000      	b.n	8002c6a <SD_disk_write+0xd2>
          break;
 8002c68:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8002c6a:	21fd      	movs	r1, #253	; 0xfd
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7ff fd85 	bl	800277c <SD_TxDataBlock>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <SD_disk_write+0xe4>
      {
        count = 1;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8002c7c:	f7ff fc78 	bl	8002570 <DESELECT>
  SPI_RxByte();
 8002c80:	f7ff fc9c 	bl	80025bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf14      	ite	ne
 8002c8a:	2301      	movne	r3, #1
 8002c8c:	2300      	moveq	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000005 	.word	0x20000005
 8002c9c:	2000004c 	.word	0x2000004c

08002ca0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b08b      	sub	sp, #44	; 0x2c
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	603a      	str	r2, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	460b      	mov	r3, r1
 8002cae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002cba:	2304      	movs	r3, #4
 8002cbc:	e11b      	b.n	8002ef6 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8002cc4:	79bb      	ldrb	r3, [r7, #6]
 8002cc6:	2b05      	cmp	r3, #5
 8002cc8:	d129      	bne.n	8002d1e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d017      	beq.n	8002d02 <SD_disk_ioctl+0x62>
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	dc1f      	bgt.n	8002d16 <SD_disk_ioctl+0x76>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <SD_disk_ioctl+0x40>
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d00b      	beq.n	8002cf6 <SD_disk_ioctl+0x56>
 8002cde:	e01a      	b.n	8002d16 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002ce0:	f7ff fd0c 	bl	80026fc <SD_CheckPower>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002cea:	f7ff fcfb 	bl	80026e4 <SD_PowerOff>
      res = RES_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002cf4:	e0fd      	b.n	8002ef2 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002cf6:	f7ff fca9 	bl	800264c <SD_PowerOn>
      res = RES_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002d00:	e0f7      	b.n	8002ef2 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	1c5c      	adds	r4, r3, #1
 8002d06:	f7ff fcf9 	bl	80026fc <SD_CheckPower>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002d14:	e0ed      	b.n	8002ef2 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002d16:	2304      	movs	r3, #4
 8002d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d1c:	e0e9      	b.n	8002ef2 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8002d1e:	4b78      	ldr	r3, [pc, #480]	; (8002f00 <SD_disk_ioctl+0x260>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0e2      	b.n	8002ef6 <SD_disk_ioctl+0x256>

    SELECT();
 8002d30:	f7ff fc12 	bl	8002558 <SELECT>

    switch (ctrl)
 8002d34:	79bb      	ldrb	r3, [r7, #6]
 8002d36:	2b0d      	cmp	r3, #13
 8002d38:	f200 80cc 	bhi.w	8002ed4 <SD_disk_ioctl+0x234>
 8002d3c:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <SD_disk_ioctl+0xa4>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002e3f 	.word	0x08002e3f
 8002d48:	08002d7d 	.word	0x08002d7d
 8002d4c:	08002e2f 	.word	0x08002e2f
 8002d50:	08002ed5 	.word	0x08002ed5
 8002d54:	08002ed5 	.word	0x08002ed5
 8002d58:	08002ed5 	.word	0x08002ed5
 8002d5c:	08002ed5 	.word	0x08002ed5
 8002d60:	08002ed5 	.word	0x08002ed5
 8002d64:	08002ed5 	.word	0x08002ed5
 8002d68:	08002ed5 	.word	0x08002ed5
 8002d6c:	08002ed5 	.word	0x08002ed5
 8002d70:	08002e51 	.word	0x08002e51
 8002d74:	08002e75 	.word	0x08002e75
 8002d78:	08002e99 	.word	0x08002e99
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2049      	movs	r0, #73	; 0x49
 8002d80:	f7ff fd50 	bl	8002824 <SD_SendCmd>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 80a8 	bne.w	8002edc <SD_disk_ioctl+0x23c>
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	2110      	movs	r1, #16
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fcbc 	bl	8002710 <SD_RxDataBlock>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 809e 	beq.w	8002edc <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8002da0:	7b3b      	ldrb	r3, [r7, #12]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d10e      	bne.n	8002dc8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002daa:	7d7b      	ldrb	r3, [r7, #21]
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	7d3b      	ldrb	r3, [r7, #20]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002dbe:	8bfb      	ldrh	r3, [r7, #30]
 8002dc0:	029a      	lsls	r2, r3, #10
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e02e      	b.n	8002e26 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002dc8:	7c7b      	ldrb	r3, [r7, #17]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	7dbb      	ldrb	r3, [r7, #22]
 8002dd2:	09db      	lsrs	r3, r3, #7
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	7d7b      	ldrb	r3, [r7, #21]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 0306 	and.w	r3, r3, #6
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	3302      	adds	r3, #2
 8002dec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002df0:	7d3b      	ldrb	r3, [r7, #20]
 8002df2:	099b      	lsrs	r3, r3, #6
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	7cbb      	ldrb	r3, [r7, #18]
 8002e06:	029b      	lsls	r3, r3, #10
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002e18:	8bfa      	ldrh	r2, [r7, #30]
 8002e1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e1e:	3b09      	subs	r3, #9
 8002e20:	409a      	lsls	r2, r3
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8002e2c:	e056      	b.n	8002edc <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e34:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002e3c:	e055      	b.n	8002eea <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002e3e:	f7ff fbe9 	bl	8002614 <SD_ReadyWait>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2bff      	cmp	r3, #255	; 0xff
 8002e46:	d14b      	bne.n	8002ee0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002e4e:	e047      	b.n	8002ee0 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002e50:	2100      	movs	r1, #0
 8002e52:	2049      	movs	r0, #73	; 0x49
 8002e54:	f7ff fce6 	bl	8002824 <SD_SendCmd>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d142      	bne.n	8002ee4 <SD_disk_ioctl+0x244>
 8002e5e:	2110      	movs	r1, #16
 8002e60:	6a38      	ldr	r0, [r7, #32]
 8002e62:	f7ff fc55 	bl	8002710 <SD_RxDataBlock>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d03b      	beq.n	8002ee4 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002e72:	e037      	b.n	8002ee4 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002e74:	2100      	movs	r1, #0
 8002e76:	204a      	movs	r0, #74	; 0x4a
 8002e78:	f7ff fcd4 	bl	8002824 <SD_SendCmd>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d132      	bne.n	8002ee8 <SD_disk_ioctl+0x248>
 8002e82:	2110      	movs	r1, #16
 8002e84:	6a38      	ldr	r0, [r7, #32]
 8002e86:	f7ff fc43 	bl	8002710 <SD_RxDataBlock>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02b      	beq.n	8002ee8 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002e96:	e027      	b.n	8002ee8 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002e98:	2100      	movs	r1, #0
 8002e9a:	207a      	movs	r0, #122	; 0x7a
 8002e9c:	f7ff fcc2 	bl	8002824 <SD_SendCmd>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d116      	bne.n	8002ed4 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002eac:	e00b      	b.n	8002ec6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8002eae:	6a3c      	ldr	r4, [r7, #32]
 8002eb0:	1c63      	adds	r3, r4, #1
 8002eb2:	623b      	str	r3, [r7, #32]
 8002eb4:	f7ff fb82 	bl	80025bc <SPI_RxByte>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002ebc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002ec6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d9ef      	bls.n	8002eae <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002eda:	e006      	b.n	8002eea <SD_disk_ioctl+0x24a>
      break;
 8002edc:	bf00      	nop
 8002ede:	e004      	b.n	8002eea <SD_disk_ioctl+0x24a>
      break;
 8002ee0:	bf00      	nop
 8002ee2:	e002      	b.n	8002eea <SD_disk_ioctl+0x24a>
      break;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <SD_disk_ioctl+0x24a>
      break;
 8002ee8:	bf00      	nop
    }

    DESELECT();
 8002eea:	f7ff fb41 	bl	8002570 <DESELECT>
    SPI_RxByte();
 8002eee:	f7ff fb65 	bl	80025bc <SPI_RxByte>
  }

  return res;
 8002ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	372c      	adds	r7, #44	; 0x2c
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000005 	.word	0x20000005

08002f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f08:	f7fd f920 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f0c:	f000 f80f 	bl	8002f2e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f10:	f000 f962 	bl	80031d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f14:	f000 f942 	bl	800319c <MX_DMA_Init>
  MX_I2C1_Init();
 8002f18:	f000 f8b2 	bl	8003080 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002f1c:	f000 f862 	bl	8002fe4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002f20:	f000 f8dc 	bl	80030dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002f24:	f000 f910 	bl	8003148 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8002f28:	f7ff fb04 	bl	8002534 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <main+0x28>

08002f2e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b094      	sub	sp, #80	; 0x50
 8002f32:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f38:	2228      	movs	r2, #40	; 0x28
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fc69 	bl	8003814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]
 8002f50:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f70:	2302      	movs	r3, #2
 8002f72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe f867 	bl	8001058 <HAL_RCC_OscConfig>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002f90:	f000 f986 	bl	80032a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f94:	230f      	movs	r3, #15
 8002f96:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	2102      	movs	r1, #2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fe fab5 	bl	8001520 <HAL_RCC_ClockConfig>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002fbc:	f000 f970 	bl	80032a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fca:	1d3b      	adds	r3, r7, #4
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe fc65 	bl	800189c <HAL_RCCEx_PeriphCLKConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002fd8:	f000 f962 	bl	80032a0 <Error_Handler>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3750      	adds	r7, #80	; 0x50
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ff4:	4b20      	ldr	r3, [pc, #128]	; (8003078 <MX_ADC1_Init+0x94>)
 8002ff6:	4a21      	ldr	r2, [pc, #132]	; (800307c <MX_ADC1_Init+0x98>)
 8002ff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ffa:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <MX_ADC1_Init+0x94>)
 8002ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003000:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003002:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <MX_ADC1_Init+0x94>)
 8003004:	2201      	movs	r2, #1
 8003006:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <MX_ADC1_Init+0x94>)
 800300a:	2200      	movs	r2, #0
 800300c:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800300e:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <MX_ADC1_Init+0x94>)
 8003010:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003014:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <MX_ADC1_Init+0x94>)
 8003018:	2200      	movs	r2, #0
 800301a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800301c:	4b16      	ldr	r3, [pc, #88]	; (8003078 <MX_ADC1_Init+0x94>)
 800301e:	2202      	movs	r2, #2
 8003020:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003022:	4815      	ldr	r0, [pc, #84]	; (8003078 <MX_ADC1_Init+0x94>)
 8003024:	f7fd f8f4 	bl	8000210 <HAL_ADC_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800302e:	f000 f937 	bl	80032a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003032:	2301      	movs	r3, #1
 8003034:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003036:	2301      	movs	r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800303a:	2307      	movs	r3, #7
 800303c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800303e:	1d3b      	adds	r3, r7, #4
 8003040:	4619      	mov	r1, r3
 8003042:	480d      	ldr	r0, [pc, #52]	; (8003078 <MX_ADC1_Init+0x94>)
 8003044:	f7fd f9bc 	bl	80003c0 <HAL_ADC_ConfigChannel>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800304e:	f000 f927 	bl	80032a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003052:	2302      	movs	r3, #2
 8003054:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003056:	2302      	movs	r3, #2
 8003058:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	4619      	mov	r1, r3
 800305e:	4806      	ldr	r0, [pc, #24]	; (8003078 <MX_ADC1_Init+0x94>)
 8003060:	f7fd f9ae 	bl	80003c0 <HAL_ADC_ConfigChannel>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800306a:	f000 f919 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20004194 	.word	0x20004194
 800307c:	40012400 	.word	0x40012400

08003080 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <MX_I2C1_Init+0x50>)
 8003086:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <MX_I2C1_Init+0x54>)
 8003088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <MX_I2C1_Init+0x50>)
 800308c:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <MX_I2C1_Init+0x58>)
 800308e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <MX_I2C1_Init+0x50>)
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <MX_I2C1_Init+0x50>)
 8003098:	2200      	movs	r2, #0
 800309a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <MX_I2C1_Init+0x50>)
 800309e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <MX_I2C1_Init+0x50>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <MX_I2C1_Init+0x50>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <MX_I2C1_Init+0x50>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <MX_I2C1_Init+0x50>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030bc:	4804      	ldr	r0, [pc, #16]	; (80030d0 <MX_I2C1_Init+0x50>)
 80030be:	f7fd febb 	bl	8000e38 <HAL_I2C_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80030c8:	f000 f8ea 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030cc:	bf00      	nop
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	2000310c 	.word	0x2000310c
 80030d4:	40005400 	.word	0x40005400
 80030d8:	00061a80 	.word	0x00061a80

080030dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <MX_SPI1_Init+0x64>)
 80030e2:	4a18      	ldr	r2, [pc, #96]	; (8003144 <MX_SPI1_Init+0x68>)
 80030e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <MX_SPI1_Init+0x64>)
 80030e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <MX_SPI1_Init+0x64>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <MX_SPI1_Init+0x64>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <MX_SPI1_Init+0x64>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <MX_SPI1_Init+0x64>)
 8003102:	2200      	movs	r2, #0
 8003104:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003106:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <MX_SPI1_Init+0x64>)
 8003108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800310c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <MX_SPI1_Init+0x64>)
 8003110:	2220      	movs	r2, #32
 8003112:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <MX_SPI1_Init+0x64>)
 8003116:	2200      	movs	r2, #0
 8003118:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <MX_SPI1_Init+0x64>)
 800311c:	2200      	movs	r2, #0
 800311e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003120:	4b07      	ldr	r3, [pc, #28]	; (8003140 <MX_SPI1_Init+0x64>)
 8003122:	2200      	movs	r2, #0
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <MX_SPI1_Init+0x64>)
 8003128:	220a      	movs	r2, #10
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800312c:	4804      	ldr	r0, [pc, #16]	; (8003140 <MX_SPI1_Init+0x64>)
 800312e:	f7fe ffdc 	bl	80020ea <HAL_SPI_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003138:	f000 f8b2 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20004254 	.word	0x20004254
 8003144:	40013000 	.word	0x40013000

08003148 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <MX_USART1_UART_Init+0x4c>)
 800314e:	4a12      	ldr	r2, [pc, #72]	; (8003198 <MX_USART1_UART_Init+0x50>)
 8003150:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <MX_USART1_UART_Init+0x4c>)
 8003154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003158:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <MX_USART1_UART_Init+0x4c>)
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <MX_USART1_UART_Init+0x4c>)
 8003162:	2200      	movs	r2, #0
 8003164:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <MX_USART1_UART_Init+0x4c>)
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <MX_USART1_UART_Init+0x4c>)
 800316e:	220c      	movs	r2, #12
 8003170:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <MX_USART1_UART_Init+0x4c>)
 8003174:	2200      	movs	r2, #0
 8003176:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <MX_USART1_UART_Init+0x4c>)
 800317a:	2200      	movs	r2, #0
 800317c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800317e:	4805      	ldr	r0, [pc, #20]	; (8003194 <MX_USART1_UART_Init+0x4c>)
 8003180:	f7ff f818 	bl	80021b4 <HAL_UART_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800318a:	f000 f889 	bl	80032a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200041c8 	.word	0x200041c8
 8003198:	40013800 	.word	0x40013800

0800319c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <MX_DMA_Init+0x38>)
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <MX_DMA_Init+0x38>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6153      	str	r3, [r2, #20]
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <MX_DMA_Init+0x38>)
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	200b      	movs	r0, #11
 80031c0:	f7fd fb03 	bl	80007ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031c4:	200b      	movs	r0, #11
 80031c6:	f7fd fb1c 	bl	8000802 <HAL_NVIC_EnableIRQ>

}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000

080031d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031de:	f107 0310 	add.w	r3, r7, #16
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ec:	4b29      	ldr	r3, [pc, #164]	; (8003294 <MX_GPIO_Init+0xbc>)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	4a28      	ldr	r2, [pc, #160]	; (8003294 <MX_GPIO_Init+0xbc>)
 80031f2:	f043 0320 	orr.w	r3, r3, #32
 80031f6:	6193      	str	r3, [r2, #24]
 80031f8:	4b26      	ldr	r3, [pc, #152]	; (8003294 <MX_GPIO_Init+0xbc>)
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003204:	4b23      	ldr	r3, [pc, #140]	; (8003294 <MX_GPIO_Init+0xbc>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	4a22      	ldr	r2, [pc, #136]	; (8003294 <MX_GPIO_Init+0xbc>)
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	6193      	str	r3, [r2, #24]
 8003210:	4b20      	ldr	r3, [pc, #128]	; (8003294 <MX_GPIO_Init+0xbc>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <MX_GPIO_Init+0xbc>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <MX_GPIO_Init+0xbc>)
 8003222:	f043 0308 	orr.w	r3, r3, #8
 8003226:	6193      	str	r3, [r2, #24]
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <MX_GPIO_Init+0xbc>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003234:	2200      	movs	r2, #0
 8003236:	2110      	movs	r1, #16
 8003238:	4817      	ldr	r0, [pc, #92]	; (8003298 <MX_GPIO_Init+0xc0>)
 800323a:	f7fd fde5 	bl	8000e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Joystick_Button_Pin */
  GPIO_InitStruct.Pin = Joystick_Button_Pin;
 800323e:	2301      	movs	r3, #1
 8003240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 800324a:	f107 0310 	add.w	r3, r7, #16
 800324e:	4619      	mov	r1, r3
 8003250:	4811      	ldr	r0, [pc, #68]	; (8003298 <MX_GPIO_Init+0xc0>)
 8003252:	f7fd fc51 	bl	8000af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8003256:	2310      	movs	r3, #16
 8003258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325a:	2301      	movs	r3, #1
 800325c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2302      	movs	r3, #2
 8003264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003266:	f107 0310 	add.w	r3, r7, #16
 800326a:	4619      	mov	r1, r3
 800326c:	480a      	ldr	r0, [pc, #40]	; (8003298 <MX_GPIO_Init+0xc0>)
 800326e:	f7fd fc43 	bl	8000af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS12_Pin MS3_Pin MS6_Pin MS9_Pin */
  GPIO_InitStruct.Pin = MS12_Pin|MS3_Pin|MS6_Pin|MS9_Pin;
 8003272:	f640 4303 	movw	r3, #3075	; 0xc03
 8003276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003280:	f107 0310 	add.w	r3, r7, #16
 8003284:	4619      	mov	r1, r3
 8003286:	4805      	ldr	r0, [pc, #20]	; (800329c <MX_GPIO_Init+0xc4>)
 8003288:	f7fd fc36 	bl	8000af8 <HAL_GPIO_Init>

}
 800328c:	bf00      	nop
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	40010800 	.word	0x40010800
 800329c:	40010c00 	.word	0x40010c00

080032a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_MspInit+0x5c>)
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	4a14      	ldr	r2, [pc, #80]	; (8003308 <HAL_MspInit+0x5c>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6193      	str	r3, [r2, #24]
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_MspInit+0x5c>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_MspInit+0x5c>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	4a0e      	ldr	r2, [pc, #56]	; (8003308 <HAL_MspInit+0x5c>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d4:	61d3      	str	r3, [r2, #28]
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <HAL_MspInit+0x5c>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_MspInit+0x60>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <HAL_MspInit+0x60>)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	40021000 	.word	0x40021000
 800330c:	40010000 	.word	0x40010000

08003310 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 0310 	add.w	r3, r7, #16
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a28      	ldr	r2, [pc, #160]	; (80033cc <HAL_ADC_MspInit+0xbc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d149      	bne.n	80033c4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003330:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <HAL_ADC_MspInit+0xc0>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <HAL_ADC_MspInit+0xc0>)
 8003336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800333a:	6193      	str	r3, [r2, #24]
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_ADC_MspInit+0xc0>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_ADC_MspInit+0xc0>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <HAL_ADC_MspInit+0xc0>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6193      	str	r3, [r2, #24]
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_ADC_MspInit+0xc0>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Joystick_xValue_Pin|Joystick_yValue_Pin;
 8003360:	2306      	movs	r3, #6
 8003362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003364:	2303      	movs	r3, #3
 8003366:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003368:	f107 0310 	add.w	r3, r7, #16
 800336c:	4619      	mov	r1, r3
 800336e:	4819      	ldr	r0, [pc, #100]	; (80033d4 <HAL_ADC_MspInit+0xc4>)
 8003370:	f7fd fbc2 	bl	8000af8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_ADC_MspInit+0xc8>)
 8003376:	4a19      	ldr	r2, [pc, #100]	; (80033dc <HAL_ADC_MspInit+0xcc>)
 8003378:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800337a:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <HAL_ADC_MspInit+0xc8>)
 800337c:	2200      	movs	r2, #0
 800337e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003380:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <HAL_ADC_MspInit+0xc8>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_ADC_MspInit+0xc8>)
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_ADC_MspInit+0xc8>)
 800338e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003392:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_ADC_MspInit+0xc8>)
 8003396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800339a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_ADC_MspInit+0xc8>)
 800339e:	2220      	movs	r2, #32
 80033a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_ADC_MspInit+0xc8>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033a8:	480b      	ldr	r0, [pc, #44]	; (80033d8 <HAL_ADC_MspInit+0xc8>)
 80033aa:	f7fd fa45 	bl	8000838 <HAL_DMA_Init>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80033b4:	f7ff ff74 	bl	80032a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <HAL_ADC_MspInit+0xc8>)
 80033bc:	621a      	str	r2, [r3, #32]
 80033be:	4a06      	ldr	r2, [pc, #24]	; (80033d8 <HAL_ADC_MspInit+0xc8>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033c4:	bf00      	nop
 80033c6:	3720      	adds	r7, #32
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40012400 	.word	0x40012400
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40010800 	.word	0x40010800
 80033d8:	20004208 	.word	0x20004208
 80033dc:	40020008 	.word	0x40020008

080033e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 0310 	add.w	r3, r7, #16
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a15      	ldr	r2, [pc, #84]	; (8003450 <HAL_I2C_MspInit+0x70>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d123      	bne.n	8003448 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_I2C_MspInit+0x74>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	4a13      	ldr	r2, [pc, #76]	; (8003454 <HAL_I2C_MspInit+0x74>)
 8003406:	f043 0308 	orr.w	r3, r3, #8
 800340a:	6193      	str	r3, [r2, #24]
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_I2C_MspInit+0x74>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8003418:	23c0      	movs	r3, #192	; 0xc0
 800341a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800341c:	2312      	movs	r3, #18
 800341e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003420:	2303      	movs	r3, #3
 8003422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	f107 0310 	add.w	r3, r7, #16
 8003428:	4619      	mov	r1, r3
 800342a:	480b      	ldr	r0, [pc, #44]	; (8003458 <HAL_I2C_MspInit+0x78>)
 800342c:	f7fd fb64 	bl	8000af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_I2C_MspInit+0x74>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	4a07      	ldr	r2, [pc, #28]	; (8003454 <HAL_I2C_MspInit+0x74>)
 8003436:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800343a:	61d3      	str	r3, [r2, #28]
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_I2C_MspInit+0x74>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003448:	bf00      	nop
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40005400 	.word	0x40005400
 8003454:	40021000 	.word	0x40021000
 8003458:	40010c00 	.word	0x40010c00

0800345c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	f107 0310 	add.w	r3, r7, #16
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <HAL_SPI_MspInit+0x88>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d12f      	bne.n	80034dc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_SPI_MspInit+0x8c>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <HAL_SPI_MspInit+0x8c>)
 8003482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003486:	6193      	str	r3, [r2, #24]
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <HAL_SPI_MspInit+0x8c>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_SPI_MspInit+0x8c>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <HAL_SPI_MspInit+0x8c>)
 800349a:	f043 0304 	orr.w	r3, r3, #4
 800349e:	6193      	str	r3, [r2, #24]
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_SPI_MspInit+0x8c>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_CLK_Pin|SD_MOSI_Pin;
 80034ac:	23a0      	movs	r3, #160	; 0xa0
 80034ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b4:	2303      	movs	r3, #3
 80034b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b8:	f107 0310 	add.w	r3, r7, #16
 80034bc:	4619      	mov	r1, r3
 80034be:	480b      	ldr	r0, [pc, #44]	; (80034ec <HAL_SPI_MspInit+0x90>)
 80034c0:	f7fd fb1a 	bl	8000af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin;
 80034c4:	2340      	movs	r3, #64	; 0x40
 80034c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 80034d0:	f107 0310 	add.w	r3, r7, #16
 80034d4:	4619      	mov	r1, r3
 80034d6:	4805      	ldr	r0, [pc, #20]	; (80034ec <HAL_SPI_MspInit+0x90>)
 80034d8:	f7fd fb0e 	bl	8000af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034dc:	bf00      	nop
 80034de:	3720      	adds	r7, #32
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40013000 	.word	0x40013000
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40010800 	.word	0x40010800

080034f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	f107 0310 	add.w	r3, r7, #16
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_UART_MspInit+0x8c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d131      	bne.n	8003574 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_UART_MspInit+0x90>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <HAL_UART_MspInit+0x90>)
 8003516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351a:	6193      	str	r3, [r2, #24]
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <HAL_UART_MspInit+0x90>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_UART_MspInit+0x90>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	4a14      	ldr	r2, [pc, #80]	; (8003580 <HAL_UART_MspInit+0x90>)
 800352e:	f043 0304 	orr.w	r3, r3, #4
 8003532:	6193      	str	r3, [r2, #24]
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_UART_MspInit+0x90>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003544:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003546:	2302      	movs	r3, #2
 8003548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354e:	f107 0310 	add.w	r3, r7, #16
 8003552:	4619      	mov	r1, r3
 8003554:	480b      	ldr	r0, [pc, #44]	; (8003584 <HAL_UART_MspInit+0x94>)
 8003556:	f7fd facf 	bl	8000af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800355a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800355e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003568:	f107 0310 	add.w	r3, r7, #16
 800356c:	4619      	mov	r1, r3
 800356e:	4805      	ldr	r0, [pc, #20]	; (8003584 <HAL_UART_MspInit+0x94>)
 8003570:	f7fd fac2 	bl	8000af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003574:	bf00      	nop
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40013800 	.word	0x40013800
 8003580:	40021000 	.word	0x40021000
 8003584:	40010800 	.word	0x40010800

08003588 <SDTimer_Handler>:
/* USER CODE BEGIN EV */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800358c:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <SDTimer_Handler+0x3c>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <SDTimer_Handler+0x1c>
    Timer1--;
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <SDTimer_Handler+0x3c>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <SDTimer_Handler+0x3c>)
 80035a2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <SDTimer_Handler+0x40>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d006      	beq.n	80035bc <SDTimer_Handler+0x34>
    Timer2--;
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <SDTimer_Handler+0x40>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <SDTimer_Handler+0x40>)
 80035ba:	701a      	strb	r2, [r3, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr
 80035c4:	200042b1 	.word	0x200042b1
 80035c8:	200042b0 	.word	0x200042b0

080035cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035dc:	e7fe      	b.n	80035dc <HardFault_Handler+0x4>

080035de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035de:	b480      	push	{r7}
 80035e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035e2:	e7fe      	b.n	80035e2 <MemManage_Handler+0x4>

080035e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035e8:	e7fe      	b.n	80035e8 <BusFault_Handler+0x4>

080035ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035ee:	e7fe      	b.n	80035ee <UsageFault_Handler+0x4>

080035f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
  {
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
  	FatFsCnt++;
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <SysTick_Handler+0x30>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	3301      	adds	r3, #1
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <SysTick_Handler+0x30>)
 8003624:	701a      	strb	r2, [r3, #0]
    if(FatFsCnt >= 10)
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <SysTick_Handler+0x30>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b09      	cmp	r3, #9
 800362e:	d904      	bls.n	800363a <SysTick_Handler+0x26>
    {
      FatFsCnt = 0;
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <SysTick_Handler+0x30>)
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
      SDTimer_Handler();
 8003636:	f7ff ffa7 	bl	8003588 <SDTimer_Handler>
    }
    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 800363a:	f7fc fdcd 	bl	80001d8 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
  }
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	2000004e 	.word	0x2000004e

08003648 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800364c:	4802      	ldr	r0, [pc, #8]	; (8003658 <DMA1_Channel1_IRQHandler+0x10>)
 800364e:	f7fd f94d 	bl	80008ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20004208 	.word	0x20004208

0800365c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003660:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <SystemInit+0x5c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <SystemInit+0x5c>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800366c:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <SystemInit+0x5c>)
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	4911      	ldr	r1, [pc, #68]	; (80036b8 <SystemInit+0x5c>)
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <SystemInit+0x60>)
 8003674:	4013      	ands	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <SystemInit+0x5c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <SystemInit+0x5c>)
 800367e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003686:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <SystemInit+0x5c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <SystemInit+0x5c>)
 800368e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003692:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <SystemInit+0x5c>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a07      	ldr	r2, [pc, #28]	; (80036b8 <SystemInit+0x5c>)
 800369a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800369e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <SystemInit+0x5c>)
 80036a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80036a6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <SystemInit+0x64>)
 80036aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036ae:	609a      	str	r2, [r3, #8]
#endif 
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	40021000 	.word	0x40021000
 80036bc:	f8ff0000 	.word	0xf8ff0000
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff f8f9 	bl	80028c8 <SD_disk_initialize>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <USER_initialize+0x28>)
 80036dc:	701a      	strb	r2, [r3, #0]
    return Stat;
 80036de:	4b03      	ldr	r3, [pc, #12]	; (80036ec <USER_initialize+0x28>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	2000000c 	.word	0x2000000c

080036f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff f9cd 	bl	8002a9c <SD_disk_status>
 8003702:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4603      	mov	r3, r0
 800371a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800371c:	7bf8      	ldrb	r0, [r7, #15]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	f7ff f9ce 	bl	8002ac4 <SD_disk_read>
 8003728:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	4603      	mov	r3, r0
 8003740:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8003742:	7bf8      	ldrb	r0, [r7, #15]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	f7ff fa25 	bl	8002b98 <SD_disk_write>
 800374e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	603a      	str	r2, [r7, #0]
 8003762:	71fb      	strb	r3, [r7, #7]
 8003764:	460b      	mov	r3, r1
 8003766:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8003768:	79b9      	ldrb	r1, [r7, #6]
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fa96 	bl	8002ca0 <SD_disk_ioctl>
 8003774:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003780:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003782:	e003      	b.n	800378c <LoopCopyDataInit>

08003784 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003786:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003788:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800378a:	3104      	adds	r1, #4

0800378c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800378c:	480a      	ldr	r0, [pc, #40]	; (80037b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003790:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003792:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003794:	d3f6      	bcc.n	8003784 <CopyDataInit>
  ldr r2, =_sbss
 8003796:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003798:	e002      	b.n	80037a0 <LoopFillZerobss>

0800379a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800379a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800379c:	f842 3b04 	str.w	r3, [r2], #4

080037a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80037a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80037a4:	d3f9      	bcc.n	800379a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037a6:	f7ff ff59 	bl	800365c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037aa:	f000 f80f 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037ae:	f7ff fba9 	bl	8002f04 <main>
  bx lr
 80037b2:	4770      	bx	lr
  ldr r3, =_sidata
 80037b4:	0800386c 	.word	0x0800386c
  ldr r0, =_sdata
 80037b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80037bc:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 80037c0:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 80037c4:	200042b4 	.word	0x200042b4

080037c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037c8:	e7fe      	b.n	80037c8 <ADC1_2_IRQHandler>
	...

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	2600      	movs	r6, #0
 80037d0:	4d0c      	ldr	r5, [pc, #48]	; (8003804 <__libc_init_array+0x38>)
 80037d2:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d4:	1b64      	subs	r4, r4, r5
 80037d6:	10a4      	asrs	r4, r4, #2
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	f000 f822 	bl	8003824 <_init>
 80037e0:	2600      	movs	r6, #0
 80037e2:	4d0a      	ldr	r5, [pc, #40]	; (800380c <__libc_init_array+0x40>)
 80037e4:	4c0a      	ldr	r4, [pc, #40]	; (8003810 <__libc_init_array+0x44>)
 80037e6:	1b64      	subs	r4, r4, r5
 80037e8:	10a4      	asrs	r4, r4, #2
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	08003864 	.word	0x08003864
 8003808:	08003864 	.word	0x08003864
 800380c:	08003864 	.word	0x08003864
 8003810:	08003868 	.word	0x08003868

08003814 <memset>:
 8003814:	4603      	mov	r3, r0
 8003816:	4402      	add	r2, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <_init>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr

08003830 <_fini>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr
