
GCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c4  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009164  08009164  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08009164  08009164  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009164  08009164  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800916c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048f4  20000030  0800919c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004924  0800919c  00024924  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024bd0  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a8d  00000000  00000000  00044c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  000496b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0004a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1bd  00000000  00000000  0004b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bfff  00000000  00000000  00065b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076b3d  00000000  00000000  00081b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004c  00000000  00000000  000f8691  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f0  00000000  00000000  000f86e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d88 	.word	0x08007d88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08007d88 	.word	0x08007d88

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fdef 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f007 fb52 	bl	8007810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fe07 	bl	8000daa <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fdcf 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000014 	.word	0x20000014
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200006c0 	.word	0x200006c0

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200006c0 	.word	0x200006c0

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <HAL_Delay+0x44>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004

08000258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000260:	2300      	movs	r3, #0
 8000262:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d101      	bne.n	800027a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000276:	2301      	movs	r3, #1
 8000278:	e0be      	b.n	80003f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000284:	2b00      	cmp	r3, #0
 8000286:	d109      	bne.n	800029c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f007 faec 	bl	8007874 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f000 fbb1 	bl	8000a04 <ADC_ConversionStop_Disable>
 80002a2:	4603      	mov	r3, r0
 80002a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002aa:	f003 0310 	and.w	r3, r3, #16
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8099 	bne.w	80003e6 <HAL_ADC_Init+0x18e>
 80002b4:	7dfb      	ldrb	r3, [r7, #23]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	f040 8095 	bne.w	80003e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c4:	f023 0302 	bic.w	r3, r3, #2
 80002c8:	f043 0202 	orr.w	r2, r3, #2
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002e2:	68ba      	ldr	r2, [r7, #8]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002f0:	d003      	beq.n	80002fa <HAL_ADC_Init+0xa2>
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d102      	bne.n	8000300 <HAL_ADC_Init+0xa8>
 80002fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fe:	e000      	b.n	8000302 <HAL_ADC_Init+0xaa>
 8000300:	2300      	movs	r3, #0
 8000302:	693a      	ldr	r2, [r7, #16]
 8000304:	4313      	orrs	r3, r2
 8000306:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d119      	bne.n	8000344 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d109      	bne.n	800032c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	3b01      	subs	r3, #1
 800031e:	035a      	lsls	r2, r3, #13
 8000320:	693b      	ldr	r3, [r7, #16]
 8000322:	4313      	orrs	r3, r2
 8000324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000328:	613b      	str	r3, [r7, #16]
 800032a:	e00b      	b.n	8000344 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000330:	f043 0220 	orr.w	r2, r3, #32
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033c:	f043 0201 	orr.w	r2, r3, #1
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	430a      	orrs	r2, r1
 8000356:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <HAL_ADC_Init+0x1a8>)
 8000360:	4013      	ands	r3, r2
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	6812      	ldr	r2, [r2, #0]
 8000366:	68b9      	ldr	r1, [r7, #8]
 8000368:	430b      	orrs	r3, r1
 800036a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000374:	d003      	beq.n	800037e <HAL_ADC_Init+0x126>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d104      	bne.n	8000388 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	3b01      	subs	r3, #1
 8000384:	051b      	lsls	r3, r3, #20
 8000386:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	430a      	orrs	r2, r1
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	689a      	ldr	r2, [r3, #8]
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <HAL_ADC_Init+0x1ac>)
 80003a4:	4013      	ands	r3, r2
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d10b      	bne.n	80003c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2200      	movs	r2, #0
 80003b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b6:	f023 0303 	bic.w	r3, r3, #3
 80003ba:	f043 0201 	orr.w	r2, r3, #1
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003c2:	e018      	b.n	80003f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c8:	f023 0312 	bic.w	r3, r3, #18
 80003cc:	f043 0210 	orr.w	r2, r3, #16
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d8:	f043 0201 	orr.w	r2, r3, #1
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003e0:	2301      	movs	r3, #1
 80003e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e4:	e007      	b.n	80003f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ea:	f043 0210 	orr.w	r2, r3, #16
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003f2:	2301      	movs	r3, #1
 80003f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	ffe1f7fd 	.word	0xffe1f7fd
 8000404:	ff1f0efe 	.word	0xff1f0efe

08000408 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000410:	2300      	movs	r3, #0
 8000412:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800041a:	2b01      	cmp	r3, #1
 800041c:	d101      	bne.n	8000422 <HAL_ADC_Start+0x1a>
 800041e:	2302      	movs	r3, #2
 8000420:	e098      	b.n	8000554 <HAL_ADC_Start+0x14c>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 fa98 	bl	8000960 <ADC_Enable>
 8000430:	4603      	mov	r3, r0
 8000432:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	2b00      	cmp	r3, #0
 8000438:	f040 8087 	bne.w	800054a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000444:	f023 0301 	bic.w	r3, r3, #1
 8000448:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a41      	ldr	r2, [pc, #260]	; (800055c <HAL_ADC_Start+0x154>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d105      	bne.n	8000466 <HAL_ADC_Start+0x5e>
 800045a:	4b41      	ldr	r3, [pc, #260]	; (8000560 <HAL_ADC_Start+0x158>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000462:	2b00      	cmp	r3, #0
 8000464:	d115      	bne.n	8000492 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800046a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800047c:	2b00      	cmp	r3, #0
 800047e:	d026      	beq.n	80004ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000484:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000488:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000490:	e01d      	b.n	80004ce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a2f      	ldr	r2, [pc, #188]	; (8000560 <HAL_ADC_Start+0x158>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d004      	beq.n	80004b2 <HAL_ADC_Start+0xaa>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a2b      	ldr	r2, [pc, #172]	; (800055c <HAL_ADC_Start+0x154>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d10d      	bne.n	80004ce <HAL_ADC_Start+0xc6>
 80004b2:	4b2b      	ldr	r3, [pc, #172]	; (8000560 <HAL_ADC_Start+0x158>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d007      	beq.n	80004ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d006      	beq.n	80004e8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	f023 0206 	bic.w	r2, r3, #6
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e6:	e002      	b.n	80004ee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f06f 0202 	mvn.w	r2, #2
 80004fe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800050a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800050e:	d113      	bne.n	8000538 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <HAL_ADC_Start+0x154>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d105      	bne.n	8000526 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <HAL_ADC_Start+0x158>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000522:	2b00      	cmp	r3, #0
 8000524:	d108      	bne.n	8000538 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	689a      	ldr	r2, [r3, #8]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	e00c      	b.n	8000552 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	689a      	ldr	r2, [r3, #8]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	e003      	b.n	8000552 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40012800 	.word	0x40012800
 8000560:	40012400 	.word	0x40012400

08000564 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b087      	sub	sp, #28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800057a:	f7ff fe3f 	bl	80001fc <HAL_GetTick>
 800057e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00b      	beq.n	80005a6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000592:	f043 0220 	orr.w	r2, r3, #32
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	e0c8      	b.n	8000738 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d12a      	bne.n	800060a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d123      	bne.n	800060a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005c2:	e01a      	b.n	80005fa <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ca:	d016      	beq.n	80005fa <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d007      	beq.n	80005e2 <HAL_ADC_PollForConversion+0x7e>
 80005d2:	f7ff fe13 	bl	80001fc <HAL_GetTick>
 80005d6:	4602      	mov	r2, r0
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d20b      	bcs.n	80005fa <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e6:	f043 0204 	orr.w	r2, r3, #4
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80005f6:	2303      	movs	r3, #3
 80005f8:	e09e      	b.n	8000738 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 0302 	and.w	r3, r3, #2
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0dd      	beq.n	80005c4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000608:	e06c      	b.n	80006e4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800060a:	4b4d      	ldr	r3, [pc, #308]	; (8000740 <HAL_ADC_PollForConversion+0x1dc>)
 800060c:	681c      	ldr	r4, [r3, #0]
 800060e:	2002      	movs	r0, #2
 8000610:	f002 f8f8 	bl	8002804 <HAL_RCCEx_GetPeriphCLKFreq>
 8000614:	4603      	mov	r3, r0
 8000616:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6919      	ldr	r1, [r3, #16]
 8000620:	4b48      	ldr	r3, [pc, #288]	; (8000744 <HAL_ADC_PollForConversion+0x1e0>)
 8000622:	400b      	ands	r3, r1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d118      	bne.n	800065a <HAL_ADC_PollForConversion+0xf6>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	68d9      	ldr	r1, [r3, #12]
 800062e:	4b46      	ldr	r3, [pc, #280]	; (8000748 <HAL_ADC_PollForConversion+0x1e4>)
 8000630:	400b      	ands	r3, r1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d111      	bne.n	800065a <HAL_ADC_PollForConversion+0xf6>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	6919      	ldr	r1, [r3, #16]
 800063c:	4b43      	ldr	r3, [pc, #268]	; (800074c <HAL_ADC_PollForConversion+0x1e8>)
 800063e:	400b      	ands	r3, r1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d108      	bne.n	8000656 <HAL_ADC_PollForConversion+0xf2>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	68d9      	ldr	r1, [r3, #12]
 800064a:	4b41      	ldr	r3, [pc, #260]	; (8000750 <HAL_ADC_PollForConversion+0x1ec>)
 800064c:	400b      	ands	r3, r1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <HAL_ADC_PollForConversion+0xf2>
 8000652:	2314      	movs	r3, #20
 8000654:	e020      	b.n	8000698 <HAL_ADC_PollForConversion+0x134>
 8000656:	2329      	movs	r3, #41	; 0x29
 8000658:	e01e      	b.n	8000698 <HAL_ADC_PollForConversion+0x134>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6919      	ldr	r1, [r3, #16]
 8000660:	4b3a      	ldr	r3, [pc, #232]	; (800074c <HAL_ADC_PollForConversion+0x1e8>)
 8000662:	400b      	ands	r3, r1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d106      	bne.n	8000676 <HAL_ADC_PollForConversion+0x112>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68d9      	ldr	r1, [r3, #12]
 800066e:	4b38      	ldr	r3, [pc, #224]	; (8000750 <HAL_ADC_PollForConversion+0x1ec>)
 8000670:	400b      	ands	r3, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d00d      	beq.n	8000692 <HAL_ADC_PollForConversion+0x12e>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6919      	ldr	r1, [r3, #16]
 800067c:	4b35      	ldr	r3, [pc, #212]	; (8000754 <HAL_ADC_PollForConversion+0x1f0>)
 800067e:	400b      	ands	r3, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d108      	bne.n	8000696 <HAL_ADC_PollForConversion+0x132>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	68d9      	ldr	r1, [r3, #12]
 800068a:	4b32      	ldr	r3, [pc, #200]	; (8000754 <HAL_ADC_PollForConversion+0x1f0>)
 800068c:	400b      	ands	r3, r1
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <HAL_ADC_PollForConversion+0x132>
 8000692:	2354      	movs	r3, #84	; 0x54
 8000694:	e000      	b.n	8000698 <HAL_ADC_PollForConversion+0x134>
 8000696:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800069e:	e01d      	b.n	80006dc <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a6:	d016      	beq.n	80006d6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <HAL_ADC_PollForConversion+0x15a>
 80006ae:	f7ff fda5 	bl	80001fc <HAL_GetTick>
 80006b2:	4602      	mov	r2, r0
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d20b      	bcs.n	80006d6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c2:	f043 0204 	orr.w	r2, r3, #4
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80006d2:	2303      	movs	r3, #3
 80006d4:	e030      	b.n	8000738 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d8dd      	bhi.n	80006a0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f06f 0212 	mvn.w	r2, #18
 80006ec:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000704:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000708:	d115      	bne.n	8000736 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68db      	ldr	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800070e:	2b00      	cmp	r3, #0
 8000710:	d111      	bne.n	8000736 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d105      	bne.n	8000736 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800072e:	f043 0201 	orr.w	r2, r3, #1
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	371c      	adds	r7, #28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	20000014 	.word	0x20000014
 8000744:	24924924 	.word	0x24924924
 8000748:	00924924 	.word	0x00924924
 800074c:	12492492 	.word	0x12492492
 8000750:	00492492 	.word	0x00492492
 8000754:	00249249 	.word	0x00249249

08000758 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000788:	2b01      	cmp	r3, #1
 800078a:	d101      	bne.n	8000790 <HAL_ADC_ConfigChannel+0x20>
 800078c:	2302      	movs	r3, #2
 800078e:	e0dc      	b.n	800094a <HAL_ADC_ConfigChannel+0x1da>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	2b06      	cmp	r3, #6
 800079e:	d81c      	bhi.n	80007da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	3b05      	subs	r3, #5
 80007b2:	221f      	movs	r2, #31
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	43db      	mvns	r3, r3
 80007ba:	4019      	ands	r1, r3
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	3b05      	subs	r3, #5
 80007cc:	fa00 f203 	lsl.w	r2, r0, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	430a      	orrs	r2, r1
 80007d6:	635a      	str	r2, [r3, #52]	; 0x34
 80007d8:	e03c      	b.n	8000854 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2b0c      	cmp	r3, #12
 80007e0:	d81c      	bhi.n	800081c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	3b23      	subs	r3, #35	; 0x23
 80007f4:	221f      	movs	r2, #31
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	4019      	ands	r1, r3
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	3b23      	subs	r3, #35	; 0x23
 800080e:	fa00 f203 	lsl.w	r2, r0, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	430a      	orrs	r2, r1
 8000818:	631a      	str	r2, [r3, #48]	; 0x30
 800081a:	e01b      	b.n	8000854 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685a      	ldr	r2, [r3, #4]
 8000826:	4613      	mov	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4413      	add	r3, r2
 800082c:	3b41      	subs	r3, #65	; 0x41
 800082e:	221f      	movs	r2, #31
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	4019      	ands	r1, r3
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	3b41      	subs	r3, #65	; 0x41
 8000848:	fa00 f203 	lsl.w	r2, r0, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	430a      	orrs	r2, r1
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b09      	cmp	r3, #9
 800085a:	d91c      	bls.n	8000896 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	68d9      	ldr	r1, [r3, #12]
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	3b1e      	subs	r3, #30
 800086e:	2207      	movs	r2, #7
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	43db      	mvns	r3, r3
 8000876:	4019      	ands	r1, r3
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	6898      	ldr	r0, [r3, #8]
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4613      	mov	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	3b1e      	subs	r3, #30
 8000888:	fa00 f203 	lsl.w	r2, r0, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	430a      	orrs	r2, r1
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	e019      	b.n	80008ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6919      	ldr	r1, [r3, #16]
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4613      	mov	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	2207      	movs	r2, #7
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	4019      	ands	r1, r3
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	6898      	ldr	r0, [r3, #8]
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4613      	mov	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4413      	add	r3, r2
 80008be:	fa00 f203 	lsl.w	r2, r0, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	430a      	orrs	r2, r1
 80008c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b10      	cmp	r3, #16
 80008d0:	d003      	beq.n	80008da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008d6:	2b11      	cmp	r3, #17
 80008d8:	d132      	bne.n	8000940 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a1d      	ldr	r2, [pc, #116]	; (8000954 <HAL_ADC_ConfigChannel+0x1e4>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d125      	bne.n	8000930 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d126      	bne.n	8000940 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000900:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b10      	cmp	r3, #16
 8000908:	d11a      	bne.n	8000940 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <HAL_ADC_ConfigChannel+0x1e8>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a13      	ldr	r2, [pc, #76]	; (800095c <HAL_ADC_ConfigChannel+0x1ec>)
 8000910:	fba2 2303 	umull	r2, r3, r2, r3
 8000914:	0c9a      	lsrs	r2, r3, #18
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000920:	e002      	b.n	8000928 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	3b01      	subs	r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1f9      	bne.n	8000922 <HAL_ADC_ConfigChannel+0x1b2>
 800092e:	e007      	b.n	8000940 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000934:	f043 0220 	orr.w	r2, r3, #32
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000948:	7bfb      	ldrb	r3, [r7, #15]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	40012400 	.word	0x40012400
 8000958:	20000014 	.word	0x20000014
 800095c:	431bde83 	.word	0x431bde83

08000960 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	2b01      	cmp	r3, #1
 800097c:	d039      	beq.n	80009f2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f042 0201 	orr.w	r2, r2, #1
 800098c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <ADC_Enable+0x9c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <ADC_Enable+0xa0>)
 8000994:	fba2 2303 	umull	r2, r3, r2, r3
 8000998:	0c9b      	lsrs	r3, r3, #18
 800099a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800099c:	e002      	b.n	80009a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1f9      	bne.n	800099e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009aa:	f7ff fc27 	bl	80001fc <HAL_GetTick>
 80009ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009b0:	e018      	b.n	80009e4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009b2:	f7ff fc23 	bl	80001fc <HAL_GetTick>
 80009b6:	4602      	mov	r2, r0
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d911      	bls.n	80009e4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c4:	f043 0210 	orr.w	r2, r3, #16
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d0:	f043 0201 	orr.w	r2, r3, #1
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e007      	b.n	80009f4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d1df      	bne.n	80009b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000014 	.word	0x20000014
 8000a00:	431bde83 	.word	0x431bde83

08000a04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d127      	bne.n	8000a6e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f022 0201 	bic.w	r2, r2, #1
 8000a2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a2e:	f7ff fbe5 	bl	80001fc <HAL_GetTick>
 8000a32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a34:	e014      	b.n	8000a60 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a36:	f7ff fbe1 	bl	80001fc <HAL_GetTick>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d90d      	bls.n	8000a60 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a48:	f043 0210 	orr.w	r2, r3, #16
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a54:	f043 0201 	orr.w	r2, r3, #1
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e007      	b.n	8000a70 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d0e3      	beq.n	8000a36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d101      	bne.n	8000a96 <HAL_ADCEx_Calibration_Start+0x1e>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e086      	b.n	8000ba4 <HAL_ADCEx_Calibration_Start+0x12c>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffb0 	bl	8000a04 <ADC_ConversionStop_Disable>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d175      	bne.n	8000b9a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ab6:	f023 0302 	bic.w	r3, r3, #2
 8000aba:	f043 0202 	orr.w	r2, r3, #2
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <HAL_ADCEx_Calibration_Start+0x134>)
 8000ac4:	681c      	ldr	r4, [r3, #0]
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f001 fe9c 	bl	8002804 <HAL_RCCEx_GetPeriphCLKFreq>
 8000acc:	4603      	mov	r3, r0
 8000ace:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000ad2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000ad4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000ad6:	e002      	b.n	8000ade <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1f9      	bne.n	8000ad8 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff3b 	bl	8000960 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f042 0208 	orr.w	r2, r2, #8
 8000af8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000afa:	f7ff fb7f 	bl	80001fc <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000b00:	e014      	b.n	8000b2c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000b02:	f7ff fb7b 	bl	80001fc <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	2b0a      	cmp	r3, #10
 8000b0e:	d90d      	bls.n	8000b2c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b14:	f023 0312 	bic.w	r3, r3, #18
 8000b18:	f043 0210 	orr.w	r2, r3, #16
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e03b      	b.n	8000ba4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1e3      	bne.n	8000b02 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f042 0204 	orr.w	r2, r2, #4
 8000b48:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000b4a:	f7ff fb57 	bl	80001fc <HAL_GetTick>
 8000b4e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000b50:	e014      	b.n	8000b7c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000b52:	f7ff fb53 	bl	80001fc <HAL_GetTick>
 8000b56:	4602      	mov	r2, r0
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	2b0a      	cmp	r3, #10
 8000b5e:	d90d      	bls.n	8000b7c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b64:	f023 0312 	bic.w	r3, r3, #18
 8000b68:	f043 0210 	orr.w	r2, r3, #16
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e013      	b.n	8000ba4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1e3      	bne.n	8000b52 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8e:	f023 0303 	bic.w	r3, r3, #3
 8000b92:	f043 0201 	orr.w	r2, r3, #1
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	20000014 	.word	0x20000014

08000bb0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4906      	ldr	r1, [pc, #24]	; (8000c40 <NVIC_EnableIRQ+0x2c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da0b      	bge.n	8000c70 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <NVIC_SetPriority+0x4c>)
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 030f 	and.w	r3, r3, #15
 8000c64:	3b04      	subs	r3, #4
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6e:	e009      	b.n	8000c84 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4907      	ldr	r1, [pc, #28]	; (8000c94 <NVIC_SetPriority+0x50>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff90 	bl	8000c44 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff31 	bl	8000bb0 <NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff46 	bl	8000bf8 <NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff90 	bl	8000c98 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5f 	bl	8000c44 <NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff39 	bl	8000c14 <NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa2 	bl	8000cfc <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e043      	b.n	8000e62 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <HAL_DMA_Init+0xa8>)
 8000de2:	4413      	add	r3, r2
 8000de4:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <HAL_DMA_Init+0xac>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	009a      	lsls	r2, r3, #2
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <HAL_DMA_Init+0xb0>)
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	bffdfff8 	.word	0xbffdfff8
 8000e70:	cccccccd 	.word	0xcccccccd
 8000e74:	40020000 	.word	0x40020000

08000e78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	2204      	movs	r2, #4
 8000e96:	409a      	lsls	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d04f      	beq.n	8000f40 <HAL_DMA_IRQHandler+0xc8>
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d04a      	beq.n	8000f40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0320 	and.w	r3, r3, #32
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d107      	bne.n	8000ec8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0204 	bic.w	r2, r2, #4
 8000ec6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a66      	ldr	r2, [pc, #408]	; (8001068 <HAL_DMA_IRQHandler+0x1f0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d029      	beq.n	8000f26 <HAL_DMA_IRQHandler+0xae>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a65      	ldr	r2, [pc, #404]	; (800106c <HAL_DMA_IRQHandler+0x1f4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d022      	beq.n	8000f22 <HAL_DMA_IRQHandler+0xaa>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a63      	ldr	r2, [pc, #396]	; (8001070 <HAL_DMA_IRQHandler+0x1f8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d01a      	beq.n	8000f1c <HAL_DMA_IRQHandler+0xa4>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a62      	ldr	r2, [pc, #392]	; (8001074 <HAL_DMA_IRQHandler+0x1fc>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d012      	beq.n	8000f16 <HAL_DMA_IRQHandler+0x9e>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a60      	ldr	r2, [pc, #384]	; (8001078 <HAL_DMA_IRQHandler+0x200>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d00a      	beq.n	8000f10 <HAL_DMA_IRQHandler+0x98>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a5f      	ldr	r2, [pc, #380]	; (800107c <HAL_DMA_IRQHandler+0x204>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d102      	bne.n	8000f0a <HAL_DMA_IRQHandler+0x92>
 8000f04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f08:	e00e      	b.n	8000f28 <HAL_DMA_IRQHandler+0xb0>
 8000f0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f0e:	e00b      	b.n	8000f28 <HAL_DMA_IRQHandler+0xb0>
 8000f10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f14:	e008      	b.n	8000f28 <HAL_DMA_IRQHandler+0xb0>
 8000f16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f1a:	e005      	b.n	8000f28 <HAL_DMA_IRQHandler+0xb0>
 8000f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f20:	e002      	b.n	8000f28 <HAL_DMA_IRQHandler+0xb0>
 8000f22:	2340      	movs	r3, #64	; 0x40
 8000f24:	e000      	b.n	8000f28 <HAL_DMA_IRQHandler+0xb0>
 8000f26:	2304      	movs	r3, #4
 8000f28:	4a55      	ldr	r2, [pc, #340]	; (8001080 <HAL_DMA_IRQHandler+0x208>)
 8000f2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 8094 	beq.w	800105e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f3e:	e08e      	b.n	800105e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	2202      	movs	r2, #2
 8000f46:	409a      	lsls	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d056      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x186>
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d051      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0320 	and.w	r3, r3, #32
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10b      	bne.n	8000f80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 020a 	bic.w	r2, r2, #10
 8000f76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a38      	ldr	r2, [pc, #224]	; (8001068 <HAL_DMA_IRQHandler+0x1f0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d029      	beq.n	8000fde <HAL_DMA_IRQHandler+0x166>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a37      	ldr	r2, [pc, #220]	; (800106c <HAL_DMA_IRQHandler+0x1f4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d022      	beq.n	8000fda <HAL_DMA_IRQHandler+0x162>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a35      	ldr	r2, [pc, #212]	; (8001070 <HAL_DMA_IRQHandler+0x1f8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d01a      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x15c>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a34      	ldr	r2, [pc, #208]	; (8001074 <HAL_DMA_IRQHandler+0x1fc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d012      	beq.n	8000fce <HAL_DMA_IRQHandler+0x156>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a32      	ldr	r2, [pc, #200]	; (8001078 <HAL_DMA_IRQHandler+0x200>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00a      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0x150>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a31      	ldr	r2, [pc, #196]	; (800107c <HAL_DMA_IRQHandler+0x204>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d102      	bne.n	8000fc2 <HAL_DMA_IRQHandler+0x14a>
 8000fbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fc0:	e00e      	b.n	8000fe0 <HAL_DMA_IRQHandler+0x168>
 8000fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fc6:	e00b      	b.n	8000fe0 <HAL_DMA_IRQHandler+0x168>
 8000fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fcc:	e008      	b.n	8000fe0 <HAL_DMA_IRQHandler+0x168>
 8000fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd2:	e005      	b.n	8000fe0 <HAL_DMA_IRQHandler+0x168>
 8000fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd8:	e002      	b.n	8000fe0 <HAL_DMA_IRQHandler+0x168>
 8000fda:	2320      	movs	r3, #32
 8000fdc:	e000      	b.n	8000fe0 <HAL_DMA_IRQHandler+0x168>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <HAL_DMA_IRQHandler+0x208>)
 8000fe2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d034      	beq.n	800105e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ffc:	e02f      	b.n	800105e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	2208      	movs	r2, #8
 8001004:	409a      	lsls	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d028      	beq.n	8001060 <HAL_DMA_IRQHandler+0x1e8>
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	2b00      	cmp	r3, #0
 8001016:	d023      	beq.n	8001060 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 020e 	bic.w	r2, r2, #14
 8001026:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	4798      	blx	r3
    }
  }
  return;
 800105e:	bf00      	nop
 8001060:	bf00      	nop
}
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020008 	.word	0x40020008
 800106c:	4002001c 	.word	0x4002001c
 8001070:	40020030 	.word	0x40020030
 8001074:	40020044 	.word	0x40020044
 8001078:	40020058 	.word	0x40020058
 800107c:	4002006c 	.word	0x4002006c
 8001080:	40020000 	.word	0x40020000

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b08b      	sub	sp, #44	; 0x2c
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
 80010a6:	e169      	b.n	800137c <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80010a8:	2201      	movs	r2, #1
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8158 	bne.w	8001376 <HAL_GPIO_Init+0x2f2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4a9a      	ldr	r2, [pc, #616]	; (8001334 <HAL_GPIO_Init+0x2b0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d05e      	beq.n	800118e <HAL_GPIO_Init+0x10a>
 80010d0:	4a98      	ldr	r2, [pc, #608]	; (8001334 <HAL_GPIO_Init+0x2b0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d875      	bhi.n	80011c2 <HAL_GPIO_Init+0x13e>
 80010d6:	4a98      	ldr	r2, [pc, #608]	; (8001338 <HAL_GPIO_Init+0x2b4>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d058      	beq.n	800118e <HAL_GPIO_Init+0x10a>
 80010dc:	4a96      	ldr	r2, [pc, #600]	; (8001338 <HAL_GPIO_Init+0x2b4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d86f      	bhi.n	80011c2 <HAL_GPIO_Init+0x13e>
 80010e2:	4a96      	ldr	r2, [pc, #600]	; (800133c <HAL_GPIO_Init+0x2b8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d052      	beq.n	800118e <HAL_GPIO_Init+0x10a>
 80010e8:	4a94      	ldr	r2, [pc, #592]	; (800133c <HAL_GPIO_Init+0x2b8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d869      	bhi.n	80011c2 <HAL_GPIO_Init+0x13e>
 80010ee:	4a94      	ldr	r2, [pc, #592]	; (8001340 <HAL_GPIO_Init+0x2bc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d04c      	beq.n	800118e <HAL_GPIO_Init+0x10a>
 80010f4:	4a92      	ldr	r2, [pc, #584]	; (8001340 <HAL_GPIO_Init+0x2bc>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d863      	bhi.n	80011c2 <HAL_GPIO_Init+0x13e>
 80010fa:	4a92      	ldr	r2, [pc, #584]	; (8001344 <HAL_GPIO_Init+0x2c0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d046      	beq.n	800118e <HAL_GPIO_Init+0x10a>
 8001100:	4a90      	ldr	r2, [pc, #576]	; (8001344 <HAL_GPIO_Init+0x2c0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d85d      	bhi.n	80011c2 <HAL_GPIO_Init+0x13e>
 8001106:	2b12      	cmp	r3, #18
 8001108:	d82a      	bhi.n	8001160 <HAL_GPIO_Init+0xdc>
 800110a:	2b12      	cmp	r3, #18
 800110c:	d859      	bhi.n	80011c2 <HAL_GPIO_Init+0x13e>
 800110e:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <HAL_GPIO_Init+0x90>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	0800118f 	.word	0x0800118f
 8001118:	08001169 	.word	0x08001169
 800111c:	0800117b 	.word	0x0800117b
 8001120:	080011bd 	.word	0x080011bd
 8001124:	080011c3 	.word	0x080011c3
 8001128:	080011c3 	.word	0x080011c3
 800112c:	080011c3 	.word	0x080011c3
 8001130:	080011c3 	.word	0x080011c3
 8001134:	080011c3 	.word	0x080011c3
 8001138:	080011c3 	.word	0x080011c3
 800113c:	080011c3 	.word	0x080011c3
 8001140:	080011c3 	.word	0x080011c3
 8001144:	080011c3 	.word	0x080011c3
 8001148:	080011c3 	.word	0x080011c3
 800114c:	080011c3 	.word	0x080011c3
 8001150:	080011c3 	.word	0x080011c3
 8001154:	080011c3 	.word	0x080011c3
 8001158:	08001171 	.word	0x08001171
 800115c:	08001185 	.word	0x08001185
 8001160:	4a79      	ldr	r2, [pc, #484]	; (8001348 <HAL_GPIO_Init+0x2c4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001166:	e02c      	b.n	80011c2 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e029      	b.n	80011c4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	3304      	adds	r3, #4
 8001176:	623b      	str	r3, [r7, #32]
          break;
 8001178:	e024      	b.n	80011c4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	3308      	adds	r3, #8
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e01f      	b.n	80011c4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	330c      	adds	r3, #12
 800118a:	623b      	str	r3, [r7, #32]
          break;
 800118c:	e01a      	b.n	80011c4 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001196:	2304      	movs	r3, #4
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e013      	b.n	80011c4 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d105      	bne.n	80011b0 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a4:	2308      	movs	r3, #8
 80011a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	611a      	str	r2, [r3, #16]
          break;
 80011ae:	e009      	b.n	80011c4 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b0:	2308      	movs	r3, #8
 80011b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	615a      	str	r2, [r3, #20]
          break;
 80011ba:	e003      	b.n	80011c4 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
          break;
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x140>
          break;
 80011c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2bff      	cmp	r3, #255	; 0xff
 80011c8:	d801      	bhi.n	80011ce <HAL_GPIO_Init+0x14a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	e001      	b.n	80011d2 <HAL_GPIO_Init+0x14e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3304      	adds	r3, #4
 80011d2:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2bff      	cmp	r3, #255	; 0xff
 80011d8:	d802      	bhi.n	80011e0 <HAL_GPIO_Init+0x15c>
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x162>
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	3b08      	subs	r3, #8
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	210f      	movs	r1, #15
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	401a      	ands	r2, r3
 80011f8:	6a39      	ldr	r1, [r7, #32]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	431a      	orrs	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 80b1 	beq.w	8001376 <HAL_GPIO_Init+0x2f2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001214:	4b4d      	ldr	r3, [pc, #308]	; (800134c <HAL_GPIO_Init+0x2c8>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a4c      	ldr	r2, [pc, #304]	; (800134c <HAL_GPIO_Init+0x2c8>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b4a      	ldr	r3, [pc, #296]	; (800134c <HAL_GPIO_Init+0x2c8>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800122c:	4a48      	ldr	r2, [pc, #288]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4013      	ands	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a40      	ldr	r2, [pc, #256]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d013      	beq.n	8001280 <HAL_GPIO_Init+0x1fc>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a3f      	ldr	r2, [pc, #252]	; (8001358 <HAL_GPIO_Init+0x2d4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <HAL_GPIO_Init+0x1f8>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a3e      	ldr	r2, [pc, #248]	; (800135c <HAL_GPIO_Init+0x2d8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1f4>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a3d      	ldr	r2, [pc, #244]	; (8001360 <HAL_GPIO_Init+0x2dc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_GPIO_Init+0x1f0>
 8001270:	2303      	movs	r3, #3
 8001272:	e006      	b.n	8001282 <HAL_GPIO_Init+0x1fe>
 8001274:	2304      	movs	r3, #4
 8001276:	e004      	b.n	8001282 <HAL_GPIO_Init+0x1fe>
 8001278:	2302      	movs	r3, #2
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x1fe>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_GPIO_Init+0x1fe>
 8001280:	2300      	movs	r3, #0
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	f002 0203 	and.w	r2, r2, #3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4093      	lsls	r3, r2
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	4313      	orrs	r3, r2
 8001290:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001292:	492f      	ldr	r1, [pc, #188]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	492c      	ldr	r1, [pc, #176]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x244>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4928      	ldr	r1, [pc, #160]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_GPIO_Init+0x25e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4922      	ldr	r1, [pc, #136]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x26c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	491e      	ldr	r1, [pc, #120]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x286>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	4918      	ldr	r1, [pc, #96]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	608b      	str	r3, [r1, #8]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x294>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	4914      	ldr	r1, [pc, #80]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 8001314:	4013      	ands	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d021      	beq.n	8001368 <HAL_GPIO_Init+0x2e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	490e      	ldr	r1, [pc, #56]	; (8001364 <HAL_GPIO_Init+0x2e0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	60cb      	str	r3, [r1, #12]
 8001330:	e021      	b.n	8001376 <HAL_GPIO_Init+0x2f2>
 8001332:	bf00      	nop
 8001334:	10320000 	.word	0x10320000
 8001338:	10310000 	.word	0x10310000
 800133c:	10220000 	.word	0x10220000
 8001340:	10210000 	.word	0x10210000
 8001344:	10120000 	.word	0x10120000
 8001348:	10110000 	.word	0x10110000
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	40010800 	.word	0x40010800
 8001358:	40010c00 	.word	0x40010c00
 800135c:	40011000 	.word	0x40011000
 8001360:	40011400 	.word	0x40011400
 8001364:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_GPIO_Init+0x30c>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	43db      	mvns	r3, r3
 8001370:	4907      	ldr	r1, [pc, #28]	; (8001390 <HAL_GPIO_Init+0x30c>)
 8001372:	4013      	ands	r3, r2
 8001374:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	3301      	adds	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f ae92 	bls.w	80010a8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	372c      	adds	r7, #44	; 0x2c
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e001      	b.n	80013b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	807b      	strh	r3, [r7, #2]
 80013ce:	4613      	mov	r3, r2
 80013d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d2:	787b      	ldrb	r3, [r7, #1]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d8:	887a      	ldrh	r2, [r7, #2]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013de:	e003      	b.n	80013e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	041a      	lsls	r2, r3, #16
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	611a      	str	r2, [r3, #16]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0f3      	b.n	80015f6 <HAL_I2C_Init+0x202>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f006 fa8e 	bl	8007944 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2224      	movs	r2, #36	; 0x24
 800142c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001440:	f001 f8e2 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 8001444:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a6d      	ldr	r2, [pc, #436]	; (8001600 <HAL_I2C_Init+0x20c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d807      	bhi.n	8001460 <HAL_I2C_Init+0x6c>
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4a6c      	ldr	r2, [pc, #432]	; (8001604 <HAL_I2C_Init+0x210>)
 8001454:	4293      	cmp	r3, r2
 8001456:	bf94      	ite	ls
 8001458:	2301      	movls	r3, #1
 800145a:	2300      	movhi	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	e006      	b.n	800146e <HAL_I2C_Init+0x7a>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4a69      	ldr	r2, [pc, #420]	; (8001608 <HAL_I2C_Init+0x214>)
 8001464:	4293      	cmp	r3, r2
 8001466:	bf94      	ite	ls
 8001468:	2301      	movls	r3, #1
 800146a:	2300      	movhi	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e0bf      	b.n	80015f6 <HAL_I2C_Init+0x202>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4a64      	ldr	r2, [pc, #400]	; (800160c <HAL_I2C_Init+0x218>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0c9b      	lsrs	r3, r3, #18
 8001480:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4a5c      	ldr	r2, [pc, #368]	; (8001600 <HAL_I2C_Init+0x20c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d802      	bhi.n	800149a <HAL_I2C_Init+0xa6>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	e009      	b.n	80014ae <HAL_I2C_Init+0xba>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	4a5a      	ldr	r2, [pc, #360]	; (8001610 <HAL_I2C_Init+0x21c>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	099b      	lsrs	r3, r3, #6
 80014ac:	3301      	adds	r3, #1
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a51      	ldr	r2, [pc, #324]	; (8001600 <HAL_I2C_Init+0x20c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d819      	bhi.n	80014f2 <HAL_I2C_Init+0xfe>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00a      	beq.n	80014ee <HAL_I2C_Init+0xfa>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1e5a      	subs	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	e051      	b.n	8001592 <HAL_I2C_Init+0x19e>
 80014ee:	2304      	movs	r3, #4
 80014f0:	e04f      	b.n	8001592 <HAL_I2C_Init+0x19e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d111      	bne.n	800151e <HAL_I2C_Init+0x12a>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1e59      	subs	r1, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	fbb1 f3f3 	udiv	r3, r1, r3
 800150c:	3301      	adds	r3, #1
 800150e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	bf0c      	ite	eq
 8001516:	2301      	moveq	r3, #1
 8001518:	2300      	movne	r3, #0
 800151a:	b2db      	uxtb	r3, r3
 800151c:	e012      	b.n	8001544 <HAL_I2C_Init+0x150>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1e59      	subs	r1, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009a      	lsls	r2, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	fbb1 f3f3 	udiv	r3, r1, r3
 8001534:	3301      	adds	r3, #1
 8001536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf0c      	ite	eq
 800153e:	2301      	moveq	r3, #1
 8001540:	2300      	movne	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_I2C_Init+0x158>
 8001548:	2301      	movs	r3, #1
 800154a:	e022      	b.n	8001592 <HAL_I2C_Init+0x19e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10e      	bne.n	8001572 <HAL_I2C_Init+0x17e>
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1e59      	subs	r1, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	fbb1 f3f3 	udiv	r3, r1, r3
 8001566:	3301      	adds	r3, #1
 8001568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001570:	e00f      	b.n	8001592 <HAL_I2C_Init+0x19e>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1e59      	subs	r1, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	009a      	lsls	r2, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	fbb1 f3f3 	udiv	r3, r1, r3
 8001588:	3301      	adds	r3, #1
 800158a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69d9      	ldr	r1, [r3, #28]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1a      	ldr	r2, [r3, #32]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6919      	ldr	r1, [r3, #16]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6959      	ldr	r1, [r3, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2220      	movs	r2, #32
 80015e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	000186a0 	.word	0x000186a0
 8001604:	001e847f 	.word	0x001e847f
 8001608:	003d08ff 	.word	0x003d08ff
 800160c:	431bde83 	.word	0x431bde83
 8001610:	10624dd3 	.word	0x10624dd3

08001614 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af02      	add	r7, sp, #8
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	461a      	mov	r2, r3
 8001620:	460b      	mov	r3, r1
 8001622:	817b      	strh	r3, [r7, #10]
 8001624:	4613      	mov	r3, r2
 8001626:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800162c:	f7fe fde6 	bl	80001fc <HAL_GetTick>
 8001630:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b20      	cmp	r3, #32
 800163c:	f040 80ee 	bne.w	800181c <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2319      	movs	r3, #25
 8001646:	2201      	movs	r2, #1
 8001648:	4977      	ldr	r1, [pc, #476]	; (8001828 <HAL_I2C_Master_Transmit+0x214>)
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 faa2 	bl	8001b94 <I2C_WaitOnFlagUntilTimeout>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8001656:	2302      	movs	r3, #2
 8001658:	e0e1      	b.n	800181e <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_I2C_Master_Transmit+0x54>
 8001664:	2302      	movs	r3, #2
 8001666:	e0da      	b.n	800181e <HAL_I2C_Master_Transmit+0x20a>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b01      	cmp	r3, #1
 800167c:	d007      	beq.n	800168e <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0201 	orr.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800169c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2221      	movs	r2, #33	; 0x21
 80016a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2210      	movs	r2, #16
 80016aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	893a      	ldrh	r2, [r7, #8]
 80016be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4a5a      	ldr	r2, [pc, #360]	; (800182c <HAL_I2C_Master_Transmit+0x218>)
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016d0:	8979      	ldrh	r1, [r7, #10]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f9da 	bl	8001a90 <I2C_MasterRequestWrite>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00f      	beq.n	8001702 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d105      	bne.n	80016f6 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e093      	b.n	800181e <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e08d      	b.n	800181e <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001718:	e066      	b.n	80017e8 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	6a39      	ldr	r1, [r7, #32]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 faf7 	bl	8001d12 <I2C_WaitOnTXEFlagUntilTimeout>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00f      	beq.n	800174a <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	2b04      	cmp	r3, #4
 8001730:	d109      	bne.n	8001746 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001740:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06b      	b.n	800181e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e069      	b.n	800181e <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	6251      	str	r1, [r2, #36]	; 0x24
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001760:	b29b      	uxth	r3, r3
 8001762:	3b01      	subs	r3, #1
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176e:	3b01      	subs	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b04      	cmp	r3, #4
 8001782:	d119      	bne.n	80017b8 <HAL_I2C_Master_Transmit+0x1a4>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	d015      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	1c59      	adds	r1, r3, #1
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	6251      	str	r1, [r2, #36]	; 0x24
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	6a39      	ldr	r1, [r7, #32]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fae5 	bl	8001d8c <I2C_WaitOnBTFFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00f      	beq.n	80017e8 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d109      	bne.n	80017e4 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017de:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01c      	b.n	800181e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e01a      	b.n	800181e <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d194      	bne.n	800171a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2220      	movs	r2, #32
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e000      	b.n	800181e <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 800181c:	2302      	movs	r3, #2
  }
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	00100002 	.word	0x00100002
 800182c:	ffff0000 	.word	0xffff0000

08001830 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	460b      	mov	r3, r1
 800183e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	2301      	movs	r3, #1
 8001852:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001854:	f7fe fcd2 	bl	80001fc <HAL_GetTick>
 8001858:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b20      	cmp	r3, #32
 8001864:	f040 810b 	bne.w	8001a7e <HAL_I2C_IsDeviceReady+0x24e>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2319      	movs	r3, #25
 800186e:	2201      	movs	r2, #1
 8001870:	4985      	ldr	r1, [pc, #532]	; (8001a88 <HAL_I2C_IsDeviceReady+0x258>)
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f98e 	bl	8001b94 <I2C_WaitOnFlagUntilTimeout>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 800187e:	2302      	movs	r3, #2
 8001880:	e0fe      	b.n	8001a80 <HAL_I2C_IsDeviceReady+0x250>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_I2C_IsDeviceReady+0x60>
 800188c:	2302      	movs	r3, #2
 800188e:	e0f7      	b.n	8001a80 <HAL_I2C_IsDeviceReady+0x250>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d007      	beq.n	80018b6 <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0201 	orr.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2224      	movs	r2, #36	; 0x24
 80018ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4a6d      	ldr	r2, [pc, #436]	; (8001a8c <HAL_I2C_IsDeviceReady+0x25c>)
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f94c 	bl	8001b94 <I2C_WaitOnFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e0bc      	b.n	8001a80 <HAL_I2C_IsDeviceReady+0x250>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001906:	897b      	ldrh	r3, [r7, #10]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001914:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001916:	f7fe fc71 	bl	80001fc <HAL_GetTick>
 800191a:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b02      	cmp	r3, #2
 8001928:	bf0c      	ite	eq
 800192a:	2301      	moveq	r3, #1
 800192c:	2300      	movne	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800193c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001940:	bf0c      	ite	eq
 8001942:	2301      	moveq	r3, #1
 8001944:	2300      	movne	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001954:	e02a      	b.n	80019ac <HAL_I2C_IsDeviceReady+0x17c>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_I2C_IsDeviceReady+0x13c>
 800195c:	f7fe fc4e 	bl	80001fc <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d203      	bcs.n	8001974 <HAL_I2C_IsDeviceReady+0x144>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	22a0      	movs	r2, #160	; 0xa0
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b02      	cmp	r3, #2
 8001980:	bf0c      	ite	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	2300      	movne	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d105      	bne.n	80019be <HAL_I2C_IsDeviceReady+0x18e>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <HAL_I2C_IsDeviceReady+0x18e>
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2ba0      	cmp	r3, #160	; 0xa0
 80019bc:	d1cb      	bne.n	8001956 <HAL_I2C_IsDeviceReady+0x126>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d129      	bne.n	8001a28 <HAL_I2C_IsDeviceReady+0x1f8>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e2:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2319      	movs	r3, #25
 8001a00:	2201      	movs	r2, #1
 8001a02:	4921      	ldr	r1, [pc, #132]	; (8001a88 <HAL_I2C_IsDeviceReady+0x258>)
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f8c5 	bl	8001b94 <I2C_WaitOnFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_I2C_IsDeviceReady+0x1e4>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e035      	b.n	8001a80 <HAL_I2C_IsDeviceReady+0x250>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e02b      	b.n	8001a80 <HAL_I2C_IsDeviceReady+0x250>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a36:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a40:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2319      	movs	r3, #25
 8001a48:	2201      	movs	r2, #1
 8001a4a:	490f      	ldr	r1, [pc, #60]	; (8001a88 <HAL_I2C_IsDeviceReady+0x258>)
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f8a1 	bl	8001b94 <I2C_WaitOnFlagUntilTimeout>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_I2C_IsDeviceReady+0x22c>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e011      	b.n	8001a80 <HAL_I2C_IsDeviceReady+0x250>
        }
      }
    }while(I2C_Trials++ < Trials);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	617a      	str	r2, [r7, #20]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	f63f af38 	bhi.w	80018da <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_I2C_IsDeviceReady+0x250>
  }
  else
  {
    return HAL_BUSY;
 8001a7e:	2302      	movs	r3, #2
  }
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	00100002 	.word	0x00100002
 8001a8c:	ffff0000 	.word	0xffff0000

08001a90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d006      	beq.n	8001aba <I2C_MasterRequestWrite+0x2a>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d003      	beq.n	8001aba <I2C_MasterRequestWrite+0x2a>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ab8:	d108      	bne.n	8001acc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e00b      	b.n	8001ae4 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	2b12      	cmp	r3, #18
 8001ad2:	d107      	bne.n	8001ae4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae2:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f84f 	bl	8001b94 <I2C_WaitOnFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e041      	b.n	8001b84 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b08:	d108      	bne.n	8001b1c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	e021      	b.n	8001b60 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b1c:	897b      	ldrh	r3, [r7, #10]
 8001b1e:	11db      	asrs	r3, r3, #7
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f003 0306 	and.w	r3, r3, #6
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f063 030f 	orn	r3, r3, #15
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4914      	ldr	r1, [pc, #80]	; (8001b8c <I2C_MasterRequestWrite+0xfc>)
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f87b 	bl	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d101      	bne.n	8001b52 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e018      	b.n	8001b84 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e016      	b.n	8001b84 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b56:	897b      	ldrh	r3, [r7, #10]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	490a      	ldr	r1, [pc, #40]	; (8001b90 <I2C_MasterRequestWrite+0x100>)
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f865 	bl	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d101      	bne.n	8001b7e <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e002      	b.n	8001b84 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e000      	b.n	8001b84 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	00010008 	.word	0x00010008
 8001b90:	00010002 	.word	0x00010002

08001b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001ba4:	e01f      	b.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d01b      	beq.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bb4:	f7fe fb22 	bl	80001fc <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d210      	bcs.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e023      	b.n	8001c2e <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10d      	bne.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x78>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	e00c      	b.n	8001c26 <I2C_WaitOnFlagUntilTimeout+0x92>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4013      	ands	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf0c      	ite	eq
 8001c1e:	2301      	moveq	r3, #1
 8001c20:	2300      	movne	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d0bc      	beq.n	8001ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c44:	e040      	b.n	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c54:	d11c      	bne.n	8001c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c6e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2204      	movs	r2, #4
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e03c      	b.n	8001d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c96:	d017      	beq.n	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8001c9e:	f7fe faad 	bl	80001fc <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d20c      	bcs.n	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e020      	b.n	8001d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10c      	bne.n	8001cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf14      	ite	ne
 8001ce4:	2301      	movne	r3, #1
 8001ce6:	2300      	moveq	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e00b      	b.n	8001d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf14      	ite	ne
 8001cfe:	2301      	movne	r3, #1
 8001d00:	2300      	moveq	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d19e      	bne.n	8001c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d1e:	e029      	b.n	8001d74 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f870 	bl	8001e06 <I2C_IsAcknowledgeFailed>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e029      	b.n	8001d84 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d36:	d01d      	beq.n	8001d74 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d007      	beq.n	8001d4e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d3e:	f7fe fa5d 	bl	80001fc <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d212      	bcs.n	8001d74 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f043 0220 	orr.w	r2, r3, #32
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e007      	b.n	8001d84 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	2b80      	cmp	r3, #128	; 0x80
 8001d80:	d1ce      	bne.n	8001d20 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d98:	e029      	b.n	8001dee <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f833 	bl	8001e06 <I2C_IsAcknowledgeFailed>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e029      	b.n	8001dfe <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d01d      	beq.n	8001dee <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001db8:	f7fe fa20 	bl	80001fc <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d212      	bcs.n	8001dee <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f043 0220 	orr.w	r2, r3, #32
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e007      	b.n	8001dfe <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d1ce      	bne.n	8001d9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1c:	d114      	bne.n	8001e48 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e26:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 8087 	beq.w	8001f7c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e6e:	4b92      	ldr	r3, [pc, #584]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d00c      	beq.n	8001e94 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e7a:	4b8f      	ldr	r3, [pc, #572]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d112      	bne.n	8001eac <HAL_RCC_OscConfig+0x58>
 8001e86:	4b8c      	ldr	r3, [pc, #560]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e92:	d10b      	bne.n	8001eac <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d06c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x126>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d168      	bne.n	8001f7a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e22d      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x70>
 8001eb6:	4b80      	ldr	r3, [pc, #512]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a7f      	ldr	r2, [pc, #508]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e02e      	b.n	8001f22 <HAL_RCC_OscConfig+0xce>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10c      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x92>
 8001ecc:	4b7a      	ldr	r3, [pc, #488]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a79      	ldr	r2, [pc, #484]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b77      	ldr	r3, [pc, #476]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a76      	ldr	r2, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e01d      	b.n	8001f22 <HAL_RCC_OscConfig+0xce>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0xb6>
 8001ef0:	4b71      	ldr	r3, [pc, #452]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a70      	ldr	r2, [pc, #448]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001ef6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b6e      	ldr	r3, [pc, #440]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a6d      	ldr	r2, [pc, #436]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	e00b      	b.n	8001f22 <HAL_RCC_OscConfig+0xce>
 8001f0a:	4b6b      	ldr	r3, [pc, #428]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6a      	ldr	r2, [pc, #424]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a67      	ldr	r2, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d013      	beq.n	8001f52 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe f967 	bl	80001fc <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f32:	f7fe f963 	bl	80001fc <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b64      	cmp	r3, #100	; 0x64
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e1e1      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f44:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0xde>
 8001f50:	e014      	b.n	8001f7c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe f953 	bl	80001fc <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5a:	f7fe f94f 	bl	80001fc <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	; 0x64
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1cd      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6c:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x106>
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d063      	beq.n	8002050 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f88:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00b      	beq.n	8001fac <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f94:	4b48      	ldr	r3, [pc, #288]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d11c      	bne.n	8001fda <HAL_RCC_OscConfig+0x186>
 8001fa0:	4b45      	ldr	r3, [pc, #276]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d116      	bne.n	8001fda <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fac:	4b42      	ldr	r3, [pc, #264]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x170>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e1a1      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4939      	ldr	r1, [pc, #228]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd8:	e03a      	b.n	8002050 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d020      	beq.n	8002024 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCC_OscConfig+0x268>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7fe f908 	bl	80001fc <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff0:	f7fe f904 	bl	80001fc <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e182      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200e:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4926      	ldr	r1, [pc, #152]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
 8002022:	e015      	b.n	8002050 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_RCC_OscConfig+0x268>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7fe f8e7 	bl	80001fc <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002032:	f7fe f8e3 	bl	80001fc <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e161      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002044:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d039      	beq.n	80020d0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d019      	beq.n	8002098 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7fe f8c7 	bl	80001fc <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002072:	f7fe f8c3 	bl	80001fc <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e141      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_RCC_OscConfig+0x264>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002090:	2001      	movs	r0, #1
 8002092:	f000 fae1 	bl	8002658 <RCC_Delay>
 8002096:	e01b      	b.n	80020d0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7fe f8ad 	bl	80001fc <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	e00e      	b.n	80020c4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a6:	f7fe f8a9 	bl	80001fc <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d907      	bls.n	80020c4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e127      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	42420000 	.word	0x42420000
 80020c0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b92      	ldr	r3, [pc, #584]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ea      	bne.n	80020a6 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80a6 	beq.w	800222a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b8b      	ldr	r3, [pc, #556]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10d      	bne.n	800210a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a87      	ldr	r2, [pc, #540]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	61d3      	str	r3, [r2, #28]
 80020fa:	4b85      	ldr	r3, [pc, #532]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b82      	ldr	r3, [pc, #520]	; (8002314 <HAL_RCC_OscConfig+0x4c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d118      	bne.n	8002148 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b7f      	ldr	r3, [pc, #508]	; (8002314 <HAL_RCC_OscConfig+0x4c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a7e      	ldr	r2, [pc, #504]	; (8002314 <HAL_RCC_OscConfig+0x4c0>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7fe f86b 	bl	80001fc <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212a:	f7fe f867 	bl	80001fc <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b64      	cmp	r3, #100	; 0x64
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0e5      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	4b75      	ldr	r3, [pc, #468]	; (8002314 <HAL_RCC_OscConfig+0x4c0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x30a>
 8002150:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	e02d      	b.n	80021ba <HAL_RCC_OscConfig+0x366>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x32c>
 8002166:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a69      	ldr	r2, [pc, #420]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6213      	str	r3, [r2, #32]
 8002172:	4b67      	ldr	r3, [pc, #412]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a66      	ldr	r2, [pc, #408]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	e01c      	b.n	80021ba <HAL_RCC_OscConfig+0x366>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d10c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x34e>
 8002188:	4b61      	ldr	r3, [pc, #388]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a60      	ldr	r2, [pc, #384]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	4b5e      	ldr	r3, [pc, #376]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a5d      	ldr	r2, [pc, #372]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	e00b      	b.n	80021ba <HAL_RCC_OscConfig+0x366>
 80021a2:	4b5b      	ldr	r3, [pc, #364]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a5a      	ldr	r2, [pc, #360]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6213      	str	r3, [r2, #32]
 80021ae:	4b58      	ldr	r3, [pc, #352]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a57      	ldr	r2, [pc, #348]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d015      	beq.n	80021ee <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7fe f81b 	bl	80001fc <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe f817 	bl	80001fc <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e093      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ee      	beq.n	80021ca <HAL_RCC_OscConfig+0x376>
 80021ec:	e014      	b.n	8002218 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7fe f805 	bl	80001fc <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe f801 	bl	80001fc <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e07d      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	4b40      	ldr	r3, [pc, #256]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1ee      	bne.n	80021f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002218:	7dfb      	ldrb	r3, [r7, #23]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002228:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d069      	beq.n	8002306 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b08      	cmp	r3, #8
 800223c:	d061      	beq.n	8002302 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d146      	bne.n	80022d4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b34      	ldr	r3, [pc, #208]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fd ffd6 	bl	80001fc <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002254:	f7fd ffd2 	bl	80001fc <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e050      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227a:	d108      	bne.n	800228e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4921      	ldr	r1, [pc, #132]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a19      	ldr	r1, [r3, #32]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	430b      	orrs	r3, r1
 80022a0:	491b      	ldr	r1, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fd ffa6 	bl	80001fc <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fd ffa2 	bl	80001fc <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e020      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x460>
 80022d2:	e018      	b.n	8002306 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7fd ff8f 	bl	80001fc <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e2:	f7fd ff8b 	bl	80001fc <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e009      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_OscConfig+0x4bc>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f0      	bne.n	80022e2 <HAL_RCC_OscConfig+0x48e>
 8002300:	e001      	b.n	8002306 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
 8002318:	42420060 	.word	0x42420060

0800231c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800232a:	4b7e      	ldr	r3, [pc, #504]	; (8002524 <HAL_RCC_ClockConfig+0x208>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d910      	bls.n	800235a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002338:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <HAL_RCC_ClockConfig+0x208>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 0207 	bic.w	r2, r3, #7
 8002340:	4978      	ldr	r1, [pc, #480]	; (8002524 <HAL_RCC_ClockConfig+0x208>)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002348:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_ClockConfig+0x208>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d001      	beq.n	800235a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0e0      	b.n	800251c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d020      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002372:	4b6d      	ldr	r3, [pc, #436]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4a6c      	ldr	r2, [pc, #432]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 8002378:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800237c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a66      	ldr	r2, [pc, #408]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 8002390:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002394:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002396:	4b64      	ldr	r3, [pc, #400]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4961      	ldr	r1, [pc, #388]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d06a      	beq.n	800248a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023bc:	4b5a      	ldr	r3, [pc, #360]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d115      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0a7      	b.n	800251c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d4:	4b54      	ldr	r3, [pc, #336]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e09b      	b.n	800251c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	4b50      	ldr	r3, [pc, #320]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e093      	b.n	800251c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f4:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 0203 	bic.w	r2, r3, #3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4949      	ldr	r1, [pc, #292]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002406:	f7fd fef9 	bl	80001fc <HAL_GetTick>
 800240a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d112      	bne.n	800243a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002414:	e00a      	b.n	800242c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002416:	f7fd fef1 	bl	80001fc <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e077      	b.n	800251c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800242c:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b04      	cmp	r3, #4
 8002436:	d1ee      	bne.n	8002416 <HAL_RCC_ClockConfig+0xfa>
 8002438:	e027      	b.n	800248a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d11d      	bne.n	800247e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002442:	e00a      	b.n	800245a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f7fd feda 	bl	80001fc <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e060      	b.n	800251c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245a:	4b33      	ldr	r3, [pc, #204]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b08      	cmp	r3, #8
 8002464:	d1ee      	bne.n	8002444 <HAL_RCC_ClockConfig+0x128>
 8002466:	e010      	b.n	800248a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fd fec8 	bl	80001fc <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04e      	b.n	800251c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800247e:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ee      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800248a:	4b26      	ldr	r3, [pc, #152]	; (8002524 <HAL_RCC_ClockConfig+0x208>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d210      	bcs.n	80024ba <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002498:	4b22      	ldr	r3, [pc, #136]	; (8002524 <HAL_RCC_ClockConfig+0x208>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 0207 	bic.w	r2, r3, #7
 80024a0:	4920      	ldr	r1, [pc, #128]	; (8002524 <HAL_RCC_ClockConfig+0x208>)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024a8:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HAL_RCC_ClockConfig+0x208>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e030      	b.n	800251c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4915      	ldr	r1, [pc, #84]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d009      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024e4:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	490d      	ldr	r1, [pc, #52]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f8:	f000 f81c 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_RCC_ClockConfig+0x20c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	4908      	ldr	r1, [pc, #32]	; (800252c <HAL_RCC_ClockConfig+0x210>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_RCC_ClockConfig+0x214>)
 8002512:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002514:	2000      	movs	r0, #0
 8002516:	f7fd fe2f 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40022000 	.word	0x40022000
 8002528:	40021000 	.word	0x40021000
 800252c:	0800914c 	.word	0x0800914c
 8002530:	20000014 	.word	0x20000014

08002534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b490      	push	{r4, r7}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800253c:	1d3c      	adds	r4, r7, #4
 800253e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002544:	f240 2301 	movw	r3, #513	; 0x201
 8002548:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800255e:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b04      	cmp	r3, #4
 800256c:	d002      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x40>
 800256e:	2b08      	cmp	r3, #8
 8002570:	d003      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x46>
 8002572:	e02d      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002576:	623b      	str	r3, [r7, #32]
      break;
 8002578:	e02d      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	0c9b      	lsrs	r3, r3, #18
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002586:	4413      	add	r3, r2
 8002588:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800258c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	0c5b      	lsrs	r3, r3, #17
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025a6:	4413      	add	r3, r2
 80025a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025ac:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b2:	fb02 f203 	mul.w	r2, r2, r3
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	e004      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	623b      	str	r3, [r7, #32]
      break;
 80025ce:	e002      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d2:	623b      	str	r3, [r7, #32]
      break;
 80025d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d6:	6a3b      	ldr	r3, [r7, #32]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3728      	adds	r7, #40	; 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc90      	pop	{r4, r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	08007da0 	.word	0x08007da0
 80025e8:	40021000 	.word	0x40021000
 80025ec:	007a1200 	.word	0x007a1200
 80025f0:	003d0900 	.word	0x003d0900

080025f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f8:	4b02      	ldr	r3, [pc, #8]	; (8002604 <HAL_RCC_GetHCLKFreq+0x10>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	20000014 	.word	0x20000014

08002608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800260c:	f7ff fff2 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4903      	ldr	r1, [pc, #12]	; (800262c <HAL_RCC_GetPCLK1Freq+0x24>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	0800915c 	.word	0x0800915c

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002634:	f7ff ffde 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0adb      	lsrs	r3, r3, #11
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
} 
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	0800915c 	.word	0x0800915c

08002658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <RCC_Delay+0x38>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <RCC_Delay+0x3c>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0a5b      	lsrs	r3, r3, #9
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002674:	bf00      	nop
}
 8002676:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1e5a      	subs	r2, r3, #1
 800267c:	60fa      	str	r2, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f8      	bne.n	8002674 <RCC_Delay+0x1c>
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000014 	.word	0x20000014
 8002694:	10624dd3 	.word	0x10624dd3

08002698 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d07d      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80026b4:	2300      	movs	r3, #0
 80026b6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b8:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10d      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026c4:	4b4c      	ldr	r3, [pc, #304]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	4a4b      	ldr	r2, [pc, #300]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ce:	61d3      	str	r3, [r2, #28]
 80026d0:	4b49      	ldr	r3, [pc, #292]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026dc:	2301      	movs	r3, #1
 80026de:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	4b46      	ldr	r3, [pc, #280]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d118      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ec:	4b43      	ldr	r3, [pc, #268]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a42      	ldr	r2, [pc, #264]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f8:	f7fd fd80 	bl	80001fc <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	e008      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002700:	f7fd fd7c 	bl	80001fc <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e06d      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800271e:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002726:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d02e      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d027      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002744:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002746:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800274c:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002752:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d014      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fd fd4b 	bl	80001fc <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fd fd47 	bl	80001fc <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e036      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ee      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800278c:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4917      	ldr	r1, [pc, #92]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279a:	4313      	orrs	r3, r2
 800279c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	490b      	ldr	r1, [pc, #44]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4904      	ldr	r1, [pc, #16]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
 8002800:	42420440 	.word	0x42420440

08002804 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b08d      	sub	sp, #52	; 0x34
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800280c:	4b5a      	ldr	r3, [pc, #360]	; (8002978 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800280e:	f107 040c 	add.w	r4, r7, #12
 8002812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002818:	f240 2301 	movw	r3, #513	; 0x201
 800281c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	2300      	movs	r3, #0
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	2300      	movs	r3, #0
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b10      	cmp	r3, #16
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b10      	cmp	r3, #16
 800283c:	f200 8094 	bhi.w	8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d04c      	beq.n	80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d07f      	beq.n	800294c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 800284c:	e08c      	b.n	8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      temp_reg = RCC->CFGR;
 800284e:	4b4b      	ldr	r3, [pc, #300]	; (800297c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8002854:	4b49      	ldr	r3, [pc, #292]	; (800297c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 8085 	beq.w	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	0c9b      	lsrs	r3, r3, #18
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800286e:	4413      	add	r3, r2
 8002870:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002874:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d018      	beq.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002880:	4b3e      	ldr	r3, [pc, #248]	; (800297c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	0c5b      	lsrs	r3, r3, #17
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800288e:	4413      	add	r3, r2
 8002890:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00d      	beq.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80028a0:	4a37      	ldr	r2, [pc, #220]	; (8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	e004      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	4a33      	ldr	r2, [pc, #204]	; (8002984 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80028bc:	4b2f      	ldr	r3, [pc, #188]	; (800297c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c8:	d102      	bne.n	80028d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80028ce:	e04d      	b.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (pllclk * 2) / 3;
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4a2c      	ldr	r2, [pc, #176]	; (8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80028de:	e045      	b.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      temp_reg = RCC->BDCR;
 80028e0:	4b26      	ldr	r3, [pc, #152]	; (800297c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f0:	d108      	bne.n	8002904 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80028fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
 8002902:	e022      	b.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290e:	d109      	bne.n	8002924 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800291c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
 8002922:	e012      	b.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800292e:	d109      	bne.n	8002944 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = HSE_VALUE / 128U;
 800293c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
 8002942:	e002      	b.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002948:	e011      	b.n	800296e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 800294a:	e010      	b.n	800296e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800294c:	f7ff fe70 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0b9b      	lsrs	r3, r3, #14
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	3301      	adds	r3, #1
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002966:	e002      	b.n	800296e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
      break;
 8002968:	bf00      	nop
 800296a:	e000      	b.n	800296e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
      break;
 800296c:	bf00      	nop
    }
  }
  return(frequency);
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002970:	4618      	mov	r0, r3
 8002972:	3734      	adds	r7, #52	; 0x34
 8002974:	46bd      	mov	sp, r7
 8002976:	bd90      	pop	{r4, r7, pc}
 8002978:	08007db0 	.word	0x08007db0
 800297c:	40021000 	.word	0x40021000
 8002980:	007a1200 	.word	0x007a1200
 8002984:	003d0900 	.word	0x003d0900
 8002988:	aaaaaaab 	.word	0xaaaaaaab

0800298c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_SPI_Transmit+0x26>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e125      	b.n	8002bfe <HAL_SPI_Transmit+0x272>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029ba:	f7fd fc1f 	bl	80001fc <HAL_GetTick>
 80029be:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d002      	beq.n	80029d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
 80029ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029d0:	e10c      	b.n	8002bec <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0U))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_SPI_Transmit+0x52>
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029e2:	e103      	b.n	8002bec <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2203      	movs	r2, #3
 80029e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a2a:	d107      	bne.n	8002a3c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d007      	beq.n	8002a5a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a62:	d147      	bne.n	8002af4 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_SPI_Transmit+0xea>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d138      	bne.n	8002ae8 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	881a      	ldrh	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	3302      	adds	r3, #2
 8002a84:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a94:	e028      	b.n	8002ae8 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d10f      	bne.n	8002ac4 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ac2:	e011      	b.n	8002ae8 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_SPI_Transmit+0x156>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_SPI_Transmit+0x15c>
 8002ad2:	f7fd fb93 	bl	80001fc <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d802      	bhi.n	8002ae8 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ae6:	e081      	b.n	8002bec <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1d1      	bne.n	8002a96 <HAL_SPI_Transmit+0x10a>
 8002af2:	e048      	b.n	8002b86 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <HAL_SPI_Transmit+0x17a>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d13a      	bne.n	8002b7c <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	7812      	ldrb	r2, [r2, #0]
 8002b10:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	3301      	adds	r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b26:	e029      	b.n	8002b7c <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d110      	bne.n	8002b58 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	7812      	ldrb	r2, [r2, #0]
 8002b40:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	3301      	adds	r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b56:	e011      	b.n	8002b7c <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_SPI_Transmit+0x1ea>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d00a      	beq.n	8002b7c <HAL_SPI_Transmit+0x1f0>
 8002b66:	f7fd fb49 	bl	80001fc <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d802      	bhi.n	8002b7c <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b7a:	e037      	b.n	8002bec <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1d0      	bne.n	8002b28 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2102      	movs	r1, #2
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f9e5 	bl	8002f60 <SPI_WaitFlagStateUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ba0:	e024      	b.n	8002bec <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	6839      	ldr	r1, [r7, #0]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fa43 	bl	8003032 <SPI_CheckFlag_BSY>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002bbc:	e016      	b.n	8002bec <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	77fb      	strb	r3, [r7, #31]
 8002be8:	e000      	b.n	8002bec <HAL_SPI_Transmit+0x260>
  }

error:
 8002bea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b08c      	sub	sp, #48	; 0x30
 8002c0a:	af02      	add	r7, sp, #8
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002c20:	2301      	movs	r3, #1
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x32>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e182      	b.n	8002f3e <HAL_SPI_TransmitReceive+0x338>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c40:	f7fd fadc 	bl	80001fc <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d00e      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x74>
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c62:	d106      	bne.n	8002c72 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <HAL_SPI_TransmitReceive+0x6c>
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d003      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
 8002c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c78:	e157      	b.n	8002f2a <HAL_SPI_TransmitReceive+0x324>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_SPI_TransmitReceive+0x86>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_SPI_TransmitReceive+0x86>
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d103      	bne.n	8002c94 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c92:	e14a      	b.n	8002f2a <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d103      	bne.n	8002ca8 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2205      	movs	r2, #5
 8002ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	887a      	ldrh	r2, [r7, #2]
 8002cbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	887a      	ldrh	r2, [r7, #2]
 8002cca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce8:	2b40      	cmp	r3, #64	; 0x40
 8002cea:	d007      	beq.n	8002cfc <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d04:	d171      	bne.n	8002dea <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <HAL_SPI_TransmitReceive+0x112>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d15d      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	881a      	ldrh	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3302      	adds	r3, #2
 8002d26:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d36:	e04d      	b.n	8002dd4 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01c      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x172>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d017      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x172>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d110      	bne.n	8002d78 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	881a      	ldrh	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	3302      	adds	r3, #2
 8002d64:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d018      	beq.n	8002db4 <HAL_SPI_TransmitReceive+0x1ae>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d111      	bne.n	8002db4 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3302      	adds	r3, #2
 8002da0:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002db0:	2301      	movs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d00b      	beq.n	8002dd4 <HAL_SPI_TransmitReceive+0x1ce>
 8002dbc:	f7fd fa1e 	bl	80001fc <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d803      	bhi.n	8002dd4 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002dd2:	e0aa      	b.n	8002f2a <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ac      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x132>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1a7      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x132>
 8002de8:	e070      	b.n	8002ecc <HAL_SPI_TransmitReceive+0x2c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <HAL_SPI_TransmitReceive+0x1f6>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d15d      	bne.n	8002eb8 <HAL_SPI_TransmitReceive+0x2b2>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	330c      	adds	r3, #12
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	7812      	ldrb	r2, [r2, #0]
 8002e06:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e1c:	e04c      	b.n	8002eb8 <HAL_SPI_TransmitReceive+0x2b2>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01c      	beq.n	8002e5e <HAL_SPI_TransmitReceive+0x258>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d017      	beq.n	8002e5e <HAL_SPI_TransmitReceive+0x258>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d110      	bne.n	8002e5e <HAL_SPI_TransmitReceive+0x258>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	60ba      	str	r2, [r7, #8]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	320c      	adds	r2, #12
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d017      	beq.n	8002e98 <HAL_SPI_TransmitReceive+0x292>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d110      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x292>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68d9      	ldr	r1, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	b2ca      	uxtb	r2, r1
 8002e84:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002e94:	2301      	movs	r3, #1
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d00b      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x2b2>
 8002ea0:	f7fd f9ac 	bl	80001fc <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d803      	bhi.n	8002eb8 <HAL_SPI_TransmitReceive+0x2b2>
      {
        errorcode = HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002eb6:	e038      	b.n	8002f2a <HAL_SPI_TransmitReceive+0x324>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ad      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x218>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1a8      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f842 	bl	8002f60 <SPI_WaitFlagStateUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_SPI_TransmitReceive+0x2e4>
  {
    errorcode = HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ee8:	e01f      	b.n	8002f2a <HAL_SPI_TransmitReceive+0x324>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f89f 	bl	8003032 <SPI_CheckFlag_BSY>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <HAL_SPI_TransmitReceive+0x302>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f06:	e010      	b.n	8002f2a <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	e000      	b.n	8002f2a <HAL_SPI_TransmitReceive+0x324>
  }
  
error :
 8002f28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3728      	adds	r7, #40	; 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f54:	b2db      	uxtb	r3, r3
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002f6e:	e04d      	b.n	800300c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d049      	beq.n	800300c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002f7e:	f7fd f93d 	bl	80001fc <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d83e      	bhi.n	800300c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f9c:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa6:	d111      	bne.n	8002fcc <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb0:	d004      	beq.n	8002fbc <SPI_WaitFlagStateUntilTimeout+0x5c>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fba:	d107      	bne.n	8002fcc <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd4:	d110      	bne.n	8002ff8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8002fe4:	400b      	ands	r3, r1
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff6:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e00e      	b.n	800302a <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d101      	bne.n	8003020 <SPI_WaitFlagStateUntilTimeout+0xc0>
 800301c:	2201      	movs	r2, #1
 800301e:	e000      	b.n	8003022 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8003020:	2200      	movs	r2, #0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	429a      	cmp	r2, r3
 8003026:	d1a3      	bne.n	8002f70 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af02      	add	r7, sp, #8
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2200      	movs	r2, #0
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f7ff ff89 	bl	8002f60 <SPI_WaitFlagStateUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e000      	b.n	8003066 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e057      	b.n	8003130 <HAL_SPI_Init+0xc2>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f004 fc94 	bl	80079c0 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	ea42 0103 	orr.w	r1, r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	f003 0104 	and.w	r1, r3, #4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800310e:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800311e:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e03f      	b.n	80031ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f004 fc78 	bl	8007a54 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800317a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f829 	bl	80031d4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a0:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b0:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d4:	b5b0      	push	{r4, r5, r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003216:	f023 030c 	bic.w	r3, r3, #12
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	430b      	orrs	r3, r1
 8003222:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6f      	ldr	r2, [pc, #444]	; (80033fc <UART_SetConfig+0x228>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d16b      	bne.n	800331c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003244:	f7ff f9f4 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 8003248:	4602      	mov	r2, r0
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009a      	lsls	r2, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	4a68      	ldr	r2, [pc, #416]	; (8003400 <UART_SetConfig+0x22c>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	011c      	lsls	r4, r3, #4
 8003268:	f7ff f9e2 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 800326c:	4602      	mov	r2, r0
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	009a      	lsls	r2, r3, #2
 8003276:	441a      	add	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003282:	f7ff f9d5 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 8003286:	4602      	mov	r2, r0
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	4a58      	ldr	r2, [pc, #352]	; (8003400 <UART_SetConfig+0x22c>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2264      	movs	r2, #100	; 0x64
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	1aeb      	subs	r3, r5, r3
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	3332      	adds	r3, #50	; 0x32
 80032b0:	4a53      	ldr	r2, [pc, #332]	; (8003400 <UART_SetConfig+0x22c>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032bc:	441c      	add	r4, r3
 80032be:	f7ff f9b7 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80032d8:	f7ff f9aa 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009a      	lsls	r2, r3, #2
 80032e6:	441a      	add	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	4a43      	ldr	r2, [pc, #268]	; (8003400 <UART_SetConfig+0x22c>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	2264      	movs	r2, #100	; 0x64
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	1aeb      	subs	r3, r5, r3
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	3332      	adds	r3, #50	; 0x32
 8003306:	4a3e      	ldr	r2, [pc, #248]	; (8003400 <UART_SetConfig+0x22c>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	f003 020f 	and.w	r2, r3, #15
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4422      	add	r2, r4
 8003318:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800331a:	e06a      	b.n	80033f2 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800331c:	f7ff f974 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 8003320:	4602      	mov	r2, r0
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009a      	lsls	r2, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	fbb2 f3f3 	udiv	r3, r2, r3
 8003336:	4a32      	ldr	r2, [pc, #200]	; (8003400 <UART_SetConfig+0x22c>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	011c      	lsls	r4, r3, #4
 8003340:	f7ff f962 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 8003344:	4602      	mov	r2, r0
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	009a      	lsls	r2, r3, #2
 800334e:	441a      	add	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	fbb2 f5f3 	udiv	r5, r2, r3
 800335a:	f7ff f955 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 800335e:	4602      	mov	r2, r0
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009a      	lsls	r2, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	4a22      	ldr	r2, [pc, #136]	; (8003400 <UART_SetConfig+0x22c>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2264      	movs	r2, #100	; 0x64
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	1aeb      	subs	r3, r5, r3
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	3332      	adds	r3, #50	; 0x32
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <UART_SetConfig+0x22c>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003394:	441c      	add	r4, r3
 8003396:	f7ff f937 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 800339a:	4602      	mov	r2, r0
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	009a      	lsls	r2, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80033b0:	f7ff f92a 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 80033b4:	4602      	mov	r2, r0
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	009a      	lsls	r2, r3, #2
 80033be:	441a      	add	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ca:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <UART_SetConfig+0x22c>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	2264      	movs	r2, #100	; 0x64
 80033d4:	fb02 f303 	mul.w	r3, r2, r3
 80033d8:	1aeb      	subs	r3, r5, r3
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	3332      	adds	r3, #50	; 0x32
 80033de:	4a08      	ldr	r2, [pc, #32]	; (8003400 <UART_SetConfig+0x22c>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	095b      	lsrs	r3, r3, #5
 80033e6:	f003 020f 	and.w	r2, r3, #15
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4422      	add	r2, r4
 80033f0:	609a      	str	r2, [r3, #8]
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bdb0      	pop	{r4, r5, r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40013800 	.word	0x40013800
 8003400:	51eb851f 	.word	0x51eb851f

08003404 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	4a08      	ldr	r2, [pc, #32]	; (8003434 <disk_status+0x30>)
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	79fa      	ldrb	r2, [r7, #7]
 800341c:	4905      	ldr	r1, [pc, #20]	; (8003434 <disk_status+0x30>)
 800341e:	440a      	add	r2, r1
 8003420:	7a12      	ldrb	r2, [r2, #8]
 8003422:	4610      	mov	r0, r2
 8003424:	4798      	blx	r3
 8003426:	4603      	mov	r3, r0
 8003428:	73fb      	strb	r3, [r7, #15]
  return stat;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	2000026c 	.word	0x2000026c

08003438 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <disk_initialize+0x48>)
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d111      	bne.n	8003474 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <disk_initialize+0x48>)
 8003454:	2101      	movs	r1, #1
 8003456:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	4a09      	ldr	r2, [pc, #36]	; (8003480 <disk_initialize+0x48>)
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	79fa      	ldrb	r2, [r7, #7]
 8003466:	4906      	ldr	r1, [pc, #24]	; (8003480 <disk_initialize+0x48>)
 8003468:	440a      	add	r2, r1
 800346a:	7a12      	ldrb	r2, [r2, #8]
 800346c:	4610      	mov	r0, r2
 800346e:	4798      	blx	r3
 8003470:	4603      	mov	r3, r0
 8003472:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003474:	7bfb      	ldrb	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	2000026c 	.word	0x2000026c

08003484 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4603      	mov	r3, r0
 8003492:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <disk_read+0x3c>)
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	689c      	ldr	r4, [r3, #8]
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <disk_read+0x3c>)
 80034a4:	4413      	add	r3, r2
 80034a6:	7a18      	ldrb	r0, [r3, #8]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	47a0      	blx	r4
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd90      	pop	{r4, r7, pc}
 80034be:	bf00      	nop
 80034c0:	2000026c 	.word	0x2000026c

080034c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <disk_write+0x3c>)
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	68dc      	ldr	r4, [r3, #12]
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	4a07      	ldr	r2, [pc, #28]	; (8003500 <disk_write+0x3c>)
 80034e4:	4413      	add	r3, r2
 80034e6:	7a18      	ldrb	r0, [r3, #8]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	47a0      	blx	r4
 80034f0:	4603      	mov	r3, r0
 80034f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd90      	pop	{r4, r7, pc}
 80034fe:	bf00      	nop
 8003500:	2000026c 	.word	0x2000026c

08003504 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	603a      	str	r2, [r7, #0]
 800350e:	71fb      	strb	r3, [r7, #7]
 8003510:	460b      	mov	r3, r1
 8003512:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <disk_ioctl+0x38>)
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	79fa      	ldrb	r2, [r7, #7]
 8003522:	4906      	ldr	r1, [pc, #24]	; (800353c <disk_ioctl+0x38>)
 8003524:	440a      	add	r2, r1
 8003526:	7a10      	ldrb	r0, [r2, #8]
 8003528:	79b9      	ldrb	r1, [r7, #6]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4798      	blx	r3
 800352e:	4603      	mov	r3, r0
 8003530:	73fb      	strb	r3, [r7, #15]
  return res;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	2000026c 	.word	0x2000026c

08003540 <mem_set>:
		*d++ = *s++;
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003550:	e005      	b.n	800355e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	617a      	str	r2, [r7, #20]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	1e5a      	subs	r2, r3, #1
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f4      	bne.n	8003552 <mem_set+0x12>
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800358c:	bf00      	nop
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	1e5a      	subs	r2, r3, #1
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <mem_cmp+0x40>
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	61fa      	str	r2, [r7, #28]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	4619      	mov	r1, r3
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	61ba      	str	r2, [r7, #24]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	1acb      	subs	r3, r1, r3
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ec      	beq.n	800358e <mem_cmp+0x1a>
	return r;
 80035b4:	697b      	ldr	r3, [r7, #20]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3724      	adds	r7, #36	; 0x24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80035ca:	e002      	b.n	80035d2 <chk_chr+0x12>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3301      	adds	r3, #1
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <chk_chr+0x26>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d1f2      	bne.n	80035cc <chk_chr+0xc>
	return *str;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	781b      	ldrb	r3, [r3, #0]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	e030      	b.n	8003666 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8003604:	495a      	ldr	r1, [pc, #360]	; (8003770 <inc_lock+0x17c>)
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d11f      	bne.n	8003660 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8003620:	4953      	ldr	r1, [pc, #332]	; (8003770 <inc_lock+0x17c>)
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3304      	adds	r3, #4
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003638:	3308      	adds	r3, #8
 800363a:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 800363c:	429a      	cmp	r2, r3
 800363e:	d10f      	bne.n	8003660 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8003640:	494b      	ldr	r1, [pc, #300]	; (8003770 <inc_lock+0x17c>)
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3308      	adds	r3, #8
 8003650:	881a      	ldrh	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003658:	3306      	adds	r3, #6
 800365a:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 800365c:	429a      	cmp	r2, r3
 800365e:	d006      	beq.n	800366e <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3301      	adds	r3, #1
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d9cb      	bls.n	8003604 <inc_lock+0x10>
 800366c:	e000      	b.n	8003670 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800366e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d14a      	bne.n	800370c <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	e002      	b.n	8003682 <inc_lock+0x8e>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3301      	adds	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d809      	bhi.n	800369c <inc_lock+0xa8>
 8003688:	4939      	ldr	r1, [pc, #228]	; (8003770 <inc_lock+0x17c>)
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ef      	bne.n	800367c <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d101      	bne.n	80036a6 <inc_lock+0xb2>
 80036a2:	2300      	movs	r3, #0
 80036a4:	e05f      	b.n	8003766 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	4830      	ldr	r0, [pc, #192]	; (8003770 <inc_lock+0x17c>)
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4403      	add	r3, r0
 80036bc:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c4:	3308      	adds	r3, #8
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	4829      	ldr	r0, [pc, #164]	; (8003770 <inc_lock+0x17c>)
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4613      	mov	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4403      	add	r3, r0
 80036d6:	3304      	adds	r3, #4
 80036d8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e0:	3306      	adds	r3, #6
 80036e2:	8818      	ldrh	r0, [r3, #0]
 80036e4:	4922      	ldr	r1, [pc, #136]	; (8003770 <inc_lock+0x17c>)
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4613      	mov	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3308      	adds	r3, #8
 80036f4:	4602      	mov	r2, r0
 80036f6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80036f8:	491d      	ldr	r1, [pc, #116]	; (8003770 <inc_lock+0x17c>)
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4613      	mov	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	330a      	adds	r3, #10
 8003708:	2200      	movs	r2, #0
 800370a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <inc_lock+0x138>
 8003712:	4917      	ldr	r1, [pc, #92]	; (8003770 <inc_lock+0x17c>)
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	330a      	adds	r3, #10
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <inc_lock+0x138>
 8003728:	2300      	movs	r3, #0
 800372a:	e01c      	b.n	8003766 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10b      	bne.n	800374a <inc_lock+0x156>
 8003732:	490f      	ldr	r1, [pc, #60]	; (8003770 <inc_lock+0x17c>)
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	330a      	adds	r3, #10
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	b299      	uxth	r1, r3
 8003748:	e001      	b.n	800374e <inc_lock+0x15a>
 800374a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800374e:	4808      	ldr	r0, [pc, #32]	; (8003770 <inc_lock+0x17c>)
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4403      	add	r3, r0
 800375c:	330a      	adds	r3, #10
 800375e:	460a      	mov	r2, r1
 8003760:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3301      	adds	r3, #1
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	20000054 	.word	0x20000054

08003774 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e016      	b.n	80037b0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003782:	4910      	ldr	r1, [pc, #64]	; (80037c4 <clear_lock+0x50>)
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d108      	bne.n	80037aa <clear_lock+0x36>
 8003798:	490a      	ldr	r1, [pc, #40]	; (80037c4 <clear_lock+0x50>)
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3301      	adds	r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d9e5      	bls.n	8003782 <clear_lock+0xe>
	}
}
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000054 	.word	0x20000054

080037c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037da:	3304      	adds	r3, #4
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d047      	beq.n	8003872 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80037e8:	330c      	adds	r3, #12
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f4:	3301      	adds	r3, #1
 80037f6:	7818      	ldrb	r0, [r3, #0]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	2301      	movs	r3, #1
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	f7ff fe61 	bl	80034c4 <disk_write>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <sync_window+0x46>
			res = FR_DISK_ERR;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	e031      	b.n	8003872 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003814:	3304      	adds	r3, #4
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	1ad2      	subs	r2, r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800382c:	3318      	adds	r3, #24
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d21e      	bcs.n	8003872 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800383a:	3303      	adds	r3, #3
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	e014      	b.n	800386c <sync_window+0xa4>
					wsect += fs->fsize;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003848:	3318      	adds	r3, #24
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4413      	add	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003858:	3301      	adds	r3, #1
 800385a:	7818      	ldrb	r0, [r3, #0]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	2301      	movs	r3, #1
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	f7ff fe2f 	bl	80034c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3b01      	subs	r3, #1
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d8e7      	bhi.n	8003842 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003890:	330c      	adds	r3, #12
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d01f      	beq.n	80038da <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ff94 	bl	80037c8 <sync_window>
 80038a0:	4603      	mov	r3, r0
 80038a2:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d117      	bne.n	80038da <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b0:	3301      	adds	r3, #1
 80038b2:	7818      	ldrb	r0, [r3, #0]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	2301      	movs	r3, #1
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	f7ff fde3 	bl	8003484 <disk_read>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80038d4:	330c      	adds	r3, #12
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 80038da:	7bfb      	ldrb	r3, [r7, #15]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	3b02      	subs	r3, #2
 80038f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fa:	3314      	adds	r3, #20
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3b02      	subs	r3, #2
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d301      	bcc.n	800390a <clust2sect+0x26>
 8003906:	2300      	movs	r3, #0
 8003908:	e00e      	b.n	8003928 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003910:	3302      	adds	r3, #2
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	fb03 f202 	mul.w	r2, r3, r2
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003922:	3308      	adds	r3, #8
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4413      	add	r3, r2
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d907      	bls.n	8003952 <get_fat+0x20>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003948:	3314      	adds	r3, #20
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003952:	2301      	movs	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e0ec      	b.n	8003b32 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
 800395c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b03      	cmp	r3, #3
 8003968:	f000 809e 	beq.w	8003aa8 <get_fat+0x176>
 800396c:	2b03      	cmp	r3, #3
 800396e:	f300 80d6 	bgt.w	8003b1e <get_fat+0x1ec>
 8003972:	2b01      	cmp	r3, #1
 8003974:	d002      	beq.n	800397c <get_fat+0x4a>
 8003976:	2b02      	cmp	r3, #2
 8003978:	d063      	beq.n	8003a42 <get_fat+0x110>
 800397a:	e0d0      	b.n	8003b1e <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003998:	330a      	adds	r3, #10
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	4619      	mov	r1, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80039a4:	4413      	add	r3, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff67 	bl	800387c <move_window>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f040 80b7 	bne.w	8003b24 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	60fa      	str	r2, [r7, #12]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039c2:	320a      	adds	r2, #10
 80039c4:	8812      	ldrh	r2, [r2, #0]
 80039c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80039ca:	fb02 f201 	mul.w	r2, r2, r1
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e4:	330a      	adds	r3, #10
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	4619      	mov	r1, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80039f0:	4413      	add	r3, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff41 	bl	800387c <move_window>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f040 8093 	bne.w	8003b28 <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a08:	330a      	adds	r3, #10
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a14:	fb02 f201 	mul.w	r2, r2, r1
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	5cd3      	ldrb	r3, [r2, r3]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	461a      	mov	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <get_fat+0x106>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	e002      	b.n	8003a3e <get_fat+0x10c>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3e:	617b      	str	r3, [r7, #20]
			break;
 8003a40:	e077      	b.n	8003b32 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a50:	330a      	adds	r3, #10
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	4619      	mov	r1, r3
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a60:	4413      	add	r3, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff ff09 	bl	800387c <move_window>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d15d      	bne.n	8003b2c <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	005a      	lsls	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7a:	330a      	adds	r3, #10
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003a82:	fb03 f301 	mul.w	r3, r3, r1
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	3301      	adds	r3, #1
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	b21a      	sxth	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	b21b      	sxth	r3, r3
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	b21b      	sxth	r3, r3
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	617b      	str	r3, [r7, #20]
			break;
 8003aa6:	e044      	b.n	8003b32 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab6:	330a      	adds	r3, #10
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	4619      	mov	r1, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ac6:	4413      	add	r3, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff fed6 	bl	800387c <move_window>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d12c      	bne.n	8003b30 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	009a      	lsls	r2, r3, #2
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae0:	330a      	adds	r3, #10
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ae8:	fb03 f301 	mul.w	r3, r3, r1
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	3303      	adds	r3, #3
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	061a      	lsls	r2, r3, #24
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	3302      	adds	r3, #2
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	041b      	lsls	r3, r3, #16
 8003b04:	4313      	orrs	r3, r2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	3201      	adds	r2, #1
 8003b0a:	7812      	ldrb	r2, [r2, #0]
 8003b0c:	0212      	lsls	r2, r2, #8
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	7812      	ldrb	r2, [r2, #0]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b1a:	617b      	str	r3, [r7, #20]
			break;
 8003b1c:	e009      	b.n	8003b32 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 8003b1e:	2301      	movs	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e006      	b.n	8003b32 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b24:	bf00      	nop
 8003b26:	e004      	b.n	8003b32 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b28:	bf00      	nop
 8003b2a:	e002      	b.n	8003b32 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003b2c:	bf00      	nop
 8003b2e:	e000      	b.n	8003b32 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003b30:	bf00      	nop
		}
	}

	return val;
 8003b32:	697b      	ldr	r3, [r7, #20]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d907      	bls.n	8003b5e <put_fat+0x22>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b54:	3314      	adds	r3, #20
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d302      	bcc.n	8003b64 <put_fat+0x28>
		res = FR_INT_ERR;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	77fb      	strb	r3, [r7, #31]
 8003b62:	e146      	b.n	8003df2 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	f000 80d9 	beq.w	8003d24 <put_fat+0x1e8>
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	f300 8133 	bgt.w	8003dde <put_fat+0x2a2>
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d003      	beq.n	8003b84 <put_fat+0x48>
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	f000 8095 	beq.w	8003cac <put_fat+0x170>
 8003b82:	e12c      	b.n	8003dde <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4413      	add	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba0:	330a      	adds	r3, #10
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bac:	4413      	add	r3, r2
 8003bae:	4619      	mov	r1, r3
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7ff fe63 	bl	800387c <move_window>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003bba:	7ffb      	ldrb	r3, [r7, #31]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f040 8111 	bne.w	8003de4 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	617a      	str	r2, [r7, #20]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bce:	320a      	adds	r2, #10
 8003bd0:	8812      	ldrh	r2, [r2, #0]
 8003bd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bd6:	fb02 f201 	mul.w	r2, r2, r1
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00d      	beq.n	8003c08 <put_fat+0xcc>
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b25b      	sxtb	r3, r3
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	b25a      	sxtb	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	4313      	orrs	r3, r2
 8003c02:	b25b      	sxtb	r3, r3
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e001      	b.n	8003c0c <put_fat+0xd0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c16:	3304      	adds	r3, #4
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c2a:	330a      	adds	r3, #10
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c36:	4413      	add	r3, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff fe1e 	bl	800387c <move_window>
 8003c40:	4603      	mov	r3, r0
 8003c42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c44:	7ffb      	ldrb	r3, [r7, #31]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 80ce 	bne.w	8003de8 <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c52:	330a      	adds	r3, #10
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c5e:	fb02 f201 	mul.w	r2, r2, r1
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <put_fat+0x140>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e00e      	b.n	8003c9a <put_fat+0x15e>
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b25b      	sxtb	r3, r3
 8003c82:	f023 030f 	bic.w	r3, r3, #15
 8003c86:	b25a      	sxtb	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	b25b      	sxtb	r3, r3
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	4313      	orrs	r3, r2
 8003c96:	b25b      	sxtb	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	701a      	strb	r2, [r3, #0]
			break;
 8003caa:	e0a2      	b.n	8003df2 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cba:	330a      	adds	r3, #10
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cca:	4413      	add	r3, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff fdd4 	bl	800387c <move_window>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003cd8:	7ffb      	ldrb	r3, [r7, #31]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8086 	bne.w	8003dec <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	005a      	lsls	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cea:	330a      	adds	r3, #10
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cf2:	fb03 f301 	mul.w	r3, r3, r1
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	3301      	adds	r3, #1
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
			break;
 8003d22:	e066      	b.n	8003df2 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d32:	330a      	adds	r3, #10
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d42:	4413      	add	r3, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7ff fd98 	bl	800387c <move_window>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d50:	7ffb      	ldrb	r3, [r7, #31]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d14c      	bne.n	8003df0 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	009a      	lsls	r2, r3, #2
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d60:	330a      	adds	r3, #10
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d68:	fb03 f301 	mul.w	r3, r3, r1
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4413      	add	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	3303      	adds	r3, #3
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	061a      	lsls	r2, r3, #24
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	3302      	adds	r3, #2
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	4313      	orrs	r3, r2
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	3201      	adds	r2, #1
 8003d8a:	7812      	ldrb	r2, [r2, #0]
 8003d8c:	0212      	lsls	r2, r2, #8
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	7812      	ldrb	r2, [r2, #0]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	3301      	adds	r3, #1
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	0c1a      	lsrs	r2, r3, #16
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	0e1a      	lsrs	r2, r3, #24
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	3303      	adds	r3, #3
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
			break;
 8003ddc:	e009      	b.n	8003df2 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 8003dde:	2302      	movs	r3, #2
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e006      	b.n	8003df2 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8003de4:	bf00      	nop
 8003de6:	e004      	b.n	8003df2 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8003de8:	bf00      	nop
 8003dea:	e002      	b.n	8003df2 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8003dec:	bf00      	nop
 8003dee:	e000      	b.n	8003df2 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8003df0:	bf00      	nop
		}
	}

	return res;
 8003df2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d113      	bne.n	8003e34 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e12:	330c      	adds	r3, #12
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <create_chain+0x32>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e24:	3314      	adds	r3, #20
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d31e      	bcc.n	8003e6c <create_chain+0x70>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	e01b      	b.n	8003e6c <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff fd7b 	bl	8003932 <get_fat>
 8003e3c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d801      	bhi.n	8003e48 <create_chain+0x4c>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e086      	b.n	8003f56 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d101      	bne.n	8003e54 <create_chain+0x58>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	e080      	b.n	8003f56 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5a:	3314      	adds	r3, #20
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d201      	bcs.n	8003e68 <create_chain+0x6c>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	e076      	b.n	8003f56 <create_chain+0x15a>
		scl = clst;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3301      	adds	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d307      	bcc.n	8003e96 <create_chain+0x9a>
			ncl = 2;
 8003e86:	2302      	movs	r3, #2
 8003e88:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d901      	bls.n	8003e96 <create_chain+0x9a>
 8003e92:	2300      	movs	r3, #0
 8003e94:	e05f      	b.n	8003f56 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003e96:	6979      	ldr	r1, [r7, #20]
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff fd4a 	bl	8003932 <get_fat>
 8003e9e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00e      	beq.n	8003ec4 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d002      	beq.n	8003eb4 <create_chain+0xb8>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <create_chain+0xbc>
			return cs;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	e04e      	b.n	8003f56 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d1d7      	bne.n	8003e70 <create_chain+0x74>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e048      	b.n	8003f56 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8003ec4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003ec6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003eca:	6979      	ldr	r1, [r7, #20]
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fe35 	bl	8003b3c <put_fat>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <create_chain+0xf4>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d006      	beq.n	8003ef0 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	6839      	ldr	r1, [r7, #0]
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fe28 	bl	8003b3c <put_fat>
 8003eec:	4603      	mov	r3, r0
 8003eee:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d126      	bne.n	8003f44 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efc:	330c      	adds	r3, #12
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f08:	3310      	adds	r3, #16
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d020      	beq.n	8003f54 <create_chain+0x158>
			fs->free_clust--;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f18:	3310      	adds	r3, #16
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	1e5a      	subs	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f24:	3310      	adds	r3, #16
 8003f26:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2e:	3305      	adds	r3, #5
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f3e:	3305      	adds	r3, #5
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e007      	b.n	8003f54 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d102      	bne.n	8003f50 <create_chain+0x154>
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	e000      	b.n	8003f52 <create_chain+0x156>
 8003f50:	2301      	movs	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003f54:	697b      	ldr	r3, [r7, #20]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f72:	3306      	adds	r3, #6
 8003f74:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d00a      	beq.n	8003f9e <dir_sdi+0x40>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f94:	3314      	adds	r3, #20
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d301      	bcc.n	8003fa2 <dir_sdi+0x44>
		return FR_INT_ERR;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e0b4      	b.n	800410c <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d111      	bne.n	8003fcc <dir_sdi+0x6e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d108      	bne.n	8003fcc <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d117      	bne.n	8004002 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fde:	3308      	adds	r3, #8
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d301      	bcc.n	8003fee <dir_sdi+0x90>
			return FR_INT_ERR;
 8003fea:	2302      	movs	r3, #2
 8003fec:	e08e      	b.n	800410c <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e046      	b.n	8004090 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400e:	330a      	adds	r3, #10
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	b29b      	uxth	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004024:	3302      	adds	r3, #2
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	fb03 f302 	mul.w	r3, r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800402e:	e022      	b.n	8004076 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6979      	ldr	r1, [r7, #20]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fc79 	bl	8003932 <get_fat>
 8004040:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d101      	bne.n	800404e <dir_sdi+0xf0>
 800404a:	2301      	movs	r3, #1
 800404c:	e05e      	b.n	800410c <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d90a      	bls.n	800406a <dir_sdi+0x10c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004060:	3314      	adds	r3, #20
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	429a      	cmp	r2, r3
 8004068:	d301      	bcc.n	800406e <dir_sdi+0x110>
				return FR_INT_ERR;
 800406a:	2302      	movs	r3, #2
 800406c:	e04e      	b.n	800410c <dir_sdi+0x1ae>
			idx -= ic;
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	429a      	cmp	r2, r3
 800407c:	d2d8      	bcs.n	8004030 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6979      	ldr	r1, [r7, #20]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fc2b 	bl	80038e4 <clust2sect>
 800408e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004096:	330c      	adds	r3, #12
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <dir_sdi+0x148>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e032      	b.n	800410c <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b2:	330a      	adds	r3, #10
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	fbb3 f2f2 	udiv	r2, r3, r2
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	441a      	add	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040cc:	3310      	adds	r3, #16
 80040ce:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e6:	330a      	adds	r3, #10
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80040f6:	fb02 f201 	mul.w	r2, r2, r1
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	015b      	lsls	r3, r3, #5
 80040fe:	18c2      	adds	r2, r0, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004106:	3314      	adds	r3, #20
 8004108:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004124:	3306      	adds	r3, #6
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d006      	beq.n	8004142 <dir_next+0x2e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413a:	3310      	adds	r3, #16
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <dir_next+0x32>
		return FR_NO_FILE;
 8004142:	2304      	movs	r3, #4
 8004144:	e144      	b.n	80043d0 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004152:	330a      	adds	r3, #10
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	b29b      	uxth	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004162:	fb02 f201 	mul.w	r2, r2, r1
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	2b00      	cmp	r3, #0
 800416a:	f040 810c 	bne.w	8004386 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004174:	3310      	adds	r3, #16
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004180:	3310      	adds	r3, #16
 8004182:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418a:	330c      	adds	r3, #12
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419e:	3308      	adds	r3, #8
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4293      	cmp	r3, r2
 80041a8:	f0c0 80ed 	bcc.w	8004386 <dir_next+0x272>
				return FR_NO_FILE;
 80041ac:	2304      	movs	r3, #4
 80041ae:	e10f      	b.n	80043d0 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041bc:	330a      	adds	r3, #10
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d8:	3302      	adds	r3, #2
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	3b01      	subs	r3, #1
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f040 80d0 	bne.w	8004386 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f4:	330c      	adds	r3, #12
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f7ff fb99 	bl	8003932 <get_fat>
 8004200:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d801      	bhi.n	800420c <dir_next+0xf8>
 8004208:	2302      	movs	r3, #2
 800420a:	e0e1      	b.n	80043d0 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d101      	bne.n	8004218 <dir_next+0x104>
 8004214:	2301      	movs	r3, #1
 8004216:	e0db      	b.n	80043d0 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004224:	3314      	adds	r3, #20
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	429a      	cmp	r2, r3
 800422c:	f0c0 8097 	bcc.w	800435e <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <dir_next+0x126>
 8004236:	2304      	movs	r3, #4
 8004238:	e0ca      	b.n	80043d0 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004248:	330c      	adds	r3, #12
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f7ff fdd4 	bl	8003dfc <create_chain>
 8004254:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <dir_next+0x14c>
 800425c:	2307      	movs	r3, #7
 800425e:	e0b7      	b.n	80043d0 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <dir_next+0x156>
 8004266:	2302      	movs	r3, #2
 8004268:	e0b2      	b.n	80043d0 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d101      	bne.n	8004276 <dir_next+0x162>
 8004272:	2301      	movs	r3, #1
 8004274:	e0ac      	b.n	80043d0 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff faa2 	bl	80037c8 <sync_window>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <dir_next+0x17a>
 800428a:	2301      	movs	r3, #1
 800428c:	e0a0      	b.n	80043d0 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a4:	330a      	adds	r3, #10
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	2100      	movs	r1, #0
 80042ac:	f7ff f948 	bl	8003540 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042be:	681c      	ldr	r4, [r3, #0]
 80042c0:	6979      	ldr	r1, [r7, #20]
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7ff fb0e 	bl	80038e4 <clust2sect>
 80042c8:	4602      	mov	r2, r0
 80042ca:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 80042ce:	330c      	adds	r3, #12
 80042d0:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	e024      	b.n	8004322 <dir_next+0x20e>
						dp->fs->wflag = 1;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e4:	3304      	adds	r3, #4
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fa68 	bl	80037c8 <sync_window>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <dir_next+0x1ee>
 80042fe:	2301      	movs	r3, #1
 8004300:	e066      	b.n	80043d0 <dir_next+0x2bc>
						dp->fs->winsect++;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800430e:	330c      	adds	r3, #12
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004318:	330c      	adds	r3, #12
 800431a:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	3301      	adds	r3, #1
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432e:	3302      	adds	r3, #2
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4293      	cmp	r3, r2
 8004338:	d3ce      	bcc.n	80042d8 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004346:	330c      	adds	r3, #12
 8004348:	6819      	ldr	r1, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	1a8a      	subs	r2, r1, r2
 8004356:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800435a:	330c      	adds	r3, #12
 800435c:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004364:	330c      	adds	r3, #12
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6979      	ldr	r1, [r7, #20]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fab5 	bl	80038e4 <clust2sect>
 800437a:	4602      	mov	r2, r0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004382:	3310      	adds	r3, #16
 8004384:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	b29a      	uxth	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004390:	3306      	adds	r3, #6
 8004392:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043aa:	330a      	adds	r3, #10
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80043ba:	fb02 f201 	mul.w	r2, r2, r1
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	015b      	lsls	r3, r3, #5
 80043c2:	18c2      	adds	r2, r0, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	3314      	adds	r3, #20
 80043cc:	601a      	str	r2, [r3, #0]

	return FR_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd90      	pop	{r4, r7, pc}

080043d8 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	331b      	adds	r3, #27
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	b21a      	sxth	r2, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	331a      	adds	r3, #26
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b21b      	sxth	r3, r3
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b21b      	sxth	r3, r3
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d10f      	bne.n	8004428 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	3315      	adds	r3, #21
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	b21a      	sxth	r2, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	3314      	adds	r3, #20
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	b21b      	sxth	r3, r3
 800441a:	4313      	orrs	r3, r2
 800441c:	b21b      	sxth	r3, r3
 800441e:	b29b      	uxth	r3, r3
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

	return cl;
 8004428:	68fb      	ldr	r3, [r7, #12]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004446:	1e5a      	subs	r2, r3, #1
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	2301      	movs	r3, #1
 800445a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800445c:	4a2b      	ldr	r2, [pc, #172]	; (800450c <cmp_lfn+0xd8>)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	4413      	add	r3, r2
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	b21a      	sxth	r2, r3
 8004470:	4926      	ldr	r1, [pc, #152]	; (800450c <cmp_lfn+0xd8>)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	440b      	add	r3, r1
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	440b      	add	r3, r1
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	b21b      	sxth	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b21b      	sxth	r3, r3
 8004486:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004488:	89fb      	ldrh	r3, [r7, #14]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d019      	beq.n	80044c2 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800448e:	89bb      	ldrh	r3, [r7, #12]
 8004490:	4618      	mov	r0, r3
 8004492:	f001 fb7f 	bl	8005b94 <ff_wtoupper>
 8004496:	4603      	mov	r3, r0
 8004498:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2bfe      	cmp	r3, #254	; 0xfe
 800449e:	d80e      	bhi.n	80044be <cmp_lfn+0x8a>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	617a      	str	r2, [r7, #20]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4413      	add	r3, r2
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fb70 	bl	8005b94 <ff_wtoupper>
 80044b4:	4603      	mov	r3, r0
 80044b6:	461a      	mov	r2, r3
 80044b8:	89fb      	ldrh	r3, [r7, #14]
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d008      	beq.n	80044d0 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80044be:	2300      	movs	r3, #0
 80044c0:	e01f      	b.n	8004502 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80044c2:	89bb      	ldrh	r3, [r7, #12]
 80044c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d001      	beq.n	80044d0 <cmp_lfn+0x9c>
 80044cc:	2300      	movs	r3, #0
 80044ce:	e018      	b.n	8004502 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	3301      	adds	r3, #1
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d9bf      	bls.n	800445c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <cmp_lfn+0xcc>
 80044e8:	89fb      	ldrh	r3, [r7, #14]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <cmp_lfn+0xcc>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <cmp_lfn+0xcc>
		return 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e000      	b.n	8004502 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8004500:	2301      	movs	r3, #1
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	08007f04 	.word	0x08007f04

08004510 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004522:	1e5a      	subs	r2, r3, #1
 8004524:	4613      	mov	r3, r2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	2301      	movs	r3, #1
 8004536:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8004538:	4a26      	ldr	r2, [pc, #152]	; (80045d4 <pick_lfn+0xc4>)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4413      	add	r3, r2
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	4413      	add	r3, r2
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	b21a      	sxth	r2, r3
 800454c:	4921      	ldr	r1, [pc, #132]	; (80045d4 <pick_lfn+0xc4>)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	440b      	add	r3, r1
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	4619      	mov	r1, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	440b      	add	r3, r1
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b21b      	sxth	r3, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	b21b      	sxth	r3, r3
 8004562:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004564:	89fb      	ldrh	r3, [r7, #14]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00f      	beq.n	800458a <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2bfe      	cmp	r3, #254	; 0xfe
 800456e:	d901      	bls.n	8004574 <pick_lfn+0x64>
 8004570:	2300      	movs	r3, #0
 8004572:	e029      	b.n	80045c8 <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004574:	89bb      	ldrh	r3, [r7, #12]
 8004576:	81fb      	strh	r3, [r7, #14]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	617a      	str	r2, [r7, #20]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4413      	add	r3, r2
 8004584:	89fa      	ldrh	r2, [r7, #14]
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	e006      	b.n	8004598 <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800458a:	89bb      	ldrh	r3, [r7, #12]
 800458c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004590:	4293      	cmp	r3, r2
 8004592:	d001      	beq.n	8004598 <pick_lfn+0x88>
 8004594:	2300      	movs	r3, #0
 8004596:	e017      	b.n	80045c8 <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	3301      	adds	r3, #1
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b0c      	cmp	r3, #12
 80045a2:	d9c9      	bls.n	8004538 <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2bfe      	cmp	r3, #254	; 0xfe
 80045b4:	d901      	bls.n	80045ba <pick_lfn+0xaa>
 80045b6:	2300      	movs	r3, #0
 80045b8:	e006      	b.n	80045c8 <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	2200      	movs	r2, #0
 80045c4:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 80045c6:	2301      	movs	r3, #1
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	08007f04 	.word	0x08007f04

080045d8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80045e4:	230b      	movs	r3, #11
 80045e6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	0852      	lsrs	r2, r2, #1
 80045ee:	01db      	lsls	r3, r3, #7
 80045f0:	4313      	orrs	r3, r2
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	1c59      	adds	r1, r3, #1
 80045f8:	6079      	str	r1, [r7, #4]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4413      	add	r3, r2
 80045fe:	73fb      	strb	r3, [r7, #15]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3b01      	subs	r3, #1
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ed      	bne.n	80045e8 <sum_sfn+0x10>
	return sum;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004620:	2100      	movs	r1, #0
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fc9b 	bl	8003f5e <dir_sdi>
 8004628:	4603      	mov	r3, r0
 800462a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800462c:	7dfb      	ldrb	r3, [r7, #23]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <dir_find+0x1e>
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	e0c1      	b.n	80047ba <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004636:	23ff      	movs	r3, #255	; 0xff
 8004638:	753b      	strb	r3, [r7, #20]
 800463a:	7d3b      	ldrb	r3, [r7, #20]
 800463c:	757b      	strb	r3, [r7, #21]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004644:	3304      	adds	r3, #4
 8004646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800464a:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465a:	3310      	adds	r3, #16
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f7ff f90b 	bl	800387c <move_window>
 8004666:	4603      	mov	r3, r0
 8004668:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f040 809e 	bne.w	80047ae <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004678:	3314      	adds	r3, #20
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004684:	7dbb      	ldrb	r3, [r7, #22]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <dir_find+0x78>
 800468a:	2304      	movs	r3, #4
 800468c:	75fb      	strb	r3, [r7, #23]
 800468e:	e093      	b.n	80047b8 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	330b      	adds	r3, #11
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800469a:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800469c:	7dbb      	ldrb	r3, [r7, #22]
 800469e:	2be5      	cmp	r3, #229	; 0xe5
 80046a0:	d007      	beq.n	80046b2 <dir_find+0x9a>
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00c      	beq.n	80046c6 <dir_find+0xae>
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b0f      	cmp	r3, #15
 80046b0:	d009      	beq.n	80046c6 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80046b2:	23ff      	movs	r3, #255	; 0xff
 80046b4:	757b      	strb	r3, [r7, #21]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80046bc:	3304      	adds	r3, #4
 80046be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046c2:	801a      	strh	r2, [r3, #0]
 80046c4:	e068      	b.n	8004798 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b0f      	cmp	r3, #15
 80046ca:	d139      	bne.n	8004740 <dir_find+0x128>
				if (dp->lfn) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d05f      	beq.n	8004798 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80046d8:	7dbb      	ldrb	r3, [r7, #22]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d012      	beq.n	8004708 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	7b5b      	ldrb	r3, [r3, #13]
 80046e6:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80046e8:	7dbb      	ldrb	r3, [r7, #22]
 80046ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ee:	75bb      	strb	r3, [r7, #22]
 80046f0:	7dbb      	ldrb	r3, [r7, #22]
 80046f2:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fa:	3306      	adds	r3, #6
 80046fc:	881a      	ldrh	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004704:	3304      	adds	r3, #4
 8004706:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004708:	7dba      	ldrb	r2, [r7, #22]
 800470a:	7d7b      	ldrb	r3, [r7, #21]
 800470c:	429a      	cmp	r2, r3
 800470e:	d114      	bne.n	800473a <dir_find+0x122>
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	330d      	adds	r3, #13
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	7d3a      	ldrb	r2, [r7, #20]
 8004718:	429a      	cmp	r2, r3
 800471a:	d10e      	bne.n	800473a <dir_find+0x122>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6939      	ldr	r1, [r7, #16]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fe84 	bl	8004434 <cmp_lfn>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <dir_find+0x122>
 8004732:	7d7b      	ldrb	r3, [r7, #21]
 8004734:	3b01      	subs	r3, #1
 8004736:	b2db      	uxtb	r3, r3
 8004738:	e000      	b.n	800473c <dir_find+0x124>
 800473a:	23ff      	movs	r3, #255	; 0xff
 800473c:	757b      	strb	r3, [r7, #21]
 800473e:	e02b      	b.n	8004798 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004740:	7d7b      	ldrb	r3, [r7, #21]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d107      	bne.n	8004756 <dir_find+0x13e>
 8004746:	6938      	ldr	r0, [r7, #16]
 8004748:	f7ff ff46 	bl	80045d8 <sum_sfn>
 800474c:	4603      	mov	r3, r0
 800474e:	461a      	mov	r2, r3
 8004750:	7d3b      	ldrb	r3, [r7, #20]
 8004752:	4293      	cmp	r3, r2
 8004754:	d02d      	beq.n	80047b2 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475c:	3318      	adds	r3, #24
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330b      	adds	r3, #11
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10c      	bne.n	8004786 <dir_find+0x16e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004772:	3318      	adds	r3, #24
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	220b      	movs	r2, #11
 8004778:	4619      	mov	r1, r3
 800477a:	6938      	ldr	r0, [r7, #16]
 800477c:	f7fe fefa 	bl	8003574 <mem_cmp>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d017      	beq.n	80047b6 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004786:	23ff      	movs	r3, #255	; 0xff
 8004788:	757b      	strb	r3, [r7, #21]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004790:	3304      	adds	r3, #4
 8004792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004796:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004798:	2100      	movs	r1, #0
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff fcba 	bl	8004114 <dir_next>
 80047a0:	4603      	mov	r3, r0
 80047a2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f43f af50 	beq.w	800464c <dir_find+0x34>
 80047ac:	e004      	b.n	80047b8 <dir_find+0x1a0>
		if (res != FR_OK) break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80047b6:	bf00      	nop

	return res;
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 80047cc:	23ff      	movs	r3, #255	; 0xff
 80047ce:	757b      	strb	r3, [r7, #21]
 80047d0:	23ff      	movs	r3, #255	; 0xff
 80047d2:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 80047d4:	2304      	movs	r3, #4
 80047d6:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 80047d8:	e08f      	b.n	80048fa <dir_read+0x138>
		res = move_window(dp->fs, dp->sect);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e8:	3310      	adds	r3, #16
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f7ff f844 	bl	800387c <move_window>
 80047f4:	4603      	mov	r3, r0
 80047f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f040 8086 	bne.w	800490c <dir_read+0x14a>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004806:	3314      	adds	r3, #20
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004812:	7dbb      	ldrb	r3, [r7, #22]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <dir_read+0x5c>
 8004818:	2304      	movs	r3, #4
 800481a:	75fb      	strb	r3, [r7, #23]
 800481c:	e07b      	b.n	8004916 <dir_read+0x154>
		a = dir[DIR_Attr] & AM_MASK;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	330b      	adds	r3, #11
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004828:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800482a:	7dbb      	ldrb	r3, [r7, #22]
 800482c:	2be5      	cmp	r3, #229	; 0xe5
 800482e:	d00e      	beq.n	800484e <dir_read+0x8c>
 8004830:	7dbb      	ldrb	r3, [r7, #22]
 8004832:	2b2e      	cmp	r3, #46	; 0x2e
 8004834:	d00b      	beq.n	800484e <dir_read+0x8c>
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	f023 0320 	bic.w	r3, r3, #32
 800483c:	2b08      	cmp	r3, #8
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	4293      	cmp	r3, r2
 800484c:	d002      	beq.n	8004854 <dir_read+0x92>
			ord = 0xFF;
 800484e:	23ff      	movs	r3, #255	; 0xff
 8004850:	757b      	strb	r3, [r7, #21]
 8004852:	e049      	b.n	80048e8 <dir_read+0x126>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	d133      	bne.n	80048c2 <dir_read+0x100>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 800485a:	7dbb      	ldrb	r3, [r7, #22]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d012      	beq.n	800488a <dir_read+0xc8>
					sum = dir[LDIR_Chksum];
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	7b5b      	ldrb	r3, [r3, #13]
 8004868:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 800486a:	7dbb      	ldrb	r3, [r7, #22]
 800486c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004870:	75bb      	strb	r3, [r7, #22]
 8004872:	7dbb      	ldrb	r3, [r7, #22]
 8004874:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487c:	3306      	adds	r3, #6
 800487e:	881a      	ldrh	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004886:	3304      	adds	r3, #4
 8004888:	801a      	strh	r2, [r3, #0]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800488a:	7dba      	ldrb	r2, [r7, #22]
 800488c:	7d7b      	ldrb	r3, [r7, #21]
 800488e:	429a      	cmp	r2, r3
 8004890:	d114      	bne.n	80048bc <dir_read+0xfa>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	330d      	adds	r3, #13
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	7d3a      	ldrb	r2, [r7, #20]
 800489a:	429a      	cmp	r2, r3
 800489c:	d10e      	bne.n	80048bc <dir_read+0xfa>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6939      	ldr	r1, [r7, #16]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff fe31 	bl	8004510 <pick_lfn>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <dir_read+0xfa>
 80048b4:	7d7b      	ldrb	r3, [r7, #21]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e000      	b.n	80048be <dir_read+0xfc>
 80048bc:	23ff      	movs	r3, #255	; 0xff
 80048be:	757b      	strb	r3, [r7, #21]
 80048c0:	e012      	b.n	80048e8 <dir_read+0x126>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 80048c2:	7d7b      	ldrb	r3, [r7, #21]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d107      	bne.n	80048d8 <dir_read+0x116>
 80048c8:	6938      	ldr	r0, [r7, #16]
 80048ca:	f7ff fe85 	bl	80045d8 <sum_sfn>
 80048ce:	4603      	mov	r3, r0
 80048d0:	461a      	mov	r2, r3
 80048d2:	7d3b      	ldrb	r3, [r7, #20]
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d01b      	beq.n	8004910 <dir_read+0x14e>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80048de:	3304      	adds	r3, #4
 80048e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e4:	801a      	strh	r2, [r3, #0]
				break;
 80048e6:	e013      	b.n	8004910 <dir_read+0x14e>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80048e8:	2100      	movs	r1, #0
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff fc12 	bl	8004114 <dir_next>
 80048f0:	4603      	mov	r3, r0
 80048f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10c      	bne.n	8004914 <dir_read+0x152>
	while (dp->sect) {
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004900:	3310      	adds	r3, #16
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f47f af68 	bne.w	80047da <dir_read+0x18>
 800490a:	e004      	b.n	8004916 <dir_read+0x154>
		if (res != FR_OK) break;
 800490c:	bf00      	nop
 800490e:	e002      	b.n	8004916 <dir_read+0x154>
				break;
 8004910:	bf00      	nop
 8004912:	e000      	b.n	8004916 <dir_read+0x154>
		if (res != FR_OK) break;
 8004914:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <dir_read+0x166>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004922:	3310      	adds	r3, #16
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

	return res;
 8004928:	7dfb      	ldrb	r3, [r7, #23]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b088      	sub	sp, #32
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	3309      	adds	r3, #9
 8004940:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004948:	3310      	adds	r3, #16
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d072      	beq.n	8004a36 <get_fileinfo+0x104>
		dir = dp->dir;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004956:	3314      	adds	r3, #20
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60fb      	str	r3, [r7, #12]
		i = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 8004960:	e032      	b.n	80049c8 <get_fileinfo+0x96>
			c = (TCHAR)dir[i++];
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	61fa      	str	r2, [r7, #28]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	75fb      	strb	r3, [r7, #23]
			if (c == ' ') continue;				/* Skip padding spaces */
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b20      	cmp	r3, #32
 8004974:	d100      	bne.n	8004978 <get_fileinfo+0x46>
 8004976:	e027      	b.n	80049c8 <get_fileinfo+0x96>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b05      	cmp	r3, #5
 800497c:	d101      	bne.n	8004982 <get_fileinfo+0x50>
 800497e:	23e5      	movs	r3, #229	; 0xe5
 8004980:	75fb      	strb	r3, [r7, #23]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	2b09      	cmp	r3, #9
 8004986:	d104      	bne.n	8004992 <get_fileinfo+0x60>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	61ba      	str	r2, [r7, #24]
 800498e:	222e      	movs	r2, #46	; 0x2e
 8004990:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d912      	bls.n	80049be <get_fileinfo+0x8c>
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	2b5a      	cmp	r3, #90	; 0x5a
 800499c:	d80f      	bhi.n	80049be <get_fileinfo+0x8c>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	330c      	adds	r3, #12
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d901      	bls.n	80049b0 <get_fileinfo+0x7e>
 80049ac:	2310      	movs	r3, #16
 80049ae:	e000      	b.n	80049b2 <get_fileinfo+0x80>
 80049b0:	2308      	movs	r3, #8
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <get_fileinfo+0x8c>
				c += 0x20;			/* To lower */
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
 80049ba:	3320      	adds	r3, #32
 80049bc:	75fb      	strb	r3, [r7, #23]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	61ba      	str	r2, [r7, #24]
 80049c4:	7dfa      	ldrb	r2, [r7, #23]
 80049c6:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b0a      	cmp	r3, #10
 80049cc:	d9c9      	bls.n	8004962 <get_fileinfo+0x30>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	7ada      	ldrb	r2, [r3, #11]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	331f      	adds	r3, #31
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	061a      	lsls	r2, r3, #24
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	331e      	adds	r3, #30
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	4313      	orrs	r3, r2
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	321d      	adds	r2, #29
 80049ec:	7812      	ldrb	r2, [r2, #0]
 80049ee:	0212      	lsls	r2, r2, #8
 80049f0:	4313      	orrs	r3, r2
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	321c      	adds	r2, #28
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3319      	adds	r3, #25
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	b21a      	sxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3318      	adds	r3, #24
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b21b      	sxth	r3, r3
 8004a10:	4313      	orrs	r3, r2
 8004a12:	b21b      	sxth	r3, r3
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3317      	adds	r3, #23
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	b21a      	sxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3316      	adds	r3, #22
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	b21b      	sxth	r3, r3
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	b21b      	sxth	r3, r3
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d049      	beq.n	8004ad8 <get_fileinfo+0x1a6>
		i = 0; p = fno->lfname;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a54:	3310      	adds	r3, #16
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d038      	beq.n	8004ace <get_fileinfo+0x19c>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d034      	beq.n	8004ace <get_fileinfo+0x19c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d02b      	beq.n	8004ace <get_fileinfo+0x19c>
			lfn = dp->lfn;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8004a80:	e01d      	b.n	8004abe <get_fileinfo+0x18c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8004a82:	897b      	ldrh	r3, [r7, #10]
 8004a84:	2100      	movs	r1, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 f84a 	bl	8005b20 <ff_convert>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 8004a90:	897b      	ldrh	r3, [r7, #10]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <get_fileinfo+0x16a>
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	e018      	b.n	8004ace <get_fileinfo+0x19c>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d302      	bcc.n	8004aae <get_fileinfo+0x17c>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	e00f      	b.n	8004ace <get_fileinfo+0x19c>
				p[i++] = (TCHAR)w;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	61fa      	str	r2, [r7, #28]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	897a      	ldrh	r2, [r7, #10]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1c9a      	adds	r2, r3, #2
 8004ac2:	613a      	str	r2, [r7, #16]
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	817b      	strh	r3, [r7, #10]
 8004ac8:	897b      	ldrh	r3, [r7, #10]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1d9      	bne.n	8004a82 <get_fileinfo+0x150>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 8004ad8:	bf00      	nop
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	e002      	b.n	8004af8 <create_name+0x18>
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	3301      	adds	r3, #1
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b2f      	cmp	r3, #47	; 0x2f
 8004afe:	d0f8      	beq.n	8004af2 <create_name+0x12>
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b5c      	cmp	r3, #92	; 0x5c
 8004b06:	d0f4      	beq.n	8004af2 <create_name+0x12>
	lfn = dp->lfn;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	61ba      	str	r2, [r7, #24]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4413      	add	r3, r2
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004b28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b2a:	2b1f      	cmp	r3, #31
 8004b2c:	d92f      	bls.n	8004b8e <create_name+0xae>
 8004b2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b30:	2b2f      	cmp	r3, #47	; 0x2f
 8004b32:	d02c      	beq.n	8004b8e <create_name+0xae>
 8004b34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b36:	2b5c      	cmp	r3, #92	; 0x5c
 8004b38:	d029      	beq.n	8004b8e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2bfe      	cmp	r3, #254	; 0xfe
 8004b3e:	d901      	bls.n	8004b44 <create_name+0x64>
			return FR_INVALID_NAME;
 8004b40:	2306      	movs	r3, #6
 8004b42:	e18b      	b.n	8004e5c <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 ffe6 	bl	8005b20 <ff_convert>
 8004b54:	4603      	mov	r3, r0
 8004b56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <create_name+0x82>
 8004b5e:	2306      	movs	r3, #6
 8004b60:	e17c      	b.n	8004e5c <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8004b62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b64:	2b7f      	cmp	r3, #127	; 0x7f
 8004b66:	d809      	bhi.n	8004b7c <create_name+0x9c>
 8004b68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	488f      	ldr	r0, [pc, #572]	; (8004dac <create_name+0x2cc>)
 8004b6e:	f7fe fd27 	bl	80035c0 <chk_chr>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <create_name+0x9c>
			return FR_INVALID_NAME;
 8004b78:	2306      	movs	r3, #6
 8004b7a:	e16f      	b.n	8004e5c <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	617a      	str	r2, [r7, #20]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b8a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004b8c:	e7c5      	b.n	8004b1a <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	441a      	add	r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b9a:	2b1f      	cmp	r3, #31
 8004b9c:	d801      	bhi.n	8004ba2 <create_name+0xc2>
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	e000      	b.n	8004ba4 <create_name+0xc4>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8004ba8:	e011      	b.n	8004bce <create_name+0xee>
		w = lfn[di - 1];
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004bbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d002      	beq.n	8004bc8 <create_name+0xe8>
 8004bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8004bc6:	d106      	bne.n	8004bd6 <create_name+0xf6>
		di--;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ea      	bne.n	8004baa <create_name+0xca>
 8004bd4:	e000      	b.n	8004bd8 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8004bd6:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <create_name+0x102>
 8004bde:	2306      	movs	r3, #6
 8004be0:	e13c      	b.n	8004e5c <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	2200      	movs	r2, #0
 8004bec:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf4:	3318      	adds	r3, #24
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	220b      	movs	r2, #11
 8004bfa:	2120      	movs	r1, #32
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fc9f 	bl	8003540 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004c02:	2300      	movs	r3, #0
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	e002      	b.n	8004c0e <create_name+0x12e>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d0f5      	beq.n	8004c08 <create_name+0x128>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	2b2e      	cmp	r3, #46	; 0x2e
 8004c28:	d0ee      	beq.n	8004c08 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <create_name+0x164>
 8004c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c34:	f043 0303 	orr.w	r3, r3, #3
 8004c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004c3c:	e002      	b.n	8004c44 <create_name+0x164>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d009      	beq.n	8004c5e <create_name+0x17e>
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c50:	3b01      	subs	r3, #1
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c5c:	d1ef      	bne.n	8004c3e <create_name+0x15e>

	b = i = 0; ni = 8;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	623b      	str	r3, [r7, #32]
 8004c62:	2300      	movs	r3, #0
 8004c64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c68:	2308      	movs	r3, #8
 8004c6a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	61ba      	str	r2, [r7, #24]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004c7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8092 	beq.w	8004da8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d006      	beq.n	8004c98 <create_name+0x1b8>
 8004c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c8e:	d10a      	bne.n	8004ca6 <create_name+0x1c6>
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d006      	beq.n	8004ca6 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 8004c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c9c:	f043 0303 	orr.w	r3, r3, #3
 8004ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ca4:	e07f      	b.n	8004da6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004ca6:	6a3a      	ldr	r2, [r7, #32]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d203      	bcs.n	8004cb6 <create_name+0x1d6>
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d123      	bne.n	8004cfe <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b0b      	cmp	r3, #11
 8004cba:	d106      	bne.n	8004cca <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 8004cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cc0:	f043 0303 	orr.w	r3, r3, #3
 8004cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004cc8:	e077      	b.n	8004dba <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d005      	beq.n	8004cde <create_name+0x1fe>
 8004cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cd6:	f043 0303 	orr.w	r3, r3, #3
 8004cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d868      	bhi.n	8004db8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	2308      	movs	r3, #8
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	230b      	movs	r3, #11
 8004cf0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004cf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004cfc:	e053      	b.n	8004da6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d00:	2b7f      	cmp	r3, #127	; 0x7f
 8004d02:	d914      	bls.n	8004d2e <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 ff09 	bl	8005b20 <ff_convert>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <create_name+0x242>
 8004d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d1a:	3b80      	subs	r3, #128	; 0x80
 8004d1c:	4a24      	ldr	r2, [pc, #144]	; (8004db0 <create_name+0x2d0>)
 8004d1e:	5cd3      	ldrb	r3, [r2, r3]
 8004d20:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d26:	f043 0302 	orr.w	r3, r3, #2
 8004d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <create_name+0x264>
 8004d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d36:	4619      	mov	r1, r3
 8004d38:	481e      	ldr	r0, [pc, #120]	; (8004db4 <create_name+0x2d4>)
 8004d3a:	f7fe fc41 	bl	80035c0 <chk_chr>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004d44:	235f      	movs	r3, #95	; 0x5f
 8004d46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d4c:	f043 0303 	orr.w	r3, r3, #3
 8004d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d54:	e01b      	b.n	8004d8e <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004d56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d909      	bls.n	8004d70 <create_name+0x290>
 8004d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d5e:	2b5a      	cmp	r3, #90	; 0x5a
 8004d60:	d806      	bhi.n	8004d70 <create_name+0x290>
					b |= 2;
 8004d62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d66:	f043 0302 	orr.w	r3, r3, #2
 8004d6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d6e:	e00e      	b.n	8004d8e <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d72:	2b60      	cmp	r3, #96	; 0x60
 8004d74:	d90b      	bls.n	8004d8e <create_name+0x2ae>
 8004d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d78:	2b7a      	cmp	r3, #122	; 0x7a
 8004d7a:	d808      	bhi.n	8004d8e <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8004d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d8a:	3b20      	subs	r3, #32
 8004d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d94:	3318      	adds	r3, #24
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	1c59      	adds	r1, r3, #1
 8004d9c:	6239      	str	r1, [r7, #32]
 8004d9e:	4413      	add	r3, r2
 8004da0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8004da6:	e761      	b.n	8004c6c <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8004da8:	bf00      	nop
 8004daa:	e006      	b.n	8004dba <create_name+0x2da>
 8004dac:	08007dc0 	.word	0x08007dc0
 8004db0:	08007e84 	.word	0x08007e84
 8004db4:	08007dcc 	.word	0x08007dcc
			if (si > di) break;			/* No extension */
 8004db8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc0:	3318      	adds	r3, #24
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2be5      	cmp	r3, #229	; 0xe5
 8004dc8:	d106      	bne.n	8004dd8 <create_name+0x2f8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd0:	3318      	adds	r3, #24
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2205      	movs	r2, #5
 8004dd6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d104      	bne.n	8004de8 <create_name+0x308>
 8004dde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8004de8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b0c      	cmp	r3, #12
 8004df2:	d005      	beq.n	8004e00 <create_name+0x320>
 8004df4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004df8:	f003 0303 	and.w	r3, r3, #3
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d105      	bne.n	8004e0c <create_name+0x32c>
		cf |= NS_LFN;
 8004e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e04:	f043 0302 	orr.w	r3, r3, #2
 8004e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d117      	bne.n	8004e48 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004e18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d105      	bne.n	8004e30 <create_name+0x350>
 8004e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e28:	f043 0310 	orr.w	r3, r3, #16
 8004e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004e30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e34:	f003 030c 	and.w	r3, r3, #12
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d105      	bne.n	8004e48 <create_name+0x368>
 8004e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e40:	f043 0308 	orr.w	r3, r3, #8
 8004e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e4e:	3318      	adds	r3, #24
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330b      	adds	r3, #11
 8004e54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004e58:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004e5a:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3728      	adds	r7, #40	; 0x28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b2f      	cmp	r3, #47	; 0x2f
 8004e74:	d003      	beq.n	8004e7e <follow_path+0x1a>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b5c      	cmp	r3, #92	; 0x5c
 8004e7c:	d102      	bne.n	8004e84 <follow_path+0x20>
		path++;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b1f      	cmp	r3, #31
 8004e96:	d80c      	bhi.n	8004eb2 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8004e98:	2100      	movs	r1, #0
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff f85f 	bl	8003f5e <dir_sdi>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eaa:	3314      	adds	r3, #20
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e04c      	b.n	8004f4c <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff fe12 	bl	8004ae0 <create_name>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d13d      	bne.n	8004f42 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff fba6 	bl	8004618 <dir_find>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed6:	3318      	adds	r3, #24
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	7adb      	ldrb	r3, [r3, #11]
 8004edc:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d12d      	bne.n	8004f46 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004eea:	7bbb      	ldrb	r3, [r7, #14]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d128      	bne.n	8004f46 <follow_path+0xe2>
 8004ef4:	2305      	movs	r3, #5
 8004ef6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8004ef8:	e025      	b.n	8004f46 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004efa:	7bbb      	ldrb	r3, [r7, #14]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d122      	bne.n	8004f4a <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f0a:	3314      	adds	r3, #20
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	330b      	adds	r3, #11
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8004f1e:	2305      	movs	r3, #5
 8004f20:	73fb      	strb	r3, [r7, #15]
 8004f22:	e013      	b.n	8004f4c <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fa52 	bl	80043d8 <ld_clust>
 8004f34:	4602      	mov	r2, r0
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004f40:	e7b7      	b.n	8004eb2 <follow_path+0x4e>
			if (res != FR_OK) break;
 8004f42:	bf00      	nop
 8004f44:	e002      	b.n	8004f4c <follow_path+0xe8>
				break;
 8004f46:	bf00      	nop
 8004f48:	e000      	b.n	8004f4c <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004f4a:	bf00      	nop
		}
	}

	return res;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b087      	sub	sp, #28
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f62:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d031      	beq.n	8004fd0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	e002      	b.n	8004f7a <get_ldnumber+0x24>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	3301      	adds	r3, #1
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b1f      	cmp	r3, #31
 8004f80:	d903      	bls.n	8004f8a <get_ldnumber+0x34>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b3a      	cmp	r3, #58	; 0x3a
 8004f88:	d1f4      	bne.n	8004f74 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b3a      	cmp	r3, #58	; 0x3a
 8004f90:	d11c      	bne.n	8004fcc <get_ldnumber+0x76>
			tp = *path;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	60fa      	str	r2, [r7, #12]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	3b30      	subs	r3, #48	; 0x30
 8004fa2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b09      	cmp	r3, #9
 8004fa8:	d80e      	bhi.n	8004fc8 <get_ldnumber+0x72>
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d10a      	bne.n	8004fc8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d107      	bne.n	8004fc8 <get_ldnumber+0x72>
					vol = (int)i;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	e002      	b.n	8004fd2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004fd0:	693b      	ldr	r3, [r7, #16]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fec:	3304      	adds	r3, #4
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffe:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fe fc3a 	bl	800387c <move_window>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <check_fs+0x36>
		return 3;
 800500e:	2303      	movs	r3, #3
 8005010:	e04a      	b.n	80050a8 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005018:	3301      	adds	r3, #1
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	b21a      	sxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005026:	b21b      	sxth	r3, r3
 8005028:	4313      	orrs	r3, r2
 800502a:	b21b      	sxth	r3, r3
 800502c:	4a20      	ldr	r2, [pc, #128]	; (80050b0 <check_fs+0xd4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d001      	beq.n	8005036 <check_fs+0x5a>
		return 2;
 8005032:	2302      	movs	r3, #2
 8005034:	e038      	b.n	80050a8 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3336      	adds	r3, #54	; 0x36
 800503a:	3303      	adds	r3, #3
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	061a      	lsls	r2, r3, #24
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3336      	adds	r3, #54	; 0x36
 8005044:	3302      	adds	r3, #2
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	041b      	lsls	r3, r3, #16
 800504a:	4313      	orrs	r3, r2
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	3236      	adds	r2, #54	; 0x36
 8005050:	3201      	adds	r2, #1
 8005052:	7812      	ldrb	r2, [r2, #0]
 8005054:	0212      	lsls	r2, r2, #8
 8005056:	4313      	orrs	r3, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800505e:	4313      	orrs	r3, r2
 8005060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005064:	4a13      	ldr	r2, [pc, #76]	; (80050b4 <check_fs+0xd8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d101      	bne.n	800506e <check_fs+0x92>
		return 0;
 800506a:	2300      	movs	r3, #0
 800506c:	e01c      	b.n	80050a8 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3352      	adds	r3, #82	; 0x52
 8005072:	3303      	adds	r3, #3
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	061a      	lsls	r2, r3, #24
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3352      	adds	r3, #82	; 0x52
 800507c:	3302      	adds	r3, #2
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	4313      	orrs	r3, r2
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	3252      	adds	r2, #82	; 0x52
 8005088:	3201      	adds	r2, #1
 800508a:	7812      	ldrb	r2, [r2, #0]
 800508c:	0212      	lsls	r2, r2, #8
 800508e:	4313      	orrs	r3, r2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005096:	4313      	orrs	r3, r2
 8005098:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800509c:	4a05      	ldr	r2, [pc, #20]	; (80050b4 <check_fs+0xd8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d101      	bne.n	80050a6 <check_fs+0xca>
		return 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e000      	b.n	80050a8 <check_fs+0xcc>

	return 1;
 80050a6:	2301      	movs	r3, #1
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	ffffaa55 	.word	0xffffaa55
 80050b4:	00544146 	.word	0x00544146

080050b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b096      	sub	sp, #88	; 0x58
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80050cc:	68b8      	ldr	r0, [r7, #8]
 80050ce:	f7ff ff42 	bl	8004f56 <get_ldnumber>
 80050d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80050d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da01      	bge.n	80050de <find_volume+0x26>
 80050da:	230b      	movs	r3, #11
 80050dc:	e33c      	b.n	8005758 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80050de:	4ab3      	ldr	r2, [pc, #716]	; (80053ac <find_volume+0x2f4>)
 80050e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <find_volume+0x3a>
 80050ee:	230c      	movs	r3, #12
 80050f0:	e332      	b.n	8005758 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050f6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01d      	beq.n	8005140 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8005104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510a:	3301      	adds	r3, #1
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe f978 	bl	8003404 <disk_status>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800511a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10c      	bne.n	8005140 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <find_volume+0x84>
 800512c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8005138:	230a      	movs	r3, #10
 800513a:	e30d      	b.n	8005758 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800513c:	2300      	movs	r3, #0
 800513e:	e30b      	b.n	8005758 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800514a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514c:	b2da      	uxtb	r2, r3
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005154:	3301      	adds	r3, #1
 8005156:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800515e:	3301      	adds	r3, #1
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe f968 	bl	8003438 <disk_initialize>
 8005168:	4603      	mov	r3, r0
 800516a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800516e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800517a:	2303      	movs	r3, #3
 800517c:	e2ec      	b.n	8005758 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <find_volume+0xdc>
 8005184:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8005190:	230a      	movs	r3, #10
 8005192:	e2e1      	b.n	8005758 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519a:	3301      	adds	r3, #1
 800519c:	7818      	ldrb	r0, [r3, #0]
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a4:	330a      	adds	r3, #10
 80051a6:	461a      	mov	r2, r3
 80051a8:	2102      	movs	r1, #2
 80051aa:	f7fe f9ab 	bl	8003504 <disk_ioctl>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10f      	bne.n	80051d4 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ba:	330a      	adds	r3, #10
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c2:	d307      	bcc.n	80051d4 <find_volume+0x11c>
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ca:	330a      	adds	r3, #10
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d2:	d901      	bls.n	80051d8 <find_volume+0x120>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e2bf      	b.n	8005758 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80051dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051e0:	f7ff fefc 	bl	8004fdc <check_fs>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80051ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d155      	bne.n	800529e <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80051f2:	2300      	movs	r3, #0
 80051f4:	643b      	str	r3, [r7, #64]	; 0x40
 80051f6:	e029      	b.n	800524c <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80051f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005202:	4413      	add	r3, r2
 8005204:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	3304      	adds	r3, #4
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d012      	beq.n	8005236 <find_volume+0x17e>
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	330b      	adds	r3, #11
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	061a      	lsls	r2, r3, #24
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	330a      	adds	r3, #10
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	4313      	orrs	r3, r2
 8005222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005224:	3209      	adds	r2, #9
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	0212      	lsls	r2, r2, #8
 800522a:	4313      	orrs	r3, r2
 800522c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522e:	3208      	adds	r2, #8
 8005230:	7812      	ldrb	r2, [r2, #0]
 8005232:	431a      	orrs	r2, r3
 8005234:	e000      	b.n	8005238 <find_volume+0x180>
 8005236:	2200      	movs	r2, #0
 8005238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005240:	440b      	add	r3, r1
 8005242:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005248:	3301      	adds	r3, #1
 800524a:	643b      	str	r3, [r7, #64]	; 0x40
 800524c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524e:	2b03      	cmp	r3, #3
 8005250:	d9d2      	bls.n	80051f8 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005252:	2300      	movs	r3, #0
 8005254:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <find_volume+0x1aa>
 800525c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525e:	3b01      	subs	r3, #1
 8005260:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800526a:	4413      	add	r3, r2
 800526c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005270:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <find_volume+0x1cc>
 8005278:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800527a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800527c:	f7ff feae 	bl	8004fdc <check_fs>
 8005280:	4603      	mov	r3, r0
 8005282:	e000      	b.n	8005286 <find_volume+0x1ce>
 8005284:	2302      	movs	r3, #2
 8005286:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800528a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <find_volume+0x1e6>
 8005292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005294:	3301      	adds	r3, #1
 8005296:	643b      	str	r3, [r7, #64]	; 0x40
 8005298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529a:	2b03      	cmp	r3, #3
 800529c:	d9e1      	bls.n	8005262 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800529e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d101      	bne.n	80052aa <find_volume+0x1f2>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e256      	b.n	8005758 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80052aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <find_volume+0x1fe>
 80052b2:	230d      	movs	r3, #13
 80052b4:	e250      	b.n	8005758 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b8:	7b1b      	ldrb	r3, [r3, #12]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	b21a      	sxth	r2, r3
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	7adb      	ldrb	r3, [r3, #11]
 80052c2:	b21b      	sxth	r3, r3
 80052c4:	4313      	orrs	r3, r2
 80052c6:	b21a      	sxth	r2, r3
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ce:	330a      	adds	r3, #10
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b21b      	sxth	r3, r3
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 80052d8:	230d      	movs	r3, #13
 80052da:	e23d      	b.n	8005758 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	7ddb      	ldrb	r3, [r3, #23]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	b21a      	sxth	r2, r3
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	7d9b      	ldrb	r3, [r3, #22]
 80052e8:	b21b      	sxth	r3, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	b21b      	sxth	r3, r3
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80052f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d112      	bne.n	800531e <find_volume+0x266>
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80052fe:	061a      	lsls	r2, r3, #24
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005306:	041b      	lsls	r3, r3, #16
 8005308:	4313      	orrs	r3, r2
 800530a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800530c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005310:	0212      	lsls	r2, r2, #8
 8005312:	4313      	orrs	r3, r2
 8005314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005316:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800531a:	4313      	orrs	r3, r2
 800531c:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005324:	3318      	adds	r3, #24
 8005326:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005328:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	7c1a      	ldrb	r2, [r3, #16]
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005334:	3303      	adds	r3, #3
 8005336:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800533e:	3303      	adds	r3, #3
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d008      	beq.n	8005358 <find_volume+0x2a0>
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800534c:	3303      	adds	r3, #3
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d001      	beq.n	8005358 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8005354:	230d      	movs	r3, #13
 8005356:	e1ff      	b.n	8005758 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800535e:	3303      	adds	r3, #3
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	7b5a      	ldrb	r2, [r3, #13]
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005376:	3302      	adds	r3, #2
 8005378:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005380:	3302      	adds	r3, #2
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00e      	beq.n	80053a6 <find_volume+0x2ee>
 8005388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800538e:	3302      	adds	r3, #2
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800539a:	3302      	adds	r3, #2
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	3b01      	subs	r3, #1
 80053a0:	4013      	ands	r3, r2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 80053a6:	230d      	movs	r3, #13
 80053a8:	e1d6      	b.n	8005758 <find_volume+0x6a0>
 80053aa:	bf00      	nop
 80053ac:	2000004c 	.word	0x2000004c

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	7c9b      	ldrb	r3, [r3, #18]
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	b21a      	sxth	r2, r3
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	7c5b      	ldrb	r3, [r3, #17]
 80053bc:	b21b      	sxth	r3, r3
 80053be:	4313      	orrs	r3, r2
 80053c0:	b21b      	sxth	r3, r3
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ca:	3308      	adds	r3, #8
 80053cc:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d4:	3308      	adds	r3, #8
 80053d6:	881a      	ldrh	r2, [r3, #0]
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053de:	330a      	adds	r3, #10
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	fbb2 f1f3 	udiv	r1, r2, r3
 80053ea:	fb03 f301 	mul.w	r3, r3, r1
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 80053f6:	230d      	movs	r3, #13
 80053f8:	e1ae      	b.n	8005758 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	7d1b      	ldrb	r3, [r3, #20]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	b21a      	sxth	r2, r3
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	7cdb      	ldrb	r3, [r3, #19]
 8005406:	b21b      	sxth	r3, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	b21b      	sxth	r3, r3
 800540c:	b29b      	uxth	r3, r3
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005412:	2b00      	cmp	r3, #0
 8005414:	d112      	bne.n	800543c <find_volume+0x384>
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800541c:	061a      	lsls	r2, r3, #24
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005424:	041b      	lsls	r3, r3, #16
 8005426:	4313      	orrs	r3, r2
 8005428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800542a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800542e:	0212      	lsls	r2, r2, #8
 8005430:	4313      	orrs	r3, r2
 8005432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005434:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005438:	4313      	orrs	r3, r2
 800543a:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	7bdb      	ldrb	r3, [r3, #15]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	b21a      	sxth	r2, r3
 8005444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005446:	7b9b      	ldrb	r3, [r3, #14]
 8005448:	b21b      	sxth	r3, r3
 800544a:	4313      	orrs	r3, r2
 800544c:	b21b      	sxth	r3, r3
 800544e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005450:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <find_volume+0x3a2>
 8005456:	230d      	movs	r3, #13
 8005458:	e17e      	b.n	8005758 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800545a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800545c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545e:	441a      	add	r2, r3
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005466:	3308      	adds	r3, #8
 8005468:	8819      	ldrh	r1, [r3, #0]
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005470:	330a      	adds	r3, #10
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	b29b      	uxth	r3, r3
 8005478:	fbb1 f3f3 	udiv	r3, r1, r3
 800547c:	b29b      	uxth	r3, r3
 800547e:	4413      	add	r3, r2
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	429a      	cmp	r2, r3
 8005488:	d201      	bcs.n	800548e <find_volume+0x3d6>
 800548a:	230d      	movs	r3, #13
 800548c:	e164      	b.n	8005758 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800548e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	1ad2      	subs	r2, r2, r3
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549a:	3302      	adds	r3, #2
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <find_volume+0x3f6>
 80054aa:	230d      	movs	r3, #13
 80054ac:	e154      	b.n	8005758 <find_volume+0x6a0>
	fmt = FS_FAT12;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d902      	bls.n	80054c4 <find_volume+0x40c>
 80054be:	2302      	movs	r3, #2
 80054c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d902      	bls.n	80054d4 <find_volume+0x41c>
 80054ce:	2303      	movs	r3, #3
 80054d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	1c9a      	adds	r2, r3, #2
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054de:	3314      	adds	r3, #20
 80054e0:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e8:	331c      	adds	r3, #28
 80054ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054ec:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80054ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f2:	441a      	add	r2, r3
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054fa:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 80054fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	441a      	add	r2, r3
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005508:	3308      	adds	r3, #8
 800550a:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800550c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005510:	2b03      	cmp	r3, #3
 8005512:	d127      	bne.n	8005564 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800551a:	3308      	adds	r3, #8
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <find_volume+0x46e>
 8005522:	230d      	movs	r3, #13
 8005524:	e118      	b.n	8005758 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800552c:	061a      	lsls	r2, r3, #24
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005534:	041b      	lsls	r3, r3, #16
 8005536:	4313      	orrs	r3, r2
 8005538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800553a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800553e:	0212      	lsls	r2, r2, #8
 8005540:	4313      	orrs	r3, r2
 8005542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005544:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005548:	431a      	orrs	r2, r3
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005550:	3304      	adds	r3, #4
 8005552:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555a:	3314      	adds	r3, #20
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	647b      	str	r3, [r7, #68]	; 0x44
 8005562:	e030      	b.n	80055c6 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556a:	3308      	adds	r3, #8
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <find_volume+0x4be>
 8005572:	230d      	movs	r3, #13
 8005574:	e0f0      	b.n	8005758 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005580:	441a      	add	r2, r3
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005588:	3304      	adds	r3, #4
 800558a:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800558c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005590:	2b02      	cmp	r3, #2
 8005592:	d106      	bne.n	80055a2 <find_volume+0x4ea>
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559a:	3314      	adds	r3, #20
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	e010      	b.n	80055c4 <find_volume+0x50c>
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a8:	3314      	adds	r3, #20
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	4413      	add	r3, r2
 80055b2:	085a      	lsrs	r2, r3, #1
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ba:	3314      	adds	r3, #20
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80055c4:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055cc:	3318      	adds	r3, #24
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d6:	330a      	adds	r3, #10
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055de:	440b      	add	r3, r1
 80055e0:	1e59      	subs	r1, r3, #1
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e8:	330a      	adds	r3, #10
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d201      	bcs.n	80055f8 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 80055f4:	230d      	movs	r3, #13
 80055f6:	e0af      	b.n	8005758 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80055f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fe:	3310      	adds	r3, #16
 8005600:	f04f 32ff 	mov.w	r2, #4294967295
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560c:	3310      	adds	r3, #16
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005616:	330c      	adds	r3, #12
 8005618:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005620:	3305      	adds	r3, #5
 8005622:	2280      	movs	r2, #128	; 0x80
 8005624:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005626:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800562a:	2b03      	cmp	r3, #3
 800562c:	d17d      	bne.n	800572a <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	b21a      	sxth	r2, r3
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800563e:	b21b      	sxth	r3, r3
 8005640:	4313      	orrs	r3, r2
 8005642:	b21b      	sxth	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d170      	bne.n	800572a <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564a:	3301      	adds	r3, #1
 800564c:	4619      	mov	r1, r3
 800564e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005650:	f7fe f914 	bl	800387c <move_window>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d167      	bne.n	800572a <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005660:	3305      	adds	r3, #5
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	b21a      	sxth	r2, r3
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005676:	b21b      	sxth	r3, r3
 8005678:	4313      	orrs	r3, r2
 800567a:	b21b      	sxth	r3, r3
 800567c:	4a38      	ldr	r2, [pc, #224]	; (8005760 <find_volume+0x6a8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d153      	bne.n	800572a <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	78db      	ldrb	r3, [r3, #3]
 8005686:	061a      	lsls	r2, r3, #24
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	789b      	ldrb	r3, [r3, #2]
 800568c:	041b      	lsls	r3, r3, #16
 800568e:	4313      	orrs	r3, r2
 8005690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005692:	7852      	ldrb	r2, [r2, #1]
 8005694:	0212      	lsls	r2, r2, #8
 8005696:	4313      	orrs	r3, r2
 8005698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800569a:	7812      	ldrb	r2, [r2, #0]
 800569c:	4313      	orrs	r3, r2
 800569e:	4a31      	ldr	r2, [pc, #196]	; (8005764 <find_volume+0x6ac>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d142      	bne.n	800572a <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80056aa:	061a      	lsls	r2, r3, #24
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	4313      	orrs	r3, r2
 80056b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056b8:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80056bc:	0212      	lsls	r2, r2, #8
 80056be:	4313      	orrs	r3, r2
 80056c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056c2:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80056c6:	4313      	orrs	r3, r2
 80056c8:	4a27      	ldr	r2, [pc, #156]	; (8005768 <find_volume+0x6b0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d12d      	bne.n	800572a <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80056d4:	061a      	lsls	r2, r3, #24
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80056dc:	041b      	lsls	r3, r3, #16
 80056de:	4313      	orrs	r3, r2
 80056e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056e2:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80056e6:	0212      	lsls	r2, r2, #8
 80056e8:	4313      	orrs	r3, r2
 80056ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ec:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80056f0:	431a      	orrs	r2, r3
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f8:	3310      	adds	r3, #16
 80056fa:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005702:	061a      	lsls	r2, r3, #24
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800570a:	041b      	lsls	r3, r3, #16
 800570c:	4313      	orrs	r3, r2
 800570e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005710:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005714:	0212      	lsls	r2, r2, #8
 8005716:	4313      	orrs	r3, r2
 8005718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800571a:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800571e:	431a      	orrs	r2, r3
 8005720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005726:	330c      	adds	r3, #12
 8005728:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005730:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005734:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005736:	4b0d      	ldr	r3, [pc, #52]	; (800576c <find_volume+0x6b4>)
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	4b0b      	ldr	r3, [pc, #44]	; (800576c <find_volume+0x6b4>)
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	4b0a      	ldr	r3, [pc, #40]	; (800576c <find_volume+0x6b4>)
 8005744:	881a      	ldrh	r2, [r3, #0]
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574c:	3306      	adds	r3, #6
 800574e:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005752:	f7fe f80f 	bl	8003774 <clear_lock>
#endif

	return FR_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3758      	adds	r7, #88	; 0x58
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	ffffaa55 	.word	0xffffaa55
 8005764:	41615252 	.word	0x41615252
 8005768:	61417272 	.word	0x61417272
 800576c:	20000050 	.word	0x20000050

08005770 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d02d      	beq.n	80057de <validate+0x6e>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d027      	beq.n	80057de <validate+0x6e>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01e      	beq.n	80057de <validate+0x6e>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ac:	3306      	adds	r3, #6
 80057ae:	881a      	ldrh	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b6:	3304      	adds	r3, #4
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d10f      	bne.n	80057de <validate+0x6e>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ca:	3301      	adds	r3, #1
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fd fe18 	bl	8003404 <disk_status>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <validate+0x72>
		return FR_INVALID_OBJECT;
 80057de:	2309      	movs	r3, #9
 80057e0:	e000      	b.n	80057e4 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80057fe:	f107 0310 	add.w	r3, r7, #16
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fba7 	bl	8004f56 <get_ldnumber>
 8005808:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	2b00      	cmp	r3, #0
 800580e:	da01      	bge.n	8005814 <f_mount+0x28>
 8005810:	230b      	movs	r3, #11
 8005812:	e02f      	b.n	8005874 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005814:	4a19      	ldr	r2, [pc, #100]	; (800587c <f_mount+0x90>)
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8005824:	69b8      	ldr	r0, [r7, #24]
 8005826:	f7fd ffa5 	bl	8003774 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	490d      	ldr	r1, [pc, #52]	; (800587c <f_mount+0x90>)
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <f_mount+0x6e>
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d001      	beq.n	800585e <f_mount+0x72>
 800585a:	2300      	movs	r3, #0
 800585c:	e00a      	b.n	8005874 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800585e:	f107 0108 	add.w	r1, r7, #8
 8005862:	f107 030c 	add.w	r3, r7, #12
 8005866:	2200      	movs	r2, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fc25 	bl	80050b8 <find_volume>
 800586e:	4603      	mov	r3, r0
 8005870:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005872:	7dfb      	ldrb	r3, [r7, #23]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3720      	adds	r7, #32
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	2000004c 	.word	0x2000004c

08005880 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <f_opendir+0x14>
 8005890:	2309      	movs	r3, #9
 8005892:	e090      	b.n	80059b6 <f_opendir+0x136>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8005894:	4639      	mov	r1, r7
 8005896:	f107 0318 	add.w	r3, r7, #24
 800589a:	2200      	movs	r2, #0
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff fc0b 	bl	80050b8 <find_volume>
 80058a2:	4603      	mov	r3, r0
 80058a4:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 80058a6:	7ffb      	ldrb	r3, [r7, #31]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d17b      	bne.n	80059a4 <f_opendir+0x124>
		dp->fs = fs;
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b4:	601a      	str	r2, [r3, #0]
		INIT_BUF(*dp);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058bc:	3318      	adds	r3, #24
 80058be:	f107 020c 	add.w	r2, r7, #12
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80058ca:	4a3d      	ldr	r2, [pc, #244]	; (80059c0 <f_opendir+0x140>)
 80058cc:	601a      	str	r2, [r3, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff fac6 	bl	8004e64 <follow_path>
 80058d8:	4603      	mov	r3, r0
 80058da:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 80058dc:	7ffb      	ldrb	r3, [r7, #31]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d15b      	bne.n	800599a <f_opendir+0x11a>
			if (dp->dir) {						/* It is not the origin directory itself */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e8:	3314      	adds	r3, #20
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01d      	beq.n	800592c <f_opendir+0xac>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f6:	3314      	adds	r3, #20
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330b      	adds	r3, #11
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f003 0310 	and.w	r3, r3, #16
 8005902:	2b00      	cmp	r3, #0
 8005904:	d010      	beq.n	8005928 <f_opendir+0xa8>
					dp->sclust = ld_clust(fs, dp->dir);
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590e:	3314      	adds	r3, #20
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4619      	mov	r1, r3
 8005914:	4610      	mov	r0, r2
 8005916:	f7fe fd5f 	bl	80043d8 <ld_clust>
 800591a:	4602      	mov	r2, r0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005922:	3308      	adds	r3, #8
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e001      	b.n	800592c <f_opendir+0xac>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8005928:	2305      	movs	r3, #5
 800592a:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 800592c:	7ffb      	ldrb	r3, [r7, #31]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d133      	bne.n	800599a <f_opendir+0x11a>
				dp->id = fs->id;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005938:	3306      	adds	r3, #6
 800593a:	881a      	ldrh	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005942:	3304      	adds	r3, #4
 8005944:	801a      	strh	r2, [r3, #0]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005946:	2100      	movs	r1, #0
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7fe fb08 	bl	8003f5e <dir_sdi>
 800594e:	4603      	mov	r3, r0
 8005950:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8005952:	7ffb      	ldrb	r3, [r7, #31]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d120      	bne.n	800599a <f_opendir+0x11a>
					if (dp->sclust) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800595e:	3308      	adds	r3, #8
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d013      	beq.n	800598e <f_opendir+0x10e>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8005966:	2100      	movs	r1, #0
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fd fe43 	bl	80035f4 <inc_lock>
 800596e:	4602      	mov	r2, r0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005976:	331c      	adds	r3, #28
 8005978:	601a      	str	r2, [r3, #0]
						if (!dp->lockid)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005980:	331c      	adds	r3, #28
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d108      	bne.n	800599a <f_opendir+0x11a>
							res = FR_TOO_MANY_OPEN_FILES;
 8005988:	2312      	movs	r3, #18
 800598a:	77fb      	strb	r3, [r7, #31]
 800598c:	e005      	b.n	800599a <f_opendir+0x11a>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005994:	331c      	adds	r3, #28
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800599a:	7ffb      	ldrb	r3, [r7, #31]
 800599c:	2b04      	cmp	r3, #4
 800599e:	d101      	bne.n	80059a4 <f_opendir+0x124>
 80059a0:	2305      	movs	r3, #5
 80059a2:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 80059a4:	7ffb      	ldrb	r3, [r7, #31]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d004      	beq.n	80059b4 <f_opendir+0x134>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80059b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	2000006c 	.word	0x2000006c

080059c4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fece 	bl	8005770 <validate>
 80059d4:	4603      	mov	r3, r0
 80059d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d13e      	bne.n	8005a5c <f_readdir+0x98>
		if (!fno) {
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80059e4:	2100      	movs	r1, #0
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fe fab9 	bl	8003f5e <dir_sdi>
 80059ec:	4603      	mov	r3, r0
 80059ee:	75fb      	strb	r3, [r7, #23]
 80059f0:	e034      	b.n	8005a5c <f_readdir+0x98>
		} else {
			INIT_BUF(*dp);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f8:	3318      	adds	r3, #24
 80059fa:	f107 0208 	add.w	r2, r7, #8
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a06:	4a18      	ldr	r2, [pc, #96]	; (8005a68 <f_readdir+0xa4>)
 8005a08:	601a      	str	r2, [r3, #0]
			res = dir_read(dp, 0);			/* Read an item */
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7fe fed8 	bl	80047c2 <dir_read>
 8005a12:	4603      	mov	r3, r0
 8005a14:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d107      	bne.n	8005a2c <f_readdir+0x68>
				dp->sect = 0;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a22:	3310      	adds	r3, #16
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
				res = FR_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d114      	bne.n	8005a5c <f_readdir+0x98>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fe ff7c 	bl	8004932 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fe fb69 	bl	8004114 <dir_next>
 8005a42:	4603      	mov	r3, r0
 8005a44:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d107      	bne.n	8005a5c <f_readdir+0x98>
					dp->sect = 0;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a52:	3310      	adds	r3, #16
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]
					res = FR_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	2000006c 	.word	0x2000006c

08005a6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	4613      	mov	r3, r2
 8005a78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005a82:	4b1e      	ldr	r3, [pc, #120]	; (8005afc <FATFS_LinkDriverEx+0x90>)
 8005a84:	7a5b      	ldrb	r3, [r3, #9]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d831      	bhi.n	8005af0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005a8c:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <FATFS_LinkDriverEx+0x90>)
 8005a8e:	7a5b      	ldrb	r3, [r3, #9]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	4b19      	ldr	r3, [pc, #100]	; (8005afc <FATFS_LinkDriverEx+0x90>)
 8005a96:	2100      	movs	r1, #0
 8005a98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005a9a:	4b18      	ldr	r3, [pc, #96]	; (8005afc <FATFS_LinkDriverEx+0x90>)
 8005a9c:	7a5b      	ldrb	r3, [r3, #9]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	4a16      	ldr	r2, [pc, #88]	; (8005afc <FATFS_LinkDriverEx+0x90>)
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8005aaa:	4b14      	ldr	r3, [pc, #80]	; (8005afc <FATFS_LinkDriverEx+0x90>)
 8005aac:	7a5b      	ldrb	r3, [r3, #9]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <FATFS_LinkDriverEx+0x90>)
 8005ab4:	4413      	add	r3, r2
 8005ab6:	79fa      	ldrb	r2, [r7, #7]
 8005ab8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005aba:	4b10      	ldr	r3, [pc, #64]	; (8005afc <FATFS_LinkDriverEx+0x90>)
 8005abc:	7a5b      	ldrb	r3, [r3, #9]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	b2d1      	uxtb	r1, r2
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <FATFS_LinkDriverEx+0x90>)
 8005ac6:	7251      	strb	r1, [r2, #9]
 8005ac8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005aca:	7dbb      	ldrb	r3, [r7, #22]
 8005acc:	3330      	adds	r3, #48	; 0x30
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	223a      	movs	r2, #58	; 0x3a
 8005ada:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	3302      	adds	r3, #2
 8005ae0:	222f      	movs	r2, #47	; 0x2f
 8005ae2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	3303      	adds	r3, #3
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr
 8005afc:	2000026c 	.word	0x2000026c

08005b00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff ffac 	bl	8005a6c <FATFS_LinkDriverEx>
 8005b14:	4603      	mov	r3, r0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	6039      	str	r1, [r7, #0]
 8005b2a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b30:	d802      	bhi.n	8005b38 <ff_convert+0x18>
		c = chr;
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	81fb      	strh	r3, [r7, #14]
 8005b36:	e025      	b.n	8005b84 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	2bff      	cmp	r3, #255	; 0xff
 8005b42:	d805      	bhi.n	8005b50 <ff_convert+0x30>
 8005b44:	88fb      	ldrh	r3, [r7, #6]
 8005b46:	3b80      	subs	r3, #128	; 0x80
 8005b48:	4a11      	ldr	r2, [pc, #68]	; (8005b90 <ff_convert+0x70>)
 8005b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b4e:	e000      	b.n	8005b52 <ff_convert+0x32>
 8005b50:	2300      	movs	r3, #0
 8005b52:	81fb      	strh	r3, [r7, #14]
 8005b54:	e016      	b.n	8005b84 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8005b56:	2300      	movs	r3, #0
 8005b58:	81fb      	strh	r3, [r7, #14]
 8005b5a:	e009      	b.n	8005b70 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005b5c:	89fb      	ldrh	r3, [r7, #14]
 8005b5e:	4a0c      	ldr	r2, [pc, #48]	; (8005b90 <ff_convert+0x70>)
 8005b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d006      	beq.n	8005b78 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8005b6a:	89fb      	ldrh	r3, [r7, #14]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	81fb      	strh	r3, [r7, #14]
 8005b70:	89fb      	ldrh	r3, [r7, #14]
 8005b72:	2b7f      	cmp	r3, #127	; 0x7f
 8005b74:	d9f2      	bls.n	8005b5c <ff_convert+0x3c>
 8005b76:	e000      	b.n	8005b7a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005b78:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8005b7a:	89fb      	ldrh	r3, [r7, #14]
 8005b7c:	3380      	adds	r3, #128	; 0x80
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005b84:	89fb      	ldrh	r3, [r7, #14]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr
 8005b90:	08007f14 	.word	0x08007f14

08005b94 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	e002      	b.n	8005baa <ff_wtoupper+0x16>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	4a0f      	ldr	r2, [pc, #60]	; (8005be8 <ff_wtoupper+0x54>)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d006      	beq.n	8005bc4 <ff_wtoupper+0x30>
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <ff_wtoupper+0x54>)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d1ef      	bne.n	8005ba4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8005bc4:	4a08      	ldr	r2, [pc, #32]	; (8005be8 <ff_wtoupper+0x54>)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <ff_wtoupper+0x46>
 8005bd0:	4a06      	ldr	r2, [pc, #24]	; (8005bec <ff_wtoupper+0x58>)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd8:	e000      	b.n	8005bdc <ff_wtoupper+0x48>
 8005bda:	88fb      	ldrh	r3, [r7, #6]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	08008014 	.word	0x08008014
 8005bec:	080081f4 	.word	0x080081f4

08005bf0 <JoyStick_Init>:

extern uint16 Joystick_xy[2];
extern JOYSTICK* Joystick_Handler;

void JoyStick_Init(JOYSTICK* Joystick_PTR)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08c      	sub	sp, #48	; 0x30
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf8:	f107 0320 	add.w	r3, r7, #32
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	60da      	str	r2, [r3, #12]

	if(Joystick_PTR -> JoyStick_xGPIO == GPIOA || Joystick_PTR -> JoyStick_yGPIO == GPIOA)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a60      	ldr	r2, [pc, #384]	; (8005d8c <JoyStick_Init+0x19c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d004      	beq.n	8005c1a <JoyStick_Init+0x2a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	4a5d      	ldr	r2, [pc, #372]	; (8005d8c <JoyStick_Init+0x19c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d10c      	bne.n	8005c34 <JoyStick_Init+0x44>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005c1a:	4b5d      	ldr	r3, [pc, #372]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	4a5c      	ldr	r2, [pc, #368]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005c20:	f043 0304 	orr.w	r3, r3, #4
 8005c24:	6193      	str	r3, [r2, #24]
 8005c26:	4b5a      	ldr	r3, [pc, #360]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	e05a      	b.n	8005cea <JoyStick_Init+0xfa>
	}
	else if(Joystick_PTR -> JoyStick_xGPIO == GPIOB || Joystick_PTR -> JoyStick_yGPIO == GPIOB)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a56      	ldr	r2, [pc, #344]	; (8005d94 <JoyStick_Init+0x1a4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <JoyStick_Init+0x58>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	4a54      	ldr	r2, [pc, #336]	; (8005d94 <JoyStick_Init+0x1a4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d10c      	bne.n	8005c62 <JoyStick_Init+0x72>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005c48:	4b51      	ldr	r3, [pc, #324]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	4a50      	ldr	r2, [pc, #320]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005c4e:	f043 0308 	orr.w	r3, r3, #8
 8005c52:	6193      	str	r3, [r2, #24]
 8005c54:	4b4e      	ldr	r3, [pc, #312]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	e043      	b.n	8005cea <JoyStick_Init+0xfa>
	}
	else if(Joystick_PTR -> JoyStick_xGPIO == GPIOC || Joystick_PTR -> JoyStick_yGPIO == GPIOC)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a4c      	ldr	r2, [pc, #304]	; (8005d98 <JoyStick_Init+0x1a8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <JoyStick_Init+0x86>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	4a49      	ldr	r2, [pc, #292]	; (8005d98 <JoyStick_Init+0x1a8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d10c      	bne.n	8005c90 <JoyStick_Init+0xa0>
	{
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8005c76:	4b46      	ldr	r3, [pc, #280]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	4a45      	ldr	r2, [pc, #276]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005c7c:	f043 0310 	orr.w	r3, r3, #16
 8005c80:	6193      	str	r3, [r2, #24]
 8005c82:	4b43      	ldr	r3, [pc, #268]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	e02c      	b.n	8005cea <JoyStick_Init+0xfa>
	}
	else if (Joystick_PTR -> JoyStick_xGPIO == GPIOD || Joystick_PTR -> JoyStick_yGPIO == GPIOD)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a41      	ldr	r2, [pc, #260]	; (8005d9c <JoyStick_Init+0x1ac>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <JoyStick_Init+0xb4>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	4a3f      	ldr	r2, [pc, #252]	; (8005d9c <JoyStick_Init+0x1ac>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d10c      	bne.n	8005cbe <JoyStick_Init+0xce>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8005ca4:	4b3a      	ldr	r3, [pc, #232]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	4a39      	ldr	r2, [pc, #228]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005caa:	f043 0320 	orr.w	r3, r3, #32
 8005cae:	6193      	str	r3, [r2, #24]
 8005cb0:	4b37      	ldr	r3, [pc, #220]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	e015      	b.n	8005cea <JoyStick_Init+0xfa>
	}
	else if (Joystick_PTR -> JoyStick_xGPIO == GPIOE || Joystick_PTR -> JoyStick_yGPIO == GPIOE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a37      	ldr	r2, [pc, #220]	; (8005da0 <JoyStick_Init+0x1b0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d004      	beq.n	8005cd2 <JoyStick_Init+0xe2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4a34      	ldr	r2, [pc, #208]	; (8005da0 <JoyStick_Init+0x1b0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10b      	bne.n	8005cea <JoyStick_Init+0xfa>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8005cd2:	4b2f      	ldr	r3, [pc, #188]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	4a2e      	ldr	r2, [pc, #184]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005cd8:	f043 0320 	orr.w	r3, r3, #32
 8005cdc:	6193      	str	r3, [r2, #24]
 8005cde:	4b2c      	ldr	r3, [pc, #176]	; (8005d90 <JoyStick_Init+0x1a0>)
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
	}

	GPIO_InitStruct.Pin = Joystick_PTR -> JoyStick_xPIN;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	891b      	ldrh	r3, [r3, #8]
 8005cee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Joystick_PTR -> JoyStick_xGPIO, &GPIO_InitStruct);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f107 0220 	add.w	r2, r7, #32
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fb f9c0 	bl	8001084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Joystick_PTR -> JoyStick_yPIN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	895b      	ldrh	r3, [r3, #10]
 8005d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Joystick_PTR -> JoyStick_yGPIO, &GPIO_InitStruct);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f107 0220 	add.w	r2, r7, #32
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fb f9b3 	bl	8001084 <HAL_GPIO_Init>

	hadc.Instance = Joystick_PTR -> ADC_Instance;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	4a20      	ldr	r2, [pc, #128]	; (8005da4 <JoyStick_Init+0x1b4>)
 8005d24:	6013      	str	r3, [r2, #0]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005d26:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <JoyStick_Init+0x1b4>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	609a      	str	r2, [r3, #8]
	hadc.Init.ContinuousConvMode = DISABLE;
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <JoyStick_Init+0x1b4>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	60da      	str	r2, [r3, #12]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8005d32:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <JoyStick_Init+0x1b4>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	615a      	str	r2, [r3, #20]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005d38:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <JoyStick_Init+0x1b4>)
 8005d3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005d3e:	61da      	str	r2, [r3, #28]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d40:	4b18      	ldr	r3, [pc, #96]	; (8005da4 <JoyStick_Init+0x1b4>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	605a      	str	r2, [r3, #4]
	hadc.Init.NbrOfConversion = 1;
 8005d46:	4b17      	ldr	r3, [pc, #92]	; (8005da4 <JoyStick_Init+0x1b4>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	611a      	str	r2, [r3, #16]
	HAL_ADC_Init(&hadc);
 8005d4c:	4815      	ldr	r0, [pc, #84]	; (8005da4 <JoyStick_Init+0x1b4>)
 8005d4e:	f7fa fa83 	bl	8000258 <HAL_ADC_Init>
    sConfig.Channel = Joystick_PTR -> ADCx_CH;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	4a14      	ldr	r2, [pc, #80]	; (8005da8 <JoyStick_Init+0x1b8>)
 8005d58:	6013      	str	r3, [r2, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8005d5a:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <JoyStick_Init+0x1b8>)
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8005d60:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <JoyStick_Init+0x1b8>)
 8005d62:	2203      	movs	r2, #3
 8005d64:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8005d66:	4910      	ldr	r1, [pc, #64]	; (8005da8 <JoyStick_Init+0x1b8>)
 8005d68:	480e      	ldr	r0, [pc, #56]	; (8005da4 <JoyStick_Init+0x1b4>)
 8005d6a:	f7fa fd01 	bl	8000770 <HAL_ADC_ConfigChannel>

	if(calibrated == 0)
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <JoyStick_Init+0x1bc>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d105      	bne.n	8005d82 <JoyStick_Init+0x192>
	{
		HAL_ADCEx_Calibration_Start(&hadc);
 8005d76:	480b      	ldr	r0, [pc, #44]	; (8005da4 <JoyStick_Init+0x1b4>)
 8005d78:	f7fa fe7e 	bl	8000a78 <HAL_ADCEx_Calibration_Start>
		calibrated = 1;
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <JoyStick_Init+0x1bc>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	701a      	strb	r2, [r3, #0]
	}
}
 8005d82:	bf00      	nop
 8005d84:	3730      	adds	r7, #48	; 0x30
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40010800 	.word	0x40010800
 8005d90:	40021000 	.word	0x40021000
 8005d94:	40010c00 	.word	0x40010c00
 8005d98:	40011000 	.word	0x40011000
 8005d9c:	40011400 	.word	0x40011400
 8005da0:	40011800 	.word	0x40011800
 8005da4:	20000278 	.word	0x20000278
 8005da8:	200002a8 	.word	0x200002a8
 8005dac:	200002b4 	.word	0x200002b4

08005db0 <JoyStick_Read>:


void JoyStick_Read(JOYSTICK* Joystick_PTR, uint16_t* JoyStick_XY)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
	// Select The JoyStick Instance ADC Channel For X
	sConfig.Channel = Joystick_PTR -> ADCx_CH;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	4a1b      	ldr	r2, [pc, #108]	; (8005e2c <JoyStick_Read+0x7c>)
 8005dc0:	6013      	str	r3, [r2, #0]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8005dc2:	491a      	ldr	r1, [pc, #104]	; (8005e2c <JoyStick_Read+0x7c>)
 8005dc4:	481a      	ldr	r0, [pc, #104]	; (8005e30 <JoyStick_Read+0x80>)
 8005dc6:	f7fa fcd3 	bl	8000770 <HAL_ADC_ConfigChannel>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc);
 8005dca:	4819      	ldr	r0, [pc, #100]	; (8005e30 <JoyStick_Read+0x80>)
 8005dcc:	f7fa fb1c 	bl	8000408 <HAL_ADC_Start>
	// Poll ADC1 Peripheral & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc, 1);
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	4817      	ldr	r0, [pc, #92]	; (8005e30 <JoyStick_Read+0x80>)
 8005dd4:	f7fa fbc6 	bl	8000564 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result Write It To JoyStick X
	Joystick_PTR -> Joystick_xyValues[0] = HAL_ADC_GetValue(&hadc);
 8005dd8:	4815      	ldr	r0, [pc, #84]	; (8005e30 <JoyStick_Read+0x80>)
 8005dda:	f7fa fcbd 	bl	8000758 <HAL_ADC_GetValue>
 8005dde:	4603      	mov	r3, r0
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	831a      	strh	r2, [r3, #24]
	JoyStick_XY[0] = Joystick_PTR -> Joystick_xyValues[0];
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	8b1a      	ldrh	r2, [r3, #24]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	801a      	strh	r2, [r3, #0]

	// Select The JoyStick Instance ADC Channel For Y
	sConfig.Channel = Joystick_PTR -> ADCy_CH;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	4a0e      	ldr	r2, [pc, #56]	; (8005e2c <JoyStick_Read+0x7c>)
 8005df4:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8005df6:	490d      	ldr	r1, [pc, #52]	; (8005e2c <JoyStick_Read+0x7c>)
 8005df8:	480d      	ldr	r0, [pc, #52]	; (8005e30 <JoyStick_Read+0x80>)
 8005dfa:	f7fa fcb9 	bl	8000770 <HAL_ADC_ConfigChannel>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc);
 8005dfe:	480c      	ldr	r0, [pc, #48]	; (8005e30 <JoyStick_Read+0x80>)
 8005e00:	f7fa fb02 	bl	8000408 <HAL_ADC_Start>
	// Poll ADC1 Peripheral & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc, 1);
 8005e04:	2101      	movs	r1, #1
 8005e06:	480a      	ldr	r0, [pc, #40]	; (8005e30 <JoyStick_Read+0x80>)
 8005e08:	f7fa fbac 	bl	8000564 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result Write It To JoyStick Y
	Joystick_PTR -> Joystick_xyValues[1] = HAL_ADC_GetValue(&hadc);
 8005e0c:	4808      	ldr	r0, [pc, #32]	; (8005e30 <JoyStick_Read+0x80>)
 8005e0e:	f7fa fca3 	bl	8000758 <HAL_ADC_GetValue>
 8005e12:	4603      	mov	r3, r0
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	835a      	strh	r2, [r3, #26]
	JoyStick_XY[1] = Joystick_PTR -> Joystick_xyValues[1];
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	3302      	adds	r3, #2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	8b52      	ldrh	r2, [r2, #26]
 8005e22:	801a      	strh	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	200002a8 	.word	0x200002a8
 8005e30:	20000278 	.word	0x20000278

08005e34 <JoyStick_ReadButton>:

Joystick_PinState JoyStick_ReadButton(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(Joystick_Button_GPIO_Port, Joystick_Button_Pin) == GPIO_PIN_RESET)
 8005e38:	2101      	movs	r1, #1
 8005e3a:	4805      	ldr	r0, [pc, #20]	; (8005e50 <JoyStick_ReadButton+0x1c>)
 8005e3c:	f7fb faaa 	bl	8001394 <HAL_GPIO_ReadPin>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <JoyStick_ReadButton+0x16>
	{
		return JOYSTICK_PIN_RESET;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e000      	b.n	8005e4c <JoyStick_ReadButton+0x18>
	}
	else
	{
		return JOYSTICK_PIN_SET;
 8005e4a:	2301      	movs	r3, #1
	}
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40010800 	.word	0x40010800

08005e54 <waitForJoystickMid>:

void waitForJoystickMid(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
	while(1) { // wait for the joystick to be release (back to mid position)
		JoyStick_Read(Joystick_Handler, Joystick_xy);
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <waitForJoystickMid+0x40>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	490e      	ldr	r1, [pc, #56]	; (8005e98 <waitForJoystickMid+0x44>)
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff ffa6 	bl	8005db0 <JoyStick_Read>
		if (JoystickIsReleased(Joystick_xy)) {break;}
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <waitForJoystickMid+0x44>)
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e6c:	d9f4      	bls.n	8005e58 <waitForJoystickMid+0x4>
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <waitForJoystickMid+0x44>)
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8005e76:	d2ef      	bcs.n	8005e58 <waitForJoystickMid+0x4>
 8005e78:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <waitForJoystickMid+0x44>)
 8005e7a:	885b      	ldrh	r3, [r3, #2]
 8005e7c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e80:	d9ea      	bls.n	8005e58 <waitForJoystickMid+0x4>
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <waitForJoystickMid+0x44>)
 8005e84:	885b      	ldrh	r3, [r3, #2]
 8005e86:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8005e8a:	d300      	bcc.n	8005e8e <waitForJoystickMid+0x3a>
		JoyStick_Read(Joystick_Handler, Joystick_xy);
 8005e8c:	e7e4      	b.n	8005e58 <waitForJoystickMid+0x4>
		if (JoystickIsReleased(Joystick_xy)) {break;}
 8005e8e:	bf00      	nop
	}
}
 8005e90:	bf00      	nop
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000010 	.word	0x20000010
 8005e98:	200037d4 	.word	0x200037d4

08005e9c <string_length>:

static uint8 string_length(sint8 str[]);


static uint8 string_length(sint8 str[])
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
	uint8 count;
	/* count the string start from element 0 until the element before the NULL terminator */
	for(count = 0; str[count] != '\0'; ++count);
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	73fb      	strb	r3, [r7, #15]
 8005ea8:	e002      	b.n	8005eb0 <string_length+0x14>
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	3301      	adds	r3, #1
 8005eae:	73fb      	strb	r3, [r7, #15]
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1f6      	bne.n	8005eaa <string_length+0xe>
	return count;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr

08005ec8 <OLED_Init>:

Std_ReturnType OLED_Init(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
	Std_ReturnType return_type = E_NOT_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	71fb      	strb	r3, [r7, #7]
	if(SSD1306_Init() == 1)
 8005ed2:	f001 f9f7 	bl	80072c4 <SSD1306_Init>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <OLED_Init+0x18>
	{
		return_type = E_OK;
 8005edc:	2301      	movs	r3, #1
 8005ede:	71fb      	strb	r3, [r7, #7]
	}

	return return_type;
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <OLED_setTextDisplay>:

void OLED_setTextDisplay(sint8* line1, sint8* line2, sint8* line3, sint8* line4)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
	if(*line1)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d019      	beq.n	8005f36 <OLED_setTextDisplay+0x4a>
	{
		SSD1306_GotoXY(0, 0);
 8005f02:	2100      	movs	r1, #0
 8005f04:	2000      	movs	r0, #0
 8005f06:	f001 fb45 	bl	8007594 <SSD1306_GotoXY>
		SSD1306_Puts((sint8*)line1, &Font_11x18, 1);
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	4939      	ldr	r1, [pc, #228]	; (8005ff4 <OLED_setTextDisplay+0x108>)
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f001 fbd6 	bl	80076c0 <SSD1306_Puts>
		for (uint8 count = string_length(line1); count < 20; count++)
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff ffc1 	bl	8005e9c <string_length>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	75fb      	strb	r3, [r7, #23]
 8005f1e:	e007      	b.n	8005f30 <OLED_setTextDisplay+0x44>
		{
			SSD1306_Putc(' ', &Font_11x18, 1);
 8005f20:	2201      	movs	r2, #1
 8005f22:	4934      	ldr	r1, [pc, #208]	; (8005ff4 <OLED_setTextDisplay+0x108>)
 8005f24:	2020      	movs	r0, #32
 8005f26:	f001 fb4b 	bl	80075c0 <SSD1306_Putc>
		for (uint8 count = string_length(line1); count < 20; count++)
 8005f2a:	7dfb      	ldrb	r3, [r7, #23]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	75fb      	strb	r3, [r7, #23]
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	2b13      	cmp	r3, #19
 8005f34:	d9f4      	bls.n	8005f20 <OLED_setTextDisplay+0x34>
		}
	}
	if(*line2)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d019      	beq.n	8005f72 <OLED_setTextDisplay+0x86>
	{
		SSD1306_GotoXY(0, 1);
 8005f3e:	2101      	movs	r1, #1
 8005f40:	2000      	movs	r0, #0
 8005f42:	f001 fb27 	bl	8007594 <SSD1306_GotoXY>
		SSD1306_Puts((sint8*)line2, &Font_11x18, 1);
 8005f46:	2201      	movs	r2, #1
 8005f48:	492a      	ldr	r1, [pc, #168]	; (8005ff4 <OLED_setTextDisplay+0x108>)
 8005f4a:	68b8      	ldr	r0, [r7, #8]
 8005f4c:	f001 fbb8 	bl	80076c0 <SSD1306_Puts>
		for (uint8 count = string_length(line2); count < 20; count++)
 8005f50:	68b8      	ldr	r0, [r7, #8]
 8005f52:	f7ff ffa3 	bl	8005e9c <string_length>
 8005f56:	4603      	mov	r3, r0
 8005f58:	75bb      	strb	r3, [r7, #22]
 8005f5a:	e007      	b.n	8005f6c <OLED_setTextDisplay+0x80>
		{
			SSD1306_Putc(' ', &Font_11x18, 1);
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	4925      	ldr	r1, [pc, #148]	; (8005ff4 <OLED_setTextDisplay+0x108>)
 8005f60:	2020      	movs	r0, #32
 8005f62:	f001 fb2d 	bl	80075c0 <SSD1306_Putc>
		for (uint8 count = string_length(line2); count < 20; count++)
 8005f66:	7dbb      	ldrb	r3, [r7, #22]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	75bb      	strb	r3, [r7, #22]
 8005f6c:	7dbb      	ldrb	r3, [r7, #22]
 8005f6e:	2b13      	cmp	r3, #19
 8005f70:	d9f4      	bls.n	8005f5c <OLED_setTextDisplay+0x70>
		}
	}
	if(*line3)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d019      	beq.n	8005fae <OLED_setTextDisplay+0xc2>
	{
		SSD1306_GotoXY(0, 2);
 8005f7a:	2102      	movs	r1, #2
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	f001 fb09 	bl	8007594 <SSD1306_GotoXY>
		SSD1306_Puts((sint8*)line3, &Font_11x18, 1);
 8005f82:	2201      	movs	r2, #1
 8005f84:	491b      	ldr	r1, [pc, #108]	; (8005ff4 <OLED_setTextDisplay+0x108>)
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f001 fb9a 	bl	80076c0 <SSD1306_Puts>
		for (uint8 count = string_length(line3); count < 20; count++)
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff ff85 	bl	8005e9c <string_length>
 8005f92:	4603      	mov	r3, r0
 8005f94:	757b      	strb	r3, [r7, #21]
 8005f96:	e007      	b.n	8005fa8 <OLED_setTextDisplay+0xbc>
		{
			SSD1306_Putc(' ', &Font_11x18, 1);
 8005f98:	2201      	movs	r2, #1
 8005f9a:	4916      	ldr	r1, [pc, #88]	; (8005ff4 <OLED_setTextDisplay+0x108>)
 8005f9c:	2020      	movs	r0, #32
 8005f9e:	f001 fb0f 	bl	80075c0 <SSD1306_Putc>
		for (uint8 count = string_length(line3); count < 20; count++)
 8005fa2:	7d7b      	ldrb	r3, [r7, #21]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	757b      	strb	r3, [r7, #21]
 8005fa8:	7d7b      	ldrb	r3, [r7, #21]
 8005faa:	2b13      	cmp	r3, #19
 8005fac:	d9f4      	bls.n	8005f98 <OLED_setTextDisplay+0xac>
		}
	}
	if(*line4)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d019      	beq.n	8005fea <OLED_setTextDisplay+0xfe>
	{
		SSD1306_GotoXY(0, 3);
 8005fb6:	2103      	movs	r1, #3
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f001 faeb 	bl	8007594 <SSD1306_GotoXY>
		SSD1306_Puts((sint8*)line4, &Font_11x18, 1);
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	490c      	ldr	r1, [pc, #48]	; (8005ff4 <OLED_setTextDisplay+0x108>)
 8005fc2:	6838      	ldr	r0, [r7, #0]
 8005fc4:	f001 fb7c 	bl	80076c0 <SSD1306_Puts>
		for (uint8 count = string_length(line4); count < 20; count++)
 8005fc8:	6838      	ldr	r0, [r7, #0]
 8005fca:	f7ff ff67 	bl	8005e9c <string_length>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	753b      	strb	r3, [r7, #20]
 8005fd2:	e007      	b.n	8005fe4 <OLED_setTextDisplay+0xf8>
		{
			SSD1306_Putc(' ', &Font_11x18, 1);
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	4907      	ldr	r1, [pc, #28]	; (8005ff4 <OLED_setTextDisplay+0x108>)
 8005fd8:	2020      	movs	r0, #32
 8005fda:	f001 faf1 	bl	80075c0 <SSD1306_Putc>
		for (uint8 count = string_length(line4); count < 20; count++)
 8005fde:	7d3b      	ldrb	r3, [r7, #20]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	753b      	strb	r3, [r7, #20]
 8005fe4:	7d3b      	ldrb	r3, [r7, #20]
 8005fe6:	2b13      	cmp	r3, #19
 8005fe8:	d9f4      	bls.n	8005fd4 <OLED_setTextDisplay+0xe8>
		}
	}
}
 8005fea:	bf00      	nop
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000008 	.word	0x20000008

08005ff8 <OLED_setTextRow>:

void OLED_setTextRow(sint8* line, uint8 row)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
	SSD1306_GotoXY(0, row);
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	b29b      	uxth	r3, r3
 8006008:	4619      	mov	r1, r3
 800600a:	2000      	movs	r0, #0
 800600c:	f001 fac2 	bl	8007594 <SSD1306_GotoXY>
	SSD1306_Puts((sint8*)line, &Font_11x18, 1);
 8006010:	2201      	movs	r2, #1
 8006012:	490d      	ldr	r1, [pc, #52]	; (8006048 <OLED_setTextRow+0x50>)
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 fb53 	bl	80076c0 <SSD1306_Puts>
	for (uint8 count = string_length(line); count < 20; count++)
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff ff3e 	bl	8005e9c <string_length>
 8006020:	4603      	mov	r3, r0
 8006022:	73fb      	strb	r3, [r7, #15]
 8006024:	e007      	b.n	8006036 <OLED_setTextRow+0x3e>
	{
		SSD1306_Putc(' ', &Font_11x18, 1);
 8006026:	2201      	movs	r2, #1
 8006028:	4907      	ldr	r1, [pc, #28]	; (8006048 <OLED_setTextRow+0x50>)
 800602a:	2020      	movs	r0, #32
 800602c:	f001 fac8 	bl	80075c0 <SSD1306_Putc>
	for (uint8 count = string_length(line); count < 20; count++)
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	3301      	adds	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	2b13      	cmp	r3, #19
 800603a:	d9f4      	bls.n	8006026 <OLED_setTextRow+0x2e>
	}
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000008 	.word	0x20000008

0800604c <OLED_Clear>:

void OLED_Clear(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8006050:	f001 fb5b 	bl	800770a <SSD1306_Clear>
}
 8006054:	bf00      	nop
 8006056:	bd80      	pop	{r7, pc}

08006058 <SD_init>:
extern UINT byteswritten, bytesread;


// SD card init function
Std_ReturnType SD_init(GPIO_TypeDef * SD_CS_PORT, uint16_t SD_CS_PIN)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	807b      	strh	r3, [r7, #2]
	Std_ReturnType return_type = E_NOT_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	73fb      	strb	r3, [r7, #15]
	uint8 ErrorCount = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	73bb      	strb	r3, [r7, #14]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800606c:	887b      	ldrh	r3, [r7, #2]
 800606e:	2200      	movs	r2, #0
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fb f9a5 	bl	80013c2 <HAL_GPIO_WritePin>
	MX_FATFS_Init();
 8006078:	f000 f87a 	bl	8006170 <MX_FATFS_Init>
	do
	{
		return_type = f_mount(&fs , "" , 0);
 800607c:	2200      	movs	r2, #0
 800607e:	490e      	ldr	r1, [pc, #56]	; (80060b8 <SD_init+0x60>)
 8006080:	480e      	ldr	r0, [pc, #56]	; (80060bc <SD_init+0x64>)
 8006082:	f7ff fbb3 	bl	80057ec <f_mount>
 8006086:	4603      	mov	r3, r0
 8006088:	73fb      	strb	r3, [r7, #15]
		ErrorCount ++;
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	3301      	adds	r3, #1
 800608e:	73bb      	strb	r3, [r7, #14]
	}while(return_type != FR_OK && ErrorCount < 5);
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <SD_init+0x44>
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	2b04      	cmp	r3, #4
 800609a:	d9ef      	bls.n	800607c <SD_init+0x24>

	if(return_type == FR_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d102      	bne.n	80060a8 <SD_init+0x50>
		return_type = E_OK;
 80060a2:	2301      	movs	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
 80060a6:	e001      	b.n	80060ac <SD_init+0x54>
	else
		return_type = E_NOT_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]

	return return_type;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	08007e08 	.word	0x08007e08
 80060bc:	2000274c 	.word	0x2000274c

080060c0 <SD_NextFileDirectory>:

}

// SD card test Read function
Std_ReturnType SD_NextFileDirectory(sint8* path)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	f107 0318 	add.w	r3, r7, #24
 80060ce:	3b14      	subs	r3, #20
 80060d0:	6018      	str	r0, [r3, #0]
	Std_ReturnType return_type = E_NOT_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80060d8:	f102 0217 	add.w	r2, r2, #23
 80060dc:	7013      	strb	r3, [r2, #0]
	DIR directory;

	if(f_opendir(&directory, path) != FR_OK) {return return_type;}
 80060de:	f107 0318 	add.w	r3, r7, #24
 80060e2:	3b14      	subs	r3, #20
 80060e4:	f107 0218 	add.w	r2, r7, #24
 80060e8:	3a0c      	subs	r2, #12
 80060ea:	6819      	ldr	r1, [r3, #0]
 80060ec:	4610      	mov	r0, r2
 80060ee:	f7ff fbc7 	bl	8005880 <f_opendir>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <SD_NextFileDirectory+0x44>
 80060f8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80060fc:	f103 0317 	add.w	r3, r3, #23
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	e02b      	b.n	800615c <SD_NextFileDirectory+0x9c>
	if(f_readdir(&directory, &fileInfo) != FR_OK || fileInfo.fname[0] == '\0') {return return_type;}
 8006104:	f107 0318 	add.w	r3, r7, #24
 8006108:	3b0c      	subs	r3, #12
 800610a:	4917      	ldr	r1, [pc, #92]	; (8006168 <SD_NextFileDirectory+0xa8>)
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fc59 	bl	80059c4 <f_readdir>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d103      	bne.n	8006120 <SD_NextFileDirectory+0x60>
 8006118:	4b13      	ldr	r3, [pc, #76]	; (8006168 <SD_NextFileDirectory+0xa8>)
 800611a:	7a5b      	ldrb	r3, [r3, #9]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <SD_NextFileDirectory+0x6c>
 8006120:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006124:	f103 0317 	add.w	r3, r3, #23
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	e017      	b.n	800615c <SD_NextFileDirectory+0x9c>

#if _USE_LFN
	path = *fileInfo.lfname ? fileInfo.lfname : fileInfo.fname;
 800612c:	4b0e      	ldr	r3, [pc, #56]	; (8006168 <SD_NextFileDirectory+0xa8>)
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <SD_NextFileDirectory+0x7c>
 8006136:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <SD_NextFileDirectory+0xa8>)
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	e000      	b.n	800613e <SD_NextFileDirectory+0x7e>
 800613c:	4a0b      	ldr	r2, [pc, #44]	; (800616c <SD_NextFileDirectory+0xac>)
 800613e:	f107 0318 	add.w	r3, r7, #24
 8006142:	3b14      	subs	r3, #20
 8006144:	601a      	str	r2, [r3, #0]
#else
	path = fileInfo.fname;
#endif

	return_type = E_OK;
 8006146:	2301      	movs	r3, #1
 8006148:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800614c:	f102 0217 	add.w	r2, r2, #23
 8006150:	7013      	strb	r3, [r2, #0]
	return return_type;  // success
 8006152:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006156:	f103 0317 	add.w	r3, r3, #23
 800615a:	781b      	ldrb	r3, [r3, #0]
}
 800615c:	4618      	mov	r0, r3
 800615e:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	2000272c 	.word	0x2000272c
 800616c:	20002735 	.word	0x20002735

08006170 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006174:	4904      	ldr	r1, [pc, #16]	; (8006188 <MX_FATFS_Init+0x18>)
 8006176:	4805      	ldr	r0, [pc, #20]	; (800618c <MX_FATFS_Init+0x1c>)
 8006178:	f7ff fcc2 	bl	8005b00 <FATFS_LinkDriver>
 800617c:	4603      	mov	r3, r0
 800617e:	461a      	mov	r2, r3
 8006180:	4b03      	ldr	r3, [pc, #12]	; (8006190 <MX_FATFS_Init+0x20>)
 8006182:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006184:	bf00      	nop
 8006186:	bd80      	pop	{r7, pc}
 8006188:	200006c4 	.word	0x200006c4
 800618c:	2000001c 	.word	0x2000001c
 8006190:	200006c8 	.word	0x200006c8

08006194 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8006198:	2200      	movs	r2, #0
 800619a:	2110      	movs	r1, #16
 800619c:	4802      	ldr	r0, [pc, #8]	; (80061a8 <SELECT+0x14>)
 800619e:	f7fb f910 	bl	80013c2 <HAL_GPIO_WritePin>
}
 80061a2:	bf00      	nop
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40010800 	.word	0x40010800

080061ac <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80061b0:	2201      	movs	r2, #1
 80061b2:	2110      	movs	r1, #16
 80061b4:	4802      	ldr	r0, [pc, #8]	; (80061c0 <DESELECT+0x14>)
 80061b6:	f7fb f904 	bl	80013c2 <HAL_GPIO_WritePin>
}
 80061ba:	bf00      	nop
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40010800 	.word	0x40010800

080061c4 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80061ce:	bf00      	nop
 80061d0:	4808      	ldr	r0, [pc, #32]	; (80061f4 <SPI_TxByte+0x30>)
 80061d2:	f7fc feb8 	bl	8002f46 <HAL_SPI_GetState>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d1f9      	bne.n	80061d0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80061dc:	1df9      	adds	r1, r7, #7
 80061de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061e2:	2201      	movs	r2, #1
 80061e4:	4803      	ldr	r0, [pc, #12]	; (80061f4 <SPI_TxByte+0x30>)
 80061e6:	f7fc fbd1 	bl	800298c <HAL_SPI_Transmit>
}
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	200048c4 	.word	0x200048c4

080061f8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80061fe:	23ff      	movs	r3, #255	; 0xff
 8006200:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8006206:	bf00      	nop
 8006208:	4809      	ldr	r0, [pc, #36]	; (8006230 <SPI_RxByte+0x38>)
 800620a:	f7fc fe9c 	bl	8002f46 <HAL_SPI_GetState>
 800620e:	4603      	mov	r3, r0
 8006210:	2b01      	cmp	r3, #1
 8006212:	d1f9      	bne.n	8006208 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8006214:	1dba      	adds	r2, r7, #6
 8006216:	1df9      	adds	r1, r7, #7
 8006218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	2301      	movs	r3, #1
 8006220:	4803      	ldr	r0, [pc, #12]	; (8006230 <SPI_RxByte+0x38>)
 8006222:	f7fc fcf0 	bl	8002c06 <HAL_SPI_TransmitReceive>

  return data;
 8006226:	79bb      	ldrb	r3, [r7, #6]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	200048c4 	.word	0x200048c4

08006234 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800623c:	f7ff ffdc 	bl	80061f8 <SPI_RxByte>
 8006240:	4603      	mov	r3, r0
 8006242:	461a      	mov	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	701a      	strb	r2, [r3, #0]
}
 8006248:	bf00      	nop
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8006256:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <SD_ReadyWait+0x34>)
 8006258:	2232      	movs	r2, #50	; 0x32
 800625a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800625c:	f7ff ffcc 	bl	80061f8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8006260:	f7ff ffca 	bl	80061f8 <SPI_RxByte>
 8006264:	4603      	mov	r3, r0
 8006266:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	2bff      	cmp	r3, #255	; 0xff
 800626c:	d004      	beq.n	8006278 <SD_ReadyWait+0x28>
 800626e:	4b05      	ldr	r3, [pc, #20]	; (8006284 <SD_ReadyWait+0x34>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f3      	bne.n	8006260 <SD_ReadyWait+0x10>

  return res;
 8006278:	79fb      	ldrb	r3, [r7, #7]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20004921 	.word	0x20004921

08006288 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800628e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006292:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8006294:	f7ff ff8a 	bl	80061ac <DESELECT>

  for(int i = 0; i < 10; i++)
 8006298:	2300      	movs	r3, #0
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	e005      	b.n	80062aa <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800629e:	20ff      	movs	r0, #255	; 0xff
 80062a0:	f7ff ff90 	bl	80061c4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	3301      	adds	r3, #1
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b09      	cmp	r3, #9
 80062ae:	ddf6      	ble.n	800629e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80062b0:	f7ff ff70 	bl	8006194 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80062b4:	2340      	movs	r3, #64	; 0x40
 80062b6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80062c8:	2395      	movs	r3, #149	; 0x95
 80062ca:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	e009      	b.n	80062e6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80062d2:	1d3a      	adds	r2, r7, #4
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff ff72 	bl	80061c4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	ddf2      	ble.n	80062d2 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80062ec:	e002      	b.n	80062f4 <SD_PowerOn+0x6c>
  {
    Count--;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80062f4:	f7ff ff80 	bl	80061f8 <SPI_RxByte>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d002      	beq.n	8006304 <SD_PowerOn+0x7c>
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f4      	bne.n	80062ee <SD_PowerOn+0x66>
  }

  DESELECT();
 8006304:	f7ff ff52 	bl	80061ac <DESELECT>
  SPI_TxByte(0XFF);
 8006308:	20ff      	movs	r0, #255	; 0xff
 800630a:	f7ff ff5b 	bl	80061c4 <SPI_TxByte>

  PowerFlag = 1;
 800630e:	4b03      	ldr	r3, [pc, #12]	; (800631c <SD_PowerOn+0x94>)
 8006310:	2201      	movs	r2, #1
 8006312:	701a      	strb	r2, [r3, #0]
}
 8006314:	bf00      	nop
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	200002b6 	.word	0x200002b6

08006320 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8006324:	4b03      	ldr	r3, [pc, #12]	; (8006334 <SD_PowerOff+0x14>)
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
}
 800632a:	bf00      	nop
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	200002b6 	.word	0x200002b6

08006338 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800633c:	4b02      	ldr	r3, [pc, #8]	; (8006348 <SD_CheckPower+0x10>)
 800633e:	781b      	ldrb	r3, [r3, #0]
}
 8006340:	4618      	mov	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	bc80      	pop	{r7}
 8006346:	4770      	bx	lr
 8006348:	200002b6 	.word	0x200002b6

0800634c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8006356:	4b17      	ldr	r3, [pc, #92]	; (80063b4 <SD_RxDataBlock+0x68>)
 8006358:	220a      	movs	r2, #10
 800635a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800635c:	f7ff ff4c 	bl	80061f8 <SPI_RxByte>
 8006360:	4603      	mov	r3, r0
 8006362:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2bff      	cmp	r3, #255	; 0xff
 8006368:	d104      	bne.n	8006374 <SD_RxDataBlock+0x28>
 800636a:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <SD_RxDataBlock+0x68>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1f3      	bne.n	800635c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2bfe      	cmp	r3, #254	; 0xfe
 8006378:	d001      	beq.n	800637e <SD_RxDataBlock+0x32>
    return FALSE;
 800637a:	2300      	movs	r3, #0
 800637c:	e016      	b.n	80063ac <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff ff55 	bl	8006234 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff ff4f 	bl	8006234 <SPI_RxBytePtr>
  } while(btr -= 2);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	3b02      	subs	r3, #2
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1ed      	bne.n	800637e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80063a2:	f7ff ff29 	bl	80061f8 <SPI_RxByte>
  SPI_RxByte();
 80063a6:	f7ff ff27 	bl	80061f8 <SPI_RxByte>

  return TRUE;
 80063aa:	2301      	movs	r3, #1
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	20004922 	.word	0x20004922

080063b8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80063c8:	f7ff ff42 	bl	8006250 <SD_ReadyWait>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2bff      	cmp	r3, #255	; 0xff
 80063d0:	d001      	beq.n	80063d6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	e040      	b.n	8006458 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fef3 	bl	80061c4 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	2bfd      	cmp	r3, #253	; 0xfd
 80063e2:	d031      	beq.n	8006448 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	607a      	str	r2, [r7, #4]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff fee7 	bl	80061c4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff fee0 	bl	80061c4 <SPI_TxByte>
    } while (--wc);
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	3b01      	subs	r3, #1
 8006408:	73bb      	strb	r3, [r7, #14]
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1eb      	bne.n	80063e8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8006410:	f7ff fef2 	bl	80061f8 <SPI_RxByte>
    SPI_RxByte();
 8006414:	f7ff fef0 	bl	80061f8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8006418:	e00b      	b.n	8006432 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800641a:	f7ff feed 	bl	80061f8 <SPI_RxByte>
 800641e:	4603      	mov	r3, r0
 8006420:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	f003 031f 	and.w	r3, r3, #31
 8006428:	2b05      	cmp	r3, #5
 800642a:	d006      	beq.n	800643a <SD_TxDataBlock+0x82>
        break;

      i++;
 800642c:	7b7b      	ldrb	r3, [r7, #13]
 800642e:	3301      	adds	r3, #1
 8006430:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8006432:	7b7b      	ldrb	r3, [r7, #13]
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d9f0      	bls.n	800641a <SD_TxDataBlock+0x62>
 8006438:	e000      	b.n	800643c <SD_TxDataBlock+0x84>
        break;
 800643a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800643c:	bf00      	nop
 800643e:	f7ff fedb 	bl	80061f8 <SPI_RxByte>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0fa      	beq.n	800643e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	f003 031f 	and.w	r3, r3, #31
 800644e:	2b05      	cmp	r3, #5
 8006450:	d101      	bne.n	8006456 <SD_TxDataBlock+0x9e>
    return TRUE;
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	4603      	mov	r3, r0
 8006468:	6039      	str	r1, [r7, #0]
 800646a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800646c:	f7ff fef0 	bl	8006250 <SD_ReadyWait>
 8006470:	4603      	mov	r3, r0
 8006472:	2bff      	cmp	r3, #255	; 0xff
 8006474:	d001      	beq.n	800647a <SD_SendCmd+0x1a>
    return 0xFF;
 8006476:	23ff      	movs	r3, #255	; 0xff
 8006478:	e040      	b.n	80064fc <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fea1 	bl	80061c4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	0e1b      	lsrs	r3, r3, #24
 8006486:	b2db      	uxtb	r3, r3
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff fe9b 	bl	80061c4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	0c1b      	lsrs	r3, r3, #16
 8006492:	b2db      	uxtb	r3, r3
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff fe95 	bl	80061c4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	0a1b      	lsrs	r3, r3, #8
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fe8f 	bl	80061c4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff fe8a 	bl	80061c4 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80064b4:	79fb      	ldrb	r3, [r7, #7]
 80064b6:	2b40      	cmp	r3, #64	; 0x40
 80064b8:	d101      	bne.n	80064be <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80064ba:	2395      	movs	r3, #149	; 0x95
 80064bc:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	2b48      	cmp	r3, #72	; 0x48
 80064c2:	d101      	bne.n	80064c8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80064c4:	2387      	movs	r3, #135	; 0x87
 80064c6:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff fe7a 	bl	80061c4 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	2b4c      	cmp	r3, #76	; 0x4c
 80064d4:	d101      	bne.n	80064da <SD_SendCmd+0x7a>
    SPI_RxByte();
 80064d6:	f7ff fe8f 	bl	80061f8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80064da:	230a      	movs	r3, #10
 80064dc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80064de:	f7ff fe8b 	bl	80061f8 <SPI_RxByte>
 80064e2:	4603      	mov	r3, r0
 80064e4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80064e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da05      	bge.n	80064fa <SD_SendCmd+0x9a>
 80064ee:	7bbb      	ldrb	r3, [r7, #14]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	73bb      	strb	r3, [r7, #14]
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f1      	bne.n	80064de <SD_SendCmd+0x7e>

  return res;
 80064fa:	7b7b      	ldrb	r3, [r7, #13]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8006504:	b590      	push	{r4, r7, lr}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8006514:	2301      	movs	r3, #1
 8006516:	e0d5      	b.n	80066c4 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8006518:	4b6c      	ldr	r3, [pc, #432]	; (80066cc <SD_disk_initialize+0x1c8>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <SD_disk_initialize+0x2a>
    return Stat;
 8006526:	4b69      	ldr	r3, [pc, #420]	; (80066cc <SD_disk_initialize+0x1c8>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e0ca      	b.n	80066c4 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800652e:	f7ff feab 	bl	8006288 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8006532:	f7ff fe2f 	bl	8006194 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800653a:	2100      	movs	r1, #0
 800653c:	2040      	movs	r0, #64	; 0x40
 800653e:	f7ff ff8f 	bl	8006460 <SD_SendCmd>
 8006542:	4603      	mov	r3, r0
 8006544:	2b01      	cmp	r3, #1
 8006546:	f040 80a5 	bne.w	8006694 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800654a:	4b61      	ldr	r3, [pc, #388]	; (80066d0 <SD_disk_initialize+0x1cc>)
 800654c:	2264      	movs	r2, #100	; 0x64
 800654e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8006550:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006554:	2048      	movs	r0, #72	; 0x48
 8006556:	f7ff ff83 	bl	8006460 <SD_SendCmd>
 800655a:	4603      	mov	r3, r0
 800655c:	2b01      	cmp	r3, #1
 800655e:	d158      	bne.n	8006612 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]
 8006564:	e00c      	b.n	8006580 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8006566:	7bfc      	ldrb	r4, [r7, #15]
 8006568:	f7ff fe46 	bl	80061f8 <SPI_RxByte>
 800656c:	4603      	mov	r3, r0
 800656e:	461a      	mov	r2, r3
 8006570:	f107 0310 	add.w	r3, r7, #16
 8006574:	4423      	add	r3, r4
 8006576:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	3301      	adds	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	2b03      	cmp	r3, #3
 8006584:	d9ef      	bls.n	8006566 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8006586:	7abb      	ldrb	r3, [r7, #10]
 8006588:	2b01      	cmp	r3, #1
 800658a:	f040 8083 	bne.w	8006694 <SD_disk_initialize+0x190>
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	2baa      	cmp	r3, #170	; 0xaa
 8006592:	d17f      	bne.n	8006694 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8006594:	2100      	movs	r1, #0
 8006596:	2077      	movs	r0, #119	; 0x77
 8006598:	f7ff ff62 	bl	8006460 <SD_SendCmd>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d807      	bhi.n	80065b2 <SD_disk_initialize+0xae>
 80065a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80065a6:	2069      	movs	r0, #105	; 0x69
 80065a8:	f7ff ff5a 	bl	8006460 <SD_SendCmd>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80065b2:	4b47      	ldr	r3, [pc, #284]	; (80066d0 <SD_disk_initialize+0x1cc>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1eb      	bne.n	8006594 <SD_disk_initialize+0x90>
 80065bc:	e000      	b.n	80065c0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80065be:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80065c0:	4b43      	ldr	r3, [pc, #268]	; (80066d0 <SD_disk_initialize+0x1cc>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d064      	beq.n	8006694 <SD_disk_initialize+0x190>
 80065ca:	2100      	movs	r1, #0
 80065cc:	207a      	movs	r0, #122	; 0x7a
 80065ce:	f7ff ff47 	bl	8006460 <SD_SendCmd>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d15d      	bne.n	8006694 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]
 80065dc:	e00c      	b.n	80065f8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80065de:	7bfc      	ldrb	r4, [r7, #15]
 80065e0:	f7ff fe0a 	bl	80061f8 <SPI_RxByte>
 80065e4:	4603      	mov	r3, r0
 80065e6:	461a      	mov	r2, r3
 80065e8:	f107 0310 	add.w	r3, r7, #16
 80065ec:	4423      	add	r3, r4
 80065ee:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	3301      	adds	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d9ef      	bls.n	80065de <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80065fe:	7a3b      	ldrb	r3, [r7, #8]
 8006600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <SD_disk_initialize+0x108>
 8006608:	2306      	movs	r3, #6
 800660a:	e000      	b.n	800660e <SD_disk_initialize+0x10a>
 800660c:	2302      	movs	r3, #2
 800660e:	73bb      	strb	r3, [r7, #14]
 8006610:	e040      	b.n	8006694 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8006612:	2100      	movs	r1, #0
 8006614:	2077      	movs	r0, #119	; 0x77
 8006616:	f7ff ff23 	bl	8006460 <SD_SendCmd>
 800661a:	4603      	mov	r3, r0
 800661c:	2b01      	cmp	r3, #1
 800661e:	d808      	bhi.n	8006632 <SD_disk_initialize+0x12e>
 8006620:	2100      	movs	r1, #0
 8006622:	2069      	movs	r0, #105	; 0x69
 8006624:	f7ff ff1c 	bl	8006460 <SD_SendCmd>
 8006628:	4603      	mov	r3, r0
 800662a:	2b01      	cmp	r3, #1
 800662c:	d801      	bhi.n	8006632 <SD_disk_initialize+0x12e>
 800662e:	2302      	movs	r3, #2
 8006630:	e000      	b.n	8006634 <SD_disk_initialize+0x130>
 8006632:	2301      	movs	r3, #1
 8006634:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d10e      	bne.n	800665a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800663c:	2100      	movs	r1, #0
 800663e:	2077      	movs	r0, #119	; 0x77
 8006640:	f7ff ff0e 	bl	8006460 <SD_SendCmd>
 8006644:	4603      	mov	r3, r0
 8006646:	2b01      	cmp	r3, #1
 8006648:	d80e      	bhi.n	8006668 <SD_disk_initialize+0x164>
 800664a:	2100      	movs	r1, #0
 800664c:	2069      	movs	r0, #105	; 0x69
 800664e:	f7ff ff07 	bl	8006460 <SD_SendCmd>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d107      	bne.n	8006668 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8006658:	e00d      	b.n	8006676 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800665a:	2100      	movs	r1, #0
 800665c:	2041      	movs	r0, #65	; 0x41
 800665e:	f7ff feff 	bl	8006460 <SD_SendCmd>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8006668:	4b19      	ldr	r3, [pc, #100]	; (80066d0 <SD_disk_initialize+0x1cc>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e1      	bne.n	8006636 <SD_disk_initialize+0x132>
 8006672:	e000      	b.n	8006676 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8006674:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8006676:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <SD_disk_initialize+0x1cc>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <SD_disk_initialize+0x18c>
 8006680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006684:	2050      	movs	r0, #80	; 0x50
 8006686:	f7ff feeb 	bl	8006460 <SD_SendCmd>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8006694:	4a0f      	ldr	r2, [pc, #60]	; (80066d4 <SD_disk_initialize+0x1d0>)
 8006696:	7bbb      	ldrb	r3, [r7, #14]
 8006698:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800669a:	f7ff fd87 	bl	80061ac <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800669e:	f7ff fdab 	bl	80061f8 <SPI_RxByte>

  if (type)
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80066a8:	4b08      	ldr	r3, [pc, #32]	; (80066cc <SD_disk_initialize+0x1c8>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f023 0301 	bic.w	r3, r3, #1
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <SD_disk_initialize+0x1c8>)
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	e001      	b.n	80066be <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80066ba:	f7ff fe31 	bl	8006320 <SD_PowerOff>
  }

  return Stat;
 80066be:	4b03      	ldr	r3, [pc, #12]	; (80066cc <SD_disk_initialize+0x1c8>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	b2db      	uxtb	r3, r3
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd90      	pop	{r4, r7, pc}
 80066cc:	20000005 	.word	0x20000005
 80066d0:	20004922 	.word	0x20004922
 80066d4:	200002b5 	.word	0x200002b5

080066d8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <SD_disk_status+0x14>
    return STA_NOINIT;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e002      	b.n	80066f2 <SD_disk_status+0x1a>

  return Stat;
 80066ec:	4b03      	ldr	r3, [pc, #12]	; (80066fc <SD_disk_status+0x24>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	b2db      	uxtb	r3, r3
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr
 80066fc:	20000005 	.word	0x20000005

08006700 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	4603      	mov	r3, r0
 800670e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d102      	bne.n	800671c <SD_disk_read+0x1c>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <SD_disk_read+0x20>
    return RES_PARERR;
 800671c:	2304      	movs	r3, #4
 800671e:	e051      	b.n	80067c4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8006720:	4b2a      	ldr	r3, [pc, #168]	; (80067cc <SD_disk_read+0xcc>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800672e:	2303      	movs	r3, #3
 8006730:	e048      	b.n	80067c4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8006732:	4b27      	ldr	r3, [pc, #156]	; (80067d0 <SD_disk_read+0xd0>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d102      	bne.n	8006744 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	025b      	lsls	r3, r3, #9
 8006742:	607b      	str	r3, [r7, #4]

  SELECT();
 8006744:	f7ff fd26 	bl	8006194 <SELECT>

  if (count == 1)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d111      	bne.n	8006772 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	2051      	movs	r0, #81	; 0x51
 8006752:	f7ff fe85 	bl	8006460 <SD_SendCmd>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d129      	bne.n	80067b0 <SD_disk_read+0xb0>
 800675c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006760:	68b8      	ldr	r0, [r7, #8]
 8006762:	f7ff fdf3 	bl	800634c <SD_RxDataBlock>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d021      	beq.n	80067b0 <SD_disk_read+0xb0>
      count = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	603b      	str	r3, [r7, #0]
 8006770:	e01e      	b.n	80067b0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	2052      	movs	r0, #82	; 0x52
 8006776:	f7ff fe73 	bl	8006460 <SD_SendCmd>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d117      	bne.n	80067b0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8006780:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006784:	68b8      	ldr	r0, [r7, #8]
 8006786:	f7ff fde1 	bl	800634c <SD_RxDataBlock>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00a      	beq.n	80067a6 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006796:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	3b01      	subs	r3, #1
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1ed      	bne.n	8006780 <SD_disk_read+0x80>
 80067a4:	e000      	b.n	80067a8 <SD_disk_read+0xa8>
          break;
 80067a6:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80067a8:	2100      	movs	r1, #0
 80067aa:	204c      	movs	r0, #76	; 0x4c
 80067ac:	f7ff fe58 	bl	8006460 <SD_SendCmd>
    }
  }

  DESELECT();
 80067b0:	f7ff fcfc 	bl	80061ac <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80067b4:	f7ff fd20 	bl	80061f8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bf14      	ite	ne
 80067be:	2301      	movne	r3, #1
 80067c0:	2300      	moveq	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000005 	.word	0x20000005
 80067d0:	200002b5 	.word	0x200002b5

080067d4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d102      	bne.n	80067f0 <SD_disk_write+0x1c>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <SD_disk_write+0x20>
    return RES_PARERR;
 80067f0:	2304      	movs	r3, #4
 80067f2:	e06b      	b.n	80068cc <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80067f4:	4b37      	ldr	r3, [pc, #220]	; (80068d4 <SD_disk_write+0x100>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8006802:	2303      	movs	r3, #3
 8006804:	e062      	b.n	80068cc <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8006806:	4b33      	ldr	r3, [pc, #204]	; (80068d4 <SD_disk_write+0x100>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <SD_disk_write+0x44>
    return RES_WRPRT;
 8006814:	2302      	movs	r3, #2
 8006816:	e059      	b.n	80068cc <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8006818:	4b2f      	ldr	r3, [pc, #188]	; (80068d8 <SD_disk_write+0x104>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d102      	bne.n	800682a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	025b      	lsls	r3, r3, #9
 8006828:	607b      	str	r3, [r7, #4]

  SELECT();
 800682a:	f7ff fcb3 	bl	8006194 <SELECT>

  if (count == 1)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d110      	bne.n	8006856 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	2058      	movs	r0, #88	; 0x58
 8006838:	f7ff fe12 	bl	8006460 <SD_SendCmd>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d13a      	bne.n	80068b8 <SD_disk_write+0xe4>
 8006842:	21fe      	movs	r1, #254	; 0xfe
 8006844:	68b8      	ldr	r0, [r7, #8]
 8006846:	f7ff fdb7 	bl	80063b8 <SD_TxDataBlock>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d033      	beq.n	80068b8 <SD_disk_write+0xe4>
      count = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	e030      	b.n	80068b8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8006856:	4b20      	ldr	r3, [pc, #128]	; (80068d8 <SD_disk_write+0x104>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8006862:	2100      	movs	r1, #0
 8006864:	2077      	movs	r0, #119	; 0x77
 8006866:	f7ff fdfb 	bl	8006460 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	2057      	movs	r0, #87	; 0x57
 800686e:	f7ff fdf7 	bl	8006460 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	2059      	movs	r0, #89	; 0x59
 8006876:	f7ff fdf3 	bl	8006460 <SD_SendCmd>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11b      	bne.n	80068b8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8006880:	21fc      	movs	r1, #252	; 0xfc
 8006882:	68b8      	ldr	r0, [r7, #8]
 8006884:	f7ff fd98 	bl	80063b8 <SD_TxDataBlock>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006894:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	3b01      	subs	r3, #1
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1ee      	bne.n	8006880 <SD_disk_write+0xac>
 80068a2:	e000      	b.n	80068a6 <SD_disk_write+0xd2>
          break;
 80068a4:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80068a6:	21fd      	movs	r1, #253	; 0xfd
 80068a8:	2000      	movs	r0, #0
 80068aa:	f7ff fd85 	bl	80063b8 <SD_TxDataBlock>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <SD_disk_write+0xe4>
      {
        count = 1;
 80068b4:	2301      	movs	r3, #1
 80068b6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80068b8:	f7ff fc78 	bl	80061ac <DESELECT>
  SPI_RxByte();
 80068bc:	f7ff fc9c 	bl	80061f8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bf14      	ite	ne
 80068c6:	2301      	movne	r3, #1
 80068c8:	2300      	moveq	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20000005 	.word	0x20000005
 80068d8:	200002b5 	.word	0x200002b5

080068dc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b08b      	sub	sp, #44	; 0x2c
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	603a      	str	r2, [r7, #0]
 80068e6:	71fb      	strb	r3, [r7, #7]
 80068e8:	460b      	mov	r3, r1
 80068ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80068f6:	2304      	movs	r3, #4
 80068f8:	e11b      	b.n	8006b32 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8006900:	79bb      	ldrb	r3, [r7, #6]
 8006902:	2b05      	cmp	r3, #5
 8006904:	d129      	bne.n	800695a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d017      	beq.n	800693e <SD_disk_ioctl+0x62>
 800690e:	2b02      	cmp	r3, #2
 8006910:	dc1f      	bgt.n	8006952 <SD_disk_ioctl+0x76>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <SD_disk_ioctl+0x40>
 8006916:	2b01      	cmp	r3, #1
 8006918:	d00b      	beq.n	8006932 <SD_disk_ioctl+0x56>
 800691a:	e01a      	b.n	8006952 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800691c:	f7ff fd0c 	bl	8006338 <SD_CheckPower>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8006926:	f7ff fcfb 	bl	8006320 <SD_PowerOff>
      res = RES_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006930:	e0fd      	b.n	8006b2e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8006932:	f7ff fca9 	bl	8006288 <SD_PowerOn>
      res = RES_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800693c:	e0f7      	b.n	8006b2e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	1c5c      	adds	r4, r3, #1
 8006942:	f7ff fcf9 	bl	8006338 <SD_CheckPower>
 8006946:	4603      	mov	r3, r0
 8006948:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800694a:	2300      	movs	r3, #0
 800694c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006950:	e0ed      	b.n	8006b2e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8006952:	2304      	movs	r3, #4
 8006954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006958:	e0e9      	b.n	8006b2e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800695a:	4b78      	ldr	r3, [pc, #480]	; (8006b3c <SD_disk_ioctl+0x260>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8006968:	2303      	movs	r3, #3
 800696a:	e0e2      	b.n	8006b32 <SD_disk_ioctl+0x256>

    SELECT();
 800696c:	f7ff fc12 	bl	8006194 <SELECT>

    switch (ctrl)
 8006970:	79bb      	ldrb	r3, [r7, #6]
 8006972:	2b0d      	cmp	r3, #13
 8006974:	f200 80cc 	bhi.w	8006b10 <SD_disk_ioctl+0x234>
 8006978:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <SD_disk_ioctl+0xa4>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	08006a7b 	.word	0x08006a7b
 8006984:	080069b9 	.word	0x080069b9
 8006988:	08006a6b 	.word	0x08006a6b
 800698c:	08006b11 	.word	0x08006b11
 8006990:	08006b11 	.word	0x08006b11
 8006994:	08006b11 	.word	0x08006b11
 8006998:	08006b11 	.word	0x08006b11
 800699c:	08006b11 	.word	0x08006b11
 80069a0:	08006b11 	.word	0x08006b11
 80069a4:	08006b11 	.word	0x08006b11
 80069a8:	08006b11 	.word	0x08006b11
 80069ac:	08006a8d 	.word	0x08006a8d
 80069b0:	08006ab1 	.word	0x08006ab1
 80069b4:	08006ad5 	.word	0x08006ad5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80069b8:	2100      	movs	r1, #0
 80069ba:	2049      	movs	r0, #73	; 0x49
 80069bc:	f7ff fd50 	bl	8006460 <SD_SendCmd>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f040 80a8 	bne.w	8006b18 <SD_disk_ioctl+0x23c>
 80069c8:	f107 030c 	add.w	r3, r7, #12
 80069cc:	2110      	movs	r1, #16
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff fcbc 	bl	800634c <SD_RxDataBlock>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 809e 	beq.w	8006b18 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80069dc:	7b3b      	ldrb	r3, [r7, #12]
 80069de:	099b      	lsrs	r3, r3, #6
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d10e      	bne.n	8006a04 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80069e6:	7d7b      	ldrb	r3, [r7, #21]
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	7d3b      	ldrb	r3, [r7, #20]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	4413      	add	r3, r2
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3301      	adds	r3, #1
 80069f8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80069fa:	8bfb      	ldrh	r3, [r7, #30]
 80069fc:	029a      	lsls	r2, r3, #10
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e02e      	b.n	8006a62 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006a04:	7c7b      	ldrb	r3, [r7, #17]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	7dbb      	ldrb	r3, [r7, #22]
 8006a0e:	09db      	lsrs	r3, r3, #7
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	4413      	add	r3, r2
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	7d7b      	ldrb	r3, [r7, #21]
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 0306 	and.w	r3, r3, #6
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	4413      	add	r3, r2
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	3302      	adds	r3, #2
 8006a28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8006a2c:	7d3b      	ldrb	r3, [r7, #20]
 8006a2e:	099b      	lsrs	r3, r3, #6
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	7cfb      	ldrb	r3, [r7, #19]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	7cbb      	ldrb	r3, [r7, #18]
 8006a42:	029b      	lsls	r3, r3, #10
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3301      	adds	r3, #1
 8006a52:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8006a54:	8bfa      	ldrh	r2, [r7, #30]
 8006a56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a5a:	3b09      	subs	r3, #9
 8006a5c:	409a      	lsls	r2, r3
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8006a68:	e056      	b.n	8006b18 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a70:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006a78:	e055      	b.n	8006b26 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8006a7a:	f7ff fbe9 	bl	8006250 <SD_ReadyWait>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2bff      	cmp	r3, #255	; 0xff
 8006a82:	d14b      	bne.n	8006b1c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006a8a:	e047      	b.n	8006b1c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	2049      	movs	r0, #73	; 0x49
 8006a90:	f7ff fce6 	bl	8006460 <SD_SendCmd>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d142      	bne.n	8006b20 <SD_disk_ioctl+0x244>
 8006a9a:	2110      	movs	r1, #16
 8006a9c:	6a38      	ldr	r0, [r7, #32]
 8006a9e:	f7ff fc55 	bl	800634c <SD_RxDataBlock>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d03b      	beq.n	8006b20 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006aae:	e037      	b.n	8006b20 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	204a      	movs	r0, #74	; 0x4a
 8006ab4:	f7ff fcd4 	bl	8006460 <SD_SendCmd>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d132      	bne.n	8006b24 <SD_disk_ioctl+0x248>
 8006abe:	2110      	movs	r1, #16
 8006ac0:	6a38      	ldr	r0, [r7, #32]
 8006ac2:	f7ff fc43 	bl	800634c <SD_RxDataBlock>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d02b      	beq.n	8006b24 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006ad2:	e027      	b.n	8006b24 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	207a      	movs	r0, #122	; 0x7a
 8006ad8:	f7ff fcc2 	bl	8006460 <SD_SendCmd>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d116      	bne.n	8006b10 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ae8:	e00b      	b.n	8006b02 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8006aea:	6a3c      	ldr	r4, [r7, #32]
 8006aec:	1c63      	adds	r3, r4, #1
 8006aee:	623b      	str	r3, [r7, #32]
 8006af0:	f7ff fb82 	bl	80061f8 <SPI_RxByte>
 8006af4:	4603      	mov	r3, r0
 8006af6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8006af8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006afc:	3301      	adds	r3, #1
 8006afe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d9ef      	bls.n	8006aea <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8006b10:	2304      	movs	r3, #4
 8006b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b16:	e006      	b.n	8006b26 <SD_disk_ioctl+0x24a>
      break;
 8006b18:	bf00      	nop
 8006b1a:	e004      	b.n	8006b26 <SD_disk_ioctl+0x24a>
      break;
 8006b1c:	bf00      	nop
 8006b1e:	e002      	b.n	8006b26 <SD_disk_ioctl+0x24a>
      break;
 8006b20:	bf00      	nop
 8006b22:	e000      	b.n	8006b26 <SD_disk_ioctl+0x24a>
      break;
 8006b24:	bf00      	nop
    }

    DESELECT();
 8006b26:	f7ff fb41 	bl	80061ac <DESELECT>
    SPI_RxByte();
 8006b2a:	f7ff fb65 	bl	80061f8 <SPI_RxByte>
  }

  return res;
 8006b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	372c      	adds	r7, #44	; 0x2c
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd90      	pop	{r4, r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000005 	.word	0x20000005

08006b40 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006b46:	f7f9 fb01 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006b4a:	f000 f9e5 	bl	8006f18 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006b4e:	f000 faeb 	bl	8007128 <MX_GPIO_Init>
	MX_DMA_Init();
 8006b52:	f000 facb 	bl	80070ec <MX_DMA_Init>
	MX_I2C1_Init();
 8006b56:	f000 fa3b 	bl	8006fd0 <MX_I2C1_Init>
	MX_SPI1_Init();
 8006b5a:	f000 fa67 	bl	800702c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8006b5e:	f000 fa9b 	bl	8007098 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	JoyStick_Init(Joystick_Handler);
 8006b62:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <main+0x8c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff f842 	bl	8005bf0 <JoyStick_Init>

	if(OLED_Init() != E_OK)
 8006b6c:	f7ff f9ac 	bl	8005ec8 <OLED_Init>
	{
		//Error
	}

	// Ask to connect (you might still use a computer and NOT connect this controller)
	OLED_setTextDisplay("","      Connect?    ","","");
 8006b70:	4b17      	ldr	r3, [pc, #92]	; (8006bd0 <main+0x90>)
 8006b72:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <main+0x90>)
 8006b74:	4917      	ldr	r1, [pc, #92]	; (8006bd4 <main+0x94>)
 8006b76:	4816      	ldr	r0, [pc, #88]	; (8006bd0 <main+0x90>)
 8006b78:	f7ff f9b8 	bl	8005eec <OLED_setTextDisplay>
	while (HAL_GPIO_ReadPin(Joystick_Button_GPIO_Port, Joystick_Button_Pin) == GPIO_PIN_RESET) {}  // wait for the button to be pressed
 8006b7c:	bf00      	nop
 8006b7e:	2101      	movs	r1, #1
 8006b80:	4815      	ldr	r0, [pc, #84]	; (8006bd8 <main+0x98>)
 8006b82:	f7fa fc07 	bl	8001394 <HAL_GPIO_ReadPin>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f8      	beq.n	8006b7e <main+0x3e>
	//delay(50);
	while (HAL_GPIO_ReadPin(Joystick_Button_GPIO_Port, Joystick_Button_Pin) == GPIO_PIN_SET) {}  // be sure the button is released before we continue
 8006b8c:	bf00      	nop
 8006b8e:	2101      	movs	r1, #1
 8006b90:	4811      	ldr	r0, [pc, #68]	; (8006bd8 <main+0x98>)
 8006b92:	f7fa fbff 	bl	8001394 <HAL_GPIO_ReadPin>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d0f8      	beq.n	8006b8e <main+0x4e>
	//delay(50);

	if(SD_init(SD_CS_GPIO_Port, SD_CS_Pin) != E_OK)
 8006b9c:	2110      	movs	r1, #16
 8006b9e:	480e      	ldr	r0, [pc, #56]	; (8006bd8 <main+0x98>)
 8006ba0:	f7ff fa5a 	bl	8006058 <SD_init>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d005      	beq.n	8006bb6 <main+0x76>
	{
		OLED_setTextDisplay("Error","SD Card Fail!","","");
 8006baa:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <main+0x90>)
 8006bac:	4a08      	ldr	r2, [pc, #32]	; (8006bd0 <main+0x90>)
 8006bae:	490b      	ldr	r1, [pc, #44]	; (8006bdc <main+0x9c>)
 8006bb0:	480b      	ldr	r0, [pc, #44]	; (8006be0 <main+0xa0>)
 8006bb2:	f7ff f99b 	bl	8005eec <OLED_setTextDisplay>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		A = fileMenu();
 8006bb6:	f000 f815 	bl	8006be4 <fileMenu>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	71fb      	strb	r3, [r7, #7]
		if (A==0) {
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1f8      	bne.n	8006bb6 <main+0x76>
			moveMenu();
 8006bc4:	f000 f916 	bl	8006df4 <moveMenu>
		A = fileMenu();
 8006bc8:	e7f5      	b.n	8006bb6 <main+0x76>
 8006bca:	bf00      	nop
 8006bcc:	20000010 	.word	0x20000010
 8006bd0:	08007e0c 	.word	0x08007e0c
 8006bd4:	08007e10 	.word	0x08007e10
 8006bd8:	40010800 	.word	0x40010800
 8006bdc:	08007e24 	.word	0x08007e24
 8006be0:	08007e34 	.word	0x08007e34

08006be4 <fileMenu>:
	}
	/* USER CODE END 3 */
}

uint8 fileMenu(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b0a8      	sub	sp, #160	; 0xa0
 8006be8:	af00      	add	r7, sp, #0
	  You can browse up and down to select a file.
	  Click the button to select a file

	  Move the stick right to exit the file menu and enter the Move menu
	 */
	uint8 fileindex = 1;
 8006bea:	2301      	movs	r3, #1
 8006bec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	sint8 fn[50];
	uint8 fc = filecount();
 8006bf0:	f000 f919 	bl	8006e26 <filecount>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	sint8 string[100];

	getFileName(fileindex, fn);
 8006bfa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006bfe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006c02:	4611      	mov	r1, r2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 f931 	bl	8006e6c <getFileName>
	StringCopy(string, " -> ");
 8006c0a:	f107 0308 	add.w	r3, r7, #8
 8006c0e:	4972      	ldr	r1, [pc, #456]	; (8006dd8 <fileMenu+0x1f4>)
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fb33 	bl	800727c <StringCopy>
	string_cat(string, fn);
 8006c16:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006c1a:	f107 0308 	add.w	r3, r7, #8
 8006c1e:	4611      	mov	r1, r2
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fb01 	bl	8007228 <string_cat>
	OLED_setTextDisplay("Files ",string,0,"Click to select");
 8006c26:	f107 0108 	add.w	r1, r7, #8
 8006c2a:	4b6c      	ldr	r3, [pc, #432]	; (8006ddc <fileMenu+0x1f8>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	486c      	ldr	r0, [pc, #432]	; (8006de0 <fileMenu+0x1fc>)
 8006c30:	f7ff f95c 	bl	8005eec <OLED_setTextDisplay>

	while(1)
	{
		JoyStick_Read(Joystick_Handler, Joystick_xy);
 8006c34:	4b6b      	ldr	r3, [pc, #428]	; (8006de4 <fileMenu+0x200>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	496b      	ldr	r1, [pc, #428]	; (8006de8 <fileMenu+0x204>)
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff f8b8 	bl	8005db0 <JoyStick_Read>
		if(fileindex < fc && (JoystickIsFullDown(Joystick_xy)))
 8006c40:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8006c44:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d226      	bcs.n	8006c9a <fileMenu+0xb6>
 8006c4c:	4b66      	ldr	r3, [pc, #408]	; (8006de8 <fileMenu+0x204>)
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	2b78      	cmp	r3, #120	; 0x78
 8006c52:	d822      	bhi.n	8006c9a <fileMenu+0xb6>
		{
			fileindex++;
 8006c54:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006c58:	3301      	adds	r3, #1
 8006c5a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			getFileName(fileindex, fn);
 8006c5e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006c62:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006c66:	4611      	mov	r1, r2
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 f8ff 	bl	8006e6c <getFileName>
			StringCopy(string, " -> ");
 8006c6e:	f107 0308 	add.w	r3, r7, #8
 8006c72:	4959      	ldr	r1, [pc, #356]	; (8006dd8 <fileMenu+0x1f4>)
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fb01 	bl	800727c <StringCopy>
			string_cat(string, fn);
 8006c7a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006c7e:	f107 0308 	add.w	r3, r7, #8
 8006c82:	4611      	mov	r1, r2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 facf 	bl	8007228 <string_cat>
			OLED_setTextRow(string, 1);
 8006c8a:	f107 0308 	add.w	r3, r7, #8
 8006c8e:	2101      	movs	r1, #1
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff f9b1 	bl	8005ff8 <OLED_setTextRow>
			waitForJoystickMid();
 8006c96:	f7ff f8dd 	bl	8005e54 <waitForJoystickMid>
		}
		if(JoystickIsFullUp(Joystick_xy))
 8006c9a:	4b53      	ldr	r3, [pc, #332]	; (8006de8 <fileMenu+0x204>)
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8006ca2:	d329      	bcc.n	8006cf8 <fileMenu+0x114>
		{
			if(fileindex > 1)
 8006ca4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d925      	bls.n	8006cf8 <fileMenu+0x114>
			{
		        fileindex --;
 8006cac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		        fn[0] = '\0';
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
				getFileName(fileindex, fn);
 8006cbc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006cc0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 f8d0 	bl	8006e6c <getFileName>
				StringCopy(string, " -> ");
 8006ccc:	f107 0308 	add.w	r3, r7, #8
 8006cd0:	4941      	ldr	r1, [pc, #260]	; (8006dd8 <fileMenu+0x1f4>)
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fad2 	bl	800727c <StringCopy>
				string_cat(string, fn);
 8006cd8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006cdc:	f107 0308 	add.w	r3, r7, #8
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 faa0 	bl	8007228 <string_cat>
				OLED_setTextRow(string, 1);
 8006ce8:	f107 0308 	add.w	r3, r7, #8
 8006cec:	2101      	movs	r1, #1
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff f982 	bl	8005ff8 <OLED_setTextRow>
				waitForJoystickMid();
 8006cf4:	f7ff f8ae 	bl	8005e54 <waitForJoystickMid>
			}
		}

		if (fileindex > 0 && (JoyStick_ReadButton() == JOYSTICK_PIN_RESET) && fn[0] != '\0')    // Pushed it!
 8006cf8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d05d      	beq.n	8006dbc <fileMenu+0x1d8>
 8006d00:	f7ff f898 	bl	8005e34 <JoyStick_ReadButton>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d158      	bne.n	8006dbc <fileMenu+0x1d8>
 8006d0a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d054      	beq.n	8006dbc <fileMenu+0x1d8>
		{
			StringCopy(string, " -> ");
 8006d12:	f107 0308 	add.w	r3, r7, #8
 8006d16:	4930      	ldr	r1, [pc, #192]	; (8006dd8 <fileMenu+0x1f4>)
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 faaf 	bl	800727c <StringCopy>
			string_cat(string, fn);
 8006d1e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	4611      	mov	r1, r2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fa7d 	bl	8007228 <string_cat>
			OLED_setTextDisplay("Send this file? ", string, 0, "Click to confirm");  // Ask for confirmation
 8006d2e:	f107 0108 	add.w	r1, r7, #8
 8006d32:	4b2e      	ldr	r3, [pc, #184]	; (8006dec <fileMenu+0x208>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	482e      	ldr	r0, [pc, #184]	; (8006df0 <fileMenu+0x20c>)
 8006d38:	f7ff f8d8 	bl	8005eec <OLED_setTextDisplay>
			HAL_Delay(50);
 8006d3c:	2032      	movs	r0, #50	; 0x32
 8006d3e:	f7f9 fa67 	bl	8000210 <HAL_Delay>
			while (JoyStick_ReadButton() == JOYSTICK_PIN_RESET) {} // Wait for the button to be released
 8006d42:	bf00      	nop
 8006d44:	f7ff f876 	bl	8005e34 <JoyStick_ReadButton>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0fa      	beq.n	8006d44 <fileMenu+0x160>
			HAL_Delay(50);
 8006d4e:	2032      	movs	r0, #50	; 0x32
 8006d50:	f7f9 fa5e 	bl	8000210 <HAL_Delay>

			volatile uint32 t = HAL_GetTick();
 8006d54:	f7f9 fa52 	bl	80001fc <HAL_GetTick>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	607b      	str	r3, [r7, #4]

			while((HAL_GetTick() - t) < 1500)
 8006d5c:	e010      	b.n	8006d80 <fileMenu+0x19c>
			{
				if(JoyStick_ReadButton() == JOYSTICK_PIN_RESET)
 8006d5e:	f7ff f869 	bl	8005e34 <JoyStick_ReadButton>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10b      	bne.n	8006d80 <fileMenu+0x19c>
				{
					HAL_Delay(50);
 8006d68:	2032      	movs	r0, #50	; 0x32
 8006d6a:	f7f9 fa51 	bl	8000210 <HAL_Delay>
					while (JoyStick_ReadButton() == JOYSTICK_PIN_RESET) {} // Wait for the button to be released
 8006d6e:	bf00      	nop
 8006d70:	f7ff f860 	bl	8005e34 <JoyStick_ReadButton>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0fa      	beq.n	8006d70 <fileMenu+0x18c>
					return fileindex;
 8006d7a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006d7e:	e026      	b.n	8006dce <fileMenu+0x1ea>
			while((HAL_GetTick() - t) < 1500)
 8006d80:	f7f9 fa3c 	bl	80001fc <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	f240 52db 	movw	r2, #1499	; 0x5db
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d9e5      	bls.n	8006d5e <fileMenu+0x17a>
					break;
				}
			}
			StringCopy(string, " -> ");
 8006d92:	f107 0308 	add.w	r3, r7, #8
 8006d96:	4910      	ldr	r1, [pc, #64]	; (8006dd8 <fileMenu+0x1f4>)
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fa6f 	bl	800727c <StringCopy>
			string_cat(string, fn);
 8006d9e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006da2:	f107 0308 	add.w	r3, r7, #8
 8006da6:	4611      	mov	r1, r2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fa3d 	bl	8007228 <string_cat>
			OLED_setTextDisplay("Files ", string, 0, "Click to select");
 8006dae:	f107 0108 	add.w	r1, r7, #8
 8006db2:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <fileMenu+0x1f8>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	480a      	ldr	r0, [pc, #40]	; (8006de0 <fileMenu+0x1fc>)
 8006db8:	f7ff f898 	bl	8005eec <OLED_setTextDisplay>
		}

		if(JoystickIsFullRight(Joystick_xy))
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <fileMenu+0x204>)
 8006dbe:	885b      	ldrh	r3, [r3, #2]
 8006dc0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8006dc4:	f4ff af36 	bcc.w	8006c34 <fileMenu+0x50>
		{
			waitForJoystickMid();
 8006dc8:	f7ff f844 	bl	8005e54 <waitForJoystickMid>
			return 0;
 8006dcc:	2300      	movs	r3, #0
			StringCopy(string, " -> ");
			string_cat(string, fn);
			OLED_setTextDisplay("Files ", string, 0, "Click to select");
		}
	}
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	37a0      	adds	r7, #160	; 0xa0
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	08007e3c 	.word	0x08007e3c
 8006ddc:	08007e44 	.word	0x08007e44
 8006de0:	08007e54 	.word	0x08007e54
 8006de4:	20000010 	.word	0x20000010
 8006de8:	200037d4 	.word	0x200037d4
 8006dec:	08007e5c 	.word	0x08007e5c
 8006df0:	08007e70 	.word	0x08007e70

08006df4 <moveMenu>:

void moveMenu(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b0b8      	sub	sp, #224	; 0xe0
 8006df8:	af00      	add	r7, sp, #0
	OLED_Clear();
 8006dfa:	f7ff f927 	bl	800604c <OLED_Clear>
	sint8 MoveCommand[50] = "";
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e04:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006e08:	222e      	movs	r2, #46	; 0x2e
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 ffb3 	bl	8007d78 <memset>
	boolean hardup,harddown,slowup, slowdown, updateDisplay;
	uint32 qtime;
	uint64 queue=0; // queue length in milliseconds
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	sint8 sln4[21];
	sint8 sla[30];
	sint8 slb[30];

	//clearRXBuffer();
}
 8006e1e:	bf00      	nop
 8006e20:	37e0      	adds	r7, #224	; 0xe0
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <filecount>:
{

}
*/
uint8 filecount(void)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b08e      	sub	sp, #56	; 0x38
 8006e2a:	af00      	add	r7, sp, #0
	/*
	    Count the number of files on the SD card.
	 */
	uint8 count =0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	sint8 path[50] = "/";
 8006e32:	232f      	movs	r3, #47	; 0x2f
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	f107 0308 	add.w	r3, r7, #8
 8006e3a:	222e      	movs	r2, #46	; 0x2e
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 ff9a 	bl	8007d78 <memset>
	while(SD_NextFileDirectory(path) == E_OK)
 8006e44:	e004      	b.n	8006e50 <filecount+0x2a>
	{
		count++;
 8006e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(SD_NextFileDirectory(path) == E_OK)
 8006e50:	1d3b      	adds	r3, r7, #4
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff f934 	bl	80060c0 <SD_NextFileDirectory>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d0f3      	beq.n	8006e46 <filecount+0x20>
	}

	return count;
 8006e5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3738      	adds	r7, #56	; 0x38
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <getFileName>:

Std_ReturnType getFileName(uint8 index, sint8* name)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b090      	sub	sp, #64	; 0x40
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	6039      	str	r1, [r7, #0]
 8006e76:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType return_type = E_NOT_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8 count = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	sint8 path[50] = "/";
 8006e84:	232f      	movs	r3, #47	; 0x2f
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	f107 0310 	add.w	r3, r7, #16
 8006e8c:	222e      	movs	r2, #46	; 0x2e
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 ff71 	bl	8007d78 <memset>

	name[0] = 0;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	701a      	strb	r2, [r3, #0]

	if(SD_NextFileDirectory(path) != E_OK){return return_type;}
 8006e9c:	f107 030c 	add.w	r3, r7, #12
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff f90d 	bl	80060c0 <SD_NextFileDirectory>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d024      	beq.n	8006ef6 <getFileName+0x8a>
 8006eac:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006eb0:	e02a      	b.n	8006f08 <getFileName+0x9c>

	while(name[0] == 0)
	{
		if(SD_NextFileDirectory(path) != FR_OK){}
 8006eb2:	f107 030c 	add.w	r3, r7, #12
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff f902 	bl	80060c0 <SD_NextFileDirectory>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d119      	bne.n	8006ef6 <getFileName+0x8a>
		else
		{
			if (fileInfo.fattrib & AM_DIR)
 8006ec2:	4b13      	ldr	r3, [pc, #76]	; (8006f10 <getFileName+0xa4>)
 8006ec4:	7a1b      	ldrb	r3, [r3, #8]
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d013      	beq.n	8006ef6 <getFileName+0x8a>
			{
				count++;
 8006ece:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if(count == index)
 8006ed8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d109      	bne.n	8006ef6 <getFileName+0x8a>
				{
#if _USE_LFN
					name = *fileInfo.lfname ? fileInfo.lfname : fileInfo.fname;
 8006ee2:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <getFileName+0xa4>)
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <getFileName+0x86>
 8006eec:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <getFileName+0xa4>)
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	e000      	b.n	8006ef4 <getFileName+0x88>
 8006ef2:	4b08      	ldr	r3, [pc, #32]	; (8006f14 <getFileName+0xa8>)
 8006ef4:	603b      	str	r3, [r7, #0]
	while(name[0] == 0)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0d9      	beq.n	8006eb2 <getFileName+0x46>
				}
			}
		}
	}

	return_type = E_OK;
 8006efe:	2301      	movs	r3, #1
 8006f00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return return_type; //Success
 8006f04:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3740      	adds	r7, #64	; 0x40
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	2000272c 	.word	0x2000272c
 8006f14:	20002735 	.word	0x20002735

08006f18 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b094      	sub	sp, #80	; 0x50
 8006f1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f22:	2228      	movs	r2, #40	; 0x28
 8006f24:	2100      	movs	r1, #0
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 ff26 	bl	8007d78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f2c:	f107 0314 	add.w	r3, r7, #20
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	605a      	str	r2, [r3, #4]
 8006f36:	609a      	str	r2, [r3, #8]
 8006f38:	60da      	str	r2, [r3, #12]
 8006f3a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f3c:	1d3b      	adds	r3, r7, #4
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	605a      	str	r2, [r3, #4]
 8006f44:	609a      	str	r2, [r3, #8]
 8006f46:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006f52:	2300      	movs	r3, #0
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006f56:	2301      	movs	r3, #1
 8006f58:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f62:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006f64:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006f68:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fa ff70 	bl	8001e54 <HAL_RCC_OscConfig>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <SystemClock_Config+0x66>
	{
		Error_Handler();
 8006f7a:	f000 f939 	bl	80071f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f7e:	230f      	movs	r3, #15
 8006f80:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f82:	2302      	movs	r3, #2
 8006f84:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f86:	2300      	movs	r3, #0
 8006f88:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f8e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006f90:	2300      	movs	r3, #0
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006f94:	f107 0314 	add.w	r3, r7, #20
 8006f98:	2102      	movs	r1, #2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fb f9be 	bl	800231c <HAL_RCC_ClockConfig>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <SystemClock_Config+0x92>
	{
		Error_Handler();
 8006fa6:	f000 f923 	bl	80071f0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006faa:	2302      	movs	r3, #2
 8006fac:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8006fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006fb4:	1d3b      	adds	r3, r7, #4
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fb fb6e 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8006fc2:	f000 f915 	bl	80071f0 <Error_Handler>
	}
}
 8006fc6:	bf00      	nop
 8006fc8:	3750      	adds	r7, #80	; 0x50
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C1_Init(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8006fd4:	4b12      	ldr	r3, [pc, #72]	; (8007020 <MX_I2C1_Init+0x50>)
 8006fd6:	4a13      	ldr	r2, [pc, #76]	; (8007024 <MX_I2C1_Init+0x54>)
 8006fd8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8006fda:	4b11      	ldr	r3, [pc, #68]	; (8007020 <MX_I2C1_Init+0x50>)
 8006fdc:	4a12      	ldr	r2, [pc, #72]	; (8007028 <MX_I2C1_Init+0x58>)
 8006fde:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <MX_I2C1_Init+0x50>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8006fe6:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <MX_I2C1_Init+0x50>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006fec:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <MX_I2C1_Init+0x50>)
 8006fee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006ff2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006ff4:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <MX_I2C1_Init+0x50>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8006ffa:	4b09      	ldr	r3, [pc, #36]	; (8007020 <MX_I2C1_Init+0x50>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007000:	4b07      	ldr	r3, [pc, #28]	; (8007020 <MX_I2C1_Init+0x50>)
 8007002:	2200      	movs	r2, #0
 8007004:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <MX_I2C1_Init+0x50>)
 8007008:	2200      	movs	r2, #0
 800700a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800700c:	4804      	ldr	r0, [pc, #16]	; (8007020 <MX_I2C1_Init+0x50>)
 800700e:	f7fa f9f1 	bl	80013f4 <HAL_I2C_Init>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8007018:	f000 f8ea 	bl	80071f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800701c:	bf00      	nop
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20003780 	.word	0x20003780
 8007024:	40005400 	.word	0x40005400
 8007028:	00061a80 	.word	0x00061a80

0800702c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8007030:	4b17      	ldr	r3, [pc, #92]	; (8007090 <MX_SPI1_Init+0x64>)
 8007032:	4a18      	ldr	r2, [pc, #96]	; (8007094 <MX_SPI1_Init+0x68>)
 8007034:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8007036:	4b16      	ldr	r3, [pc, #88]	; (8007090 <MX_SPI1_Init+0x64>)
 8007038:	f44f 7282 	mov.w	r2, #260	; 0x104
 800703c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800703e:	4b14      	ldr	r3, [pc, #80]	; (8007090 <MX_SPI1_Init+0x64>)
 8007040:	2200      	movs	r2, #0
 8007042:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007044:	4b12      	ldr	r3, [pc, #72]	; (8007090 <MX_SPI1_Init+0x64>)
 8007046:	2200      	movs	r2, #0
 8007048:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800704a:	4b11      	ldr	r3, [pc, #68]	; (8007090 <MX_SPI1_Init+0x64>)
 800704c:	2200      	movs	r2, #0
 800704e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007050:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <MX_SPI1_Init+0x64>)
 8007052:	2200      	movs	r2, #0
 8007054:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8007056:	4b0e      	ldr	r3, [pc, #56]	; (8007090 <MX_SPI1_Init+0x64>)
 8007058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800705c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800705e:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <MX_SPI1_Init+0x64>)
 8007060:	2220      	movs	r2, #32
 8007062:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007064:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <MX_SPI1_Init+0x64>)
 8007066:	2200      	movs	r2, #0
 8007068:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800706a:	4b09      	ldr	r3, [pc, #36]	; (8007090 <MX_SPI1_Init+0x64>)
 800706c:	2200      	movs	r2, #0
 800706e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <MX_SPI1_Init+0x64>)
 8007072:	2200      	movs	r2, #0
 8007074:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8007076:	4b06      	ldr	r3, [pc, #24]	; (8007090 <MX_SPI1_Init+0x64>)
 8007078:	220a      	movs	r2, #10
 800707a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800707c:	4804      	ldr	r0, [pc, #16]	; (8007090 <MX_SPI1_Init+0x64>)
 800707e:	f7fb fff6 	bl	800306e <HAL_SPI_Init>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8007088:	f000 f8b2 	bl	80071f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800708c:	bf00      	nop
 800708e:	bd80      	pop	{r7, pc}
 8007090:	200048c4 	.word	0x200048c4
 8007094:	40013000 	.word	0x40013000

08007098 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART1_UART_Init(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800709c:	4b11      	ldr	r3, [pc, #68]	; (80070e4 <MX_USART1_UART_Init+0x4c>)
 800709e:	4a12      	ldr	r2, [pc, #72]	; (80070e8 <MX_USART1_UART_Init+0x50>)
 80070a0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80070a2:	4b10      	ldr	r3, [pc, #64]	; (80070e4 <MX_USART1_UART_Init+0x4c>)
 80070a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070a8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80070aa:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <MX_USART1_UART_Init+0x4c>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <MX_USART1_UART_Init+0x4c>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <MX_USART1_UART_Init+0x4c>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80070bc:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <MX_USART1_UART_Init+0x4c>)
 80070be:	220c      	movs	r2, #12
 80070c0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80070c2:	4b08      	ldr	r3, [pc, #32]	; (80070e4 <MX_USART1_UART_Init+0x4c>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <MX_USART1_UART_Init+0x4c>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80070ce:	4805      	ldr	r0, [pc, #20]	; (80070e4 <MX_USART1_UART_Init+0x4c>)
 80070d0:	f7fc f832 	bl	8003138 <HAL_UART_Init>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80070da:	f000 f889 	bl	80071f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80070de:	bf00      	nop
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	2000483c 	.word	0x2000483c
 80070e8:	40013800 	.word	0x40013800

080070ec <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
void MX_DMA_Init(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80070f2:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <MX_DMA_Init+0x38>)
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	4a0b      	ldr	r2, [pc, #44]	; (8007124 <MX_DMA_Init+0x38>)
 80070f8:	f043 0301 	orr.w	r3, r3, #1
 80070fc:	6153      	str	r3, [r2, #20]
 80070fe:	4b09      	ldr	r3, [pc, #36]	; (8007124 <MX_DMA_Init+0x38>)
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	607b      	str	r3, [r7, #4]
 8007108:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800710a:	2200      	movs	r2, #0
 800710c:	2100      	movs	r1, #0
 800710e:	200b      	movs	r0, #11
 8007110:	f7f9 fe21 	bl	8000d56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007114:	200b      	movs	r0, #11
 8007116:	f7f9 fe3a 	bl	8000d8e <HAL_NVIC_EnableIRQ>

}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40021000 	.word	0x40021000

08007128 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800712e:	f107 0310 	add.w	r3, r7, #16
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	605a      	str	r2, [r3, #4]
 8007138:	609a      	str	r2, [r3, #8]
 800713a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800713c:	4b29      	ldr	r3, [pc, #164]	; (80071e4 <MX_GPIO_Init+0xbc>)
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	4a28      	ldr	r2, [pc, #160]	; (80071e4 <MX_GPIO_Init+0xbc>)
 8007142:	f043 0320 	orr.w	r3, r3, #32
 8007146:	6193      	str	r3, [r2, #24]
 8007148:	4b26      	ldr	r3, [pc, #152]	; (80071e4 <MX_GPIO_Init+0xbc>)
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007154:	4b23      	ldr	r3, [pc, #140]	; (80071e4 <MX_GPIO_Init+0xbc>)
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <MX_GPIO_Init+0xbc>)
 800715a:	f043 0304 	orr.w	r3, r3, #4
 800715e:	6193      	str	r3, [r2, #24]
 8007160:	4b20      	ldr	r3, [pc, #128]	; (80071e4 <MX_GPIO_Init+0xbc>)
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800716c:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <MX_GPIO_Init+0xbc>)
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	4a1c      	ldr	r2, [pc, #112]	; (80071e4 <MX_GPIO_Init+0xbc>)
 8007172:	f043 0308 	orr.w	r3, r3, #8
 8007176:	6193      	str	r3, [r2, #24]
 8007178:	4b1a      	ldr	r3, [pc, #104]	; (80071e4 <MX_GPIO_Init+0xbc>)
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8007184:	2200      	movs	r2, #0
 8007186:	2110      	movs	r1, #16
 8007188:	4817      	ldr	r0, [pc, #92]	; (80071e8 <MX_GPIO_Init+0xc0>)
 800718a:	f7fa f91a 	bl	80013c2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Joystick_Button_Pin */
	GPIO_InitStruct.Pin = Joystick_Button_Pin;
 800718e:	2301      	movs	r3, #1
 8007190:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007192:	2300      	movs	r3, #0
 8007194:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007196:	2300      	movs	r3, #0
 8007198:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 800719a:	f107 0310 	add.w	r3, r7, #16
 800719e:	4619      	mov	r1, r3
 80071a0:	4811      	ldr	r0, [pc, #68]	; (80071e8 <MX_GPIO_Init+0xc0>)
 80071a2:	f7f9 ff6f 	bl	8001084 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 80071a6:	2310      	movs	r3, #16
 80071a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071aa:	2301      	movs	r3, #1
 80071ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071b2:	2302      	movs	r3, #2
 80071b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80071b6:	f107 0310 	add.w	r3, r7, #16
 80071ba:	4619      	mov	r1, r3
 80071bc:	480a      	ldr	r0, [pc, #40]	; (80071e8 <MX_GPIO_Init+0xc0>)
 80071be:	f7f9 ff61 	bl	8001084 <HAL_GPIO_Init>

	/*Configure GPIO pins : MS12_Pin MS3_Pin MS6_Pin MS9_Pin */
	GPIO_InitStruct.Pin = MS12_Pin|MS3_Pin|MS6_Pin|MS9_Pin;
 80071c2:	f640 4303 	movw	r3, #3075	; 0xc03
 80071c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071d0:	f107 0310 	add.w	r3, r7, #16
 80071d4:	4619      	mov	r1, r3
 80071d6:	4805      	ldr	r0, [pc, #20]	; (80071ec <MX_GPIO_Init+0xc4>)
 80071d8:	f7f9 ff54 	bl	8001084 <HAL_GPIO_Init>

}
 80071dc:	bf00      	nop
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	40021000 	.word	0x40021000
 80071e8:	40010800 	.word	0x40010800
 80071ec:	40010c00 	.word	0x40010c00

080071f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80071f0:	b480      	push	{r7}
 80071f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80071f4:	bf00      	nop
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr

080071fc <string_length>:

static uint8 string_length(sint8 str[])
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
	uint8 count;
	/* count the string start from element 0 until the element before the NULL terminator */
	for(count = 0; str[count] != '\0'; ++count);
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]
 8007208:	e002      	b.n	8007210 <string_length+0x14>
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	3301      	adds	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	4413      	add	r3, r2
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f6      	bne.n	800720a <string_length+0xe>
	return count;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr

08007228 <string_cat>:

static void string_cat(sint8 str1[],sint8 str2[])
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
	uint8 str1_length, count;
	/* This loop is to store the length of str1 in i
	 * It just counts the number of characters in str1
	 * You can also use strlen instead of this.
	 */
	str1_length = string_length(str1);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff ffe2 	bl	80071fc <string_length>
 8007238:	4603      	mov	r3, r0
 800723a:	73fb      	strb	r3, [r7, #15]

	/* This loop would concatenate the string str2 at
	 * the end of str1
	 */
	for(count=0; str2[count]!='\0'; ++count, ++str1_length)
 800723c:	2300      	movs	r3, #0
 800723e:	73bb      	strb	r3, [r7, #14]
 8007240:	e00d      	b.n	800725e <string_cat+0x36>
	{
		str1[str1_length]=str2[count];
 8007242:	7bbb      	ldrb	r3, [r7, #14]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	441a      	add	r2, r3
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	440b      	add	r3, r1
 800724e:	7812      	ldrb	r2, [r2, #0]
 8007250:	701a      	strb	r2, [r3, #0]
	for(count=0; str2[count]!='\0'; ++count, ++str1_length)
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	3301      	adds	r3, #1
 8007256:	73bb      	strb	r3, [r7, #14]
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	3301      	adds	r3, #1
 800725c:	73fb      	strb	r3, [r7, #15]
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	4413      	add	r3, r2
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1eb      	bne.n	8007242 <string_cat+0x1a>
	}
	/* \0 represents end of string */
	str1[str1_length]='\0';
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4413      	add	r3, r2
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <StringCopy>:

static void StringCopy(sint8 str1[], sint8 str2[]){
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
	uint8 count = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
	while(str2[count] != '\0'){
 800728a:	e00a      	b.n	80072a2 <StringCopy+0x26>
		str1[count] = str2[count];
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	441a      	add	r2, r3
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	440b      	add	r3, r1
 8007298:	7812      	ldrb	r2, [r2, #0]
 800729a:	701a      	strb	r2, [r3, #0]
		count++;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	3301      	adds	r3, #1
 80072a0:	73fb      	strb	r3, [r7, #15]
	while(str2[count] != '\0'){
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	4413      	add	r3, r2
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1ee      	bne.n	800728c <StringCopy+0x10>
	}
	str1[count] = '\0';
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	4413      	add	r3, r2
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]
}
 80072b8:	bf00      	nop
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr
	...

080072c4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80072ca:	f000 fa27 	bl	800771c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80072ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 80072d2:	2201      	movs	r2, #1
 80072d4:	2178      	movs	r1, #120	; 0x78
 80072d6:	485b      	ldr	r0, [pc, #364]	; (8007444 <SSD1306_Init+0x180>)
 80072d8:	f7fa faaa 	bl	8001830 <HAL_I2C_IsDeviceReady>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e0a9      	b.n	800743a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80072e6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80072ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80072ec:	e002      	b.n	80072f4 <SSD1306_Init+0x30>
		p--;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f9      	bne.n	80072ee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80072fa:	22ae      	movs	r2, #174	; 0xae
 80072fc:	2100      	movs	r1, #0
 80072fe:	2078      	movs	r0, #120	; 0x78
 8007300:	f000 fa68 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8007304:	2220      	movs	r2, #32
 8007306:	2100      	movs	r1, #0
 8007308:	2078      	movs	r0, #120	; 0x78
 800730a:	f000 fa63 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800730e:	2210      	movs	r2, #16
 8007310:	2100      	movs	r1, #0
 8007312:	2078      	movs	r0, #120	; 0x78
 8007314:	f000 fa5e 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007318:	22b0      	movs	r2, #176	; 0xb0
 800731a:	2100      	movs	r1, #0
 800731c:	2078      	movs	r0, #120	; 0x78
 800731e:	f000 fa59 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8007322:	22c8      	movs	r2, #200	; 0xc8
 8007324:	2100      	movs	r1, #0
 8007326:	2078      	movs	r0, #120	; 0x78
 8007328:	f000 fa54 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800732c:	2200      	movs	r2, #0
 800732e:	2100      	movs	r1, #0
 8007330:	2078      	movs	r0, #120	; 0x78
 8007332:	f000 fa4f 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8007336:	2210      	movs	r2, #16
 8007338:	2100      	movs	r1, #0
 800733a:	2078      	movs	r0, #120	; 0x78
 800733c:	f000 fa4a 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8007340:	2240      	movs	r2, #64	; 0x40
 8007342:	2100      	movs	r1, #0
 8007344:	2078      	movs	r0, #120	; 0x78
 8007346:	f000 fa45 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800734a:	2281      	movs	r2, #129	; 0x81
 800734c:	2100      	movs	r1, #0
 800734e:	2078      	movs	r0, #120	; 0x78
 8007350:	f000 fa40 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8007354:	22ff      	movs	r2, #255	; 0xff
 8007356:	2100      	movs	r1, #0
 8007358:	2078      	movs	r0, #120	; 0x78
 800735a:	f000 fa3b 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800735e:	22a1      	movs	r2, #161	; 0xa1
 8007360:	2100      	movs	r1, #0
 8007362:	2078      	movs	r0, #120	; 0x78
 8007364:	f000 fa36 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8007368:	22a6      	movs	r2, #166	; 0xa6
 800736a:	2100      	movs	r1, #0
 800736c:	2078      	movs	r0, #120	; 0x78
 800736e:	f000 fa31 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8007372:	22a8      	movs	r2, #168	; 0xa8
 8007374:	2100      	movs	r1, #0
 8007376:	2078      	movs	r0, #120	; 0x78
 8007378:	f000 fa2c 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800737c:	223f      	movs	r2, #63	; 0x3f
 800737e:	2100      	movs	r1, #0
 8007380:	2078      	movs	r0, #120	; 0x78
 8007382:	f000 fa27 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007386:	22a4      	movs	r2, #164	; 0xa4
 8007388:	2100      	movs	r1, #0
 800738a:	2078      	movs	r0, #120	; 0x78
 800738c:	f000 fa22 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8007390:	22d3      	movs	r2, #211	; 0xd3
 8007392:	2100      	movs	r1, #0
 8007394:	2078      	movs	r0, #120	; 0x78
 8007396:	f000 fa1d 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800739a:	2200      	movs	r2, #0
 800739c:	2100      	movs	r1, #0
 800739e:	2078      	movs	r0, #120	; 0x78
 80073a0:	f000 fa18 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80073a4:	22d5      	movs	r2, #213	; 0xd5
 80073a6:	2100      	movs	r1, #0
 80073a8:	2078      	movs	r0, #120	; 0x78
 80073aa:	f000 fa13 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80073ae:	22f0      	movs	r2, #240	; 0xf0
 80073b0:	2100      	movs	r1, #0
 80073b2:	2078      	movs	r0, #120	; 0x78
 80073b4:	f000 fa0e 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80073b8:	22d9      	movs	r2, #217	; 0xd9
 80073ba:	2100      	movs	r1, #0
 80073bc:	2078      	movs	r0, #120	; 0x78
 80073be:	f000 fa09 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80073c2:	2222      	movs	r2, #34	; 0x22
 80073c4:	2100      	movs	r1, #0
 80073c6:	2078      	movs	r0, #120	; 0x78
 80073c8:	f000 fa04 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80073cc:	22da      	movs	r2, #218	; 0xda
 80073ce:	2100      	movs	r1, #0
 80073d0:	2078      	movs	r0, #120	; 0x78
 80073d2:	f000 f9ff 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80073d6:	2212      	movs	r2, #18
 80073d8:	2100      	movs	r1, #0
 80073da:	2078      	movs	r0, #120	; 0x78
 80073dc:	f000 f9fa 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80073e0:	22db      	movs	r2, #219	; 0xdb
 80073e2:	2100      	movs	r1, #0
 80073e4:	2078      	movs	r0, #120	; 0x78
 80073e6:	f000 f9f5 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80073ea:	2220      	movs	r2, #32
 80073ec:	2100      	movs	r1, #0
 80073ee:	2078      	movs	r0, #120	; 0x78
 80073f0:	f000 f9f0 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80073f4:	228d      	movs	r2, #141	; 0x8d
 80073f6:	2100      	movs	r1, #0
 80073f8:	2078      	movs	r0, #120	; 0x78
 80073fa:	f000 f9eb 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80073fe:	2214      	movs	r2, #20
 8007400:	2100      	movs	r1, #0
 8007402:	2078      	movs	r0, #120	; 0x78
 8007404:	f000 f9e6 	bl	80077d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8007408:	22af      	movs	r2, #175	; 0xaf
 800740a:	2100      	movs	r1, #0
 800740c:	2078      	movs	r0, #120	; 0x78
 800740e:	f000 f9e1 	bl	80077d4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8007412:	222e      	movs	r2, #46	; 0x2e
 8007414:	2100      	movs	r1, #0
 8007416:	2078      	movs	r0, #120	; 0x78
 8007418:	f000 f9dc 	bl	80077d4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800741c:	2000      	movs	r0, #0
 800741e:	f000 f843 	bl	80074a8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8007422:	f000 f813 	bl	800744c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <SSD1306_Init+0x184>)
 8007428:	2200      	movs	r2, #0
 800742a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800742c:	4b06      	ldr	r3, [pc, #24]	; (8007448 <SSD1306_Init+0x184>)
 800742e:	2200      	movs	r2, #0
 8007430:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8007432:	4b05      	ldr	r3, [pc, #20]	; (8007448 <SSD1306_Init+0x184>)
 8007434:	2201      	movs	r2, #1
 8007436:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8007438:	2301      	movs	r3, #1
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	20003780 	.word	0x20003780
 8007448:	200006b8 	.word	0x200006b8

0800744c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8007452:	2300      	movs	r3, #0
 8007454:	71fb      	strb	r3, [r7, #7]
 8007456:	e01d      	b.n	8007494 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	3b50      	subs	r3, #80	; 0x50
 800745c:	b2db      	uxtb	r3, r3
 800745e:	461a      	mov	r2, r3
 8007460:	2100      	movs	r1, #0
 8007462:	2078      	movs	r0, #120	; 0x78
 8007464:	f000 f9b6 	bl	80077d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8007468:	2200      	movs	r2, #0
 800746a:	2100      	movs	r1, #0
 800746c:	2078      	movs	r0, #120	; 0x78
 800746e:	f000 f9b1 	bl	80077d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8007472:	2210      	movs	r2, #16
 8007474:	2100      	movs	r1, #0
 8007476:	2078      	movs	r0, #120	; 0x78
 8007478:	f000 f9ac 	bl	80077d4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	01db      	lsls	r3, r3, #7
 8007480:	4a08      	ldr	r2, [pc, #32]	; (80074a4 <SSD1306_UpdateScreen+0x58>)
 8007482:	441a      	add	r2, r3
 8007484:	2380      	movs	r3, #128	; 0x80
 8007486:	2140      	movs	r1, #64	; 0x40
 8007488:	2078      	movs	r0, #120	; 0x78
 800748a:	f000 f95b 	bl	8007744 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	3301      	adds	r3, #1
 8007492:	71fb      	strb	r3, [r7, #7]
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	2b07      	cmp	r3, #7
 8007498:	d9de      	bls.n	8007458 <SSD1306_UpdateScreen+0xc>
	}
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	200002b8 	.word	0x200002b8

080074a8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <SSD1306_Fill+0x14>
 80074b8:	2300      	movs	r3, #0
 80074ba:	e000      	b.n	80074be <SSD1306_Fill+0x16>
 80074bc:	23ff      	movs	r3, #255	; 0xff
 80074be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074c2:	4619      	mov	r1, r3
 80074c4:	4803      	ldr	r0, [pc, #12]	; (80074d4 <SSD1306_Fill+0x2c>)
 80074c6:	f000 fc57 	bl	8007d78 <memset>
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	200002b8 	.word	0x200002b8

080074d8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	80fb      	strh	r3, [r7, #6]
 80074e2:	460b      	mov	r3, r1
 80074e4:	80bb      	strh	r3, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	70fb      	strb	r3, [r7, #3]
	if (
 80074ea:	88fb      	ldrh	r3, [r7, #6]
 80074ec:	2b7f      	cmp	r3, #127	; 0x7f
 80074ee:	d848      	bhi.n	8007582 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80074f0:	88bb      	ldrh	r3, [r7, #4]
 80074f2:	2b3f      	cmp	r3, #63	; 0x3f
 80074f4:	d845      	bhi.n	8007582 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80074f6:	4b25      	ldr	r3, [pc, #148]	; (800758c <SSD1306_DrawPixel+0xb4>)
 80074f8:	791b      	ldrb	r3, [r3, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d006      	beq.n	800750c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80074fe:	78fb      	ldrb	r3, [r7, #3]
 8007500:	2b00      	cmp	r3, #0
 8007502:	bf0c      	ite	eq
 8007504:	2301      	moveq	r3, #1
 8007506:	2300      	movne	r3, #0
 8007508:	b2db      	uxtb	r3, r3
 800750a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d11a      	bne.n	8007548 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8007512:	88fa      	ldrh	r2, [r7, #6]
 8007514:	88bb      	ldrh	r3, [r7, #4]
 8007516:	08db      	lsrs	r3, r3, #3
 8007518:	b298      	uxth	r0, r3
 800751a:	4603      	mov	r3, r0
 800751c:	01db      	lsls	r3, r3, #7
 800751e:	4413      	add	r3, r2
 8007520:	4a1b      	ldr	r2, [pc, #108]	; (8007590 <SSD1306_DrawPixel+0xb8>)
 8007522:	5cd3      	ldrb	r3, [r2, r3]
 8007524:	b25a      	sxtb	r2, r3
 8007526:	88bb      	ldrh	r3, [r7, #4]
 8007528:	f003 0307 	and.w	r3, r3, #7
 800752c:	2101      	movs	r1, #1
 800752e:	fa01 f303 	lsl.w	r3, r1, r3
 8007532:	b25b      	sxtb	r3, r3
 8007534:	4313      	orrs	r3, r2
 8007536:	b259      	sxtb	r1, r3
 8007538:	88fa      	ldrh	r2, [r7, #6]
 800753a:	4603      	mov	r3, r0
 800753c:	01db      	lsls	r3, r3, #7
 800753e:	4413      	add	r3, r2
 8007540:	b2c9      	uxtb	r1, r1
 8007542:	4a13      	ldr	r2, [pc, #76]	; (8007590 <SSD1306_DrawPixel+0xb8>)
 8007544:	54d1      	strb	r1, [r2, r3]
 8007546:	e01d      	b.n	8007584 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8007548:	88fa      	ldrh	r2, [r7, #6]
 800754a:	88bb      	ldrh	r3, [r7, #4]
 800754c:	08db      	lsrs	r3, r3, #3
 800754e:	b298      	uxth	r0, r3
 8007550:	4603      	mov	r3, r0
 8007552:	01db      	lsls	r3, r3, #7
 8007554:	4413      	add	r3, r2
 8007556:	4a0e      	ldr	r2, [pc, #56]	; (8007590 <SSD1306_DrawPixel+0xb8>)
 8007558:	5cd3      	ldrb	r3, [r2, r3]
 800755a:	b25a      	sxtb	r2, r3
 800755c:	88bb      	ldrh	r3, [r7, #4]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	2101      	movs	r1, #1
 8007564:	fa01 f303 	lsl.w	r3, r1, r3
 8007568:	b25b      	sxtb	r3, r3
 800756a:	43db      	mvns	r3, r3
 800756c:	b25b      	sxtb	r3, r3
 800756e:	4013      	ands	r3, r2
 8007570:	b259      	sxtb	r1, r3
 8007572:	88fa      	ldrh	r2, [r7, #6]
 8007574:	4603      	mov	r3, r0
 8007576:	01db      	lsls	r3, r3, #7
 8007578:	4413      	add	r3, r2
 800757a:	b2c9      	uxtb	r1, r1
 800757c:	4a04      	ldr	r2, [pc, #16]	; (8007590 <SSD1306_DrawPixel+0xb8>)
 800757e:	54d1      	strb	r1, [r2, r3]
 8007580:	e000      	b.n	8007584 <SSD1306_DrawPixel+0xac>
		return;
 8007582:	bf00      	nop
	}
}
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	bc80      	pop	{r7}
 800758a:	4770      	bx	lr
 800758c:	200006b8 	.word	0x200006b8
 8007590:	200002b8 	.word	0x200002b8

08007594 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	460a      	mov	r2, r1
 800759e:	80fb      	strh	r3, [r7, #6]
 80075a0:	4613      	mov	r3, r2
 80075a2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80075a4:	4a05      	ldr	r2, [pc, #20]	; (80075bc <SSD1306_GotoXY+0x28>)
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80075aa:	4a04      	ldr	r2, [pc, #16]	; (80075bc <SSD1306_GotoXY+0x28>)
 80075ac:	88bb      	ldrh	r3, [r7, #4]
 80075ae:	8053      	strh	r3, [r2, #2]
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	200006b8 	.word	0x200006b8

080075c0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	6039      	str	r1, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
 80075cc:	4613      	mov	r3, r2
 80075ce:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80075d0:	4b3a      	ldr	r3, [pc, #232]	; (80076bc <SSD1306_Putc+0xfc>)
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	4413      	add	r3, r2
	if (
 80075dc:	2b7f      	cmp	r3, #127	; 0x7f
 80075de:	dc07      	bgt.n	80075f0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80075e0:	4b36      	ldr	r3, [pc, #216]	; (80076bc <SSD1306_Putc+0xfc>)
 80075e2:	885b      	ldrh	r3, [r3, #2]
 80075e4:	461a      	mov	r2, r3
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80075ec:	2b3f      	cmp	r3, #63	; 0x3f
 80075ee:	dd01      	ble.n	80075f4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	e05e      	b.n	80076b2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80075f4:	2300      	movs	r3, #0
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	e04b      	b.n	8007692 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	79fb      	ldrb	r3, [r7, #7]
 8007600:	3b20      	subs	r3, #32
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	7849      	ldrb	r1, [r1, #1]
 8007606:	fb01 f303 	mul.w	r3, r1, r3
 800760a:	4619      	mov	r1, r3
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	440b      	add	r3, r1
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	4413      	add	r3, r2
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8007618:	2300      	movs	r3, #0
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	e030      	b.n	8007680 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	fa02 f303 	lsl.w	r3, r2, r3
 8007626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d010      	beq.n	8007650 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800762e:	4b23      	ldr	r3, [pc, #140]	; (80076bc <SSD1306_Putc+0xfc>)
 8007630:	881a      	ldrh	r2, [r3, #0]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	b29b      	uxth	r3, r3
 8007636:	4413      	add	r3, r2
 8007638:	b298      	uxth	r0, r3
 800763a:	4b20      	ldr	r3, [pc, #128]	; (80076bc <SSD1306_Putc+0xfc>)
 800763c:	885a      	ldrh	r2, [r3, #2]
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	b29b      	uxth	r3, r3
 8007642:	4413      	add	r3, r2
 8007644:	b29b      	uxth	r3, r3
 8007646:	79ba      	ldrb	r2, [r7, #6]
 8007648:	4619      	mov	r1, r3
 800764a:	f7ff ff45 	bl	80074d8 <SSD1306_DrawPixel>
 800764e:	e014      	b.n	800767a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8007650:	4b1a      	ldr	r3, [pc, #104]	; (80076bc <SSD1306_Putc+0xfc>)
 8007652:	881a      	ldrh	r2, [r3, #0]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	b29b      	uxth	r3, r3
 8007658:	4413      	add	r3, r2
 800765a:	b298      	uxth	r0, r3
 800765c:	4b17      	ldr	r3, [pc, #92]	; (80076bc <SSD1306_Putc+0xfc>)
 800765e:	885a      	ldrh	r2, [r3, #2]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	b29b      	uxth	r3, r3
 8007664:	4413      	add	r3, r2
 8007666:	b299      	uxth	r1, r3
 8007668:	79bb      	ldrb	r3, [r7, #6]
 800766a:	2b00      	cmp	r3, #0
 800766c:	bf0c      	ite	eq
 800766e:	2301      	moveq	r3, #1
 8007670:	2300      	movne	r3, #0
 8007672:	b2db      	uxtb	r3, r3
 8007674:	461a      	mov	r2, r3
 8007676:	f7ff ff2f 	bl	80074d8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	3301      	adds	r3, #1
 800767e:	613b      	str	r3, [r7, #16]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	4293      	cmp	r3, r2
 800768a:	d3c8      	bcc.n	800761e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	3301      	adds	r3, #1
 8007690:	617b      	str	r3, [r7, #20]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	461a      	mov	r2, r3
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	4293      	cmp	r3, r2
 800769c:	d3ad      	bcc.n	80075fa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800769e:	4b07      	ldr	r3, [pc, #28]	; (80076bc <SSD1306_Putc+0xfc>)
 80076a0:	881a      	ldrh	r2, [r3, #0]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	4413      	add	r3, r2
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	4b03      	ldr	r3, [pc, #12]	; (80076bc <SSD1306_Putc+0xfc>)
 80076ae:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80076b0:	79fb      	ldrb	r3, [r7, #7]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	200006b8 	.word	0x200006b8

080076c0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80076ce:	e012      	b.n	80076f6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	79fa      	ldrb	r2, [r7, #7]
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff ff71 	bl	80075c0 <SSD1306_Putc>
 80076de:	4603      	mov	r3, r0
 80076e0:	461a      	mov	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d002      	beq.n	80076f0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	e008      	b.n	8007702 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e8      	bne.n	80076d0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	781b      	ldrb	r3, [r3, #0]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800770e:	2000      	movs	r0, #0
 8007710:	f7ff feca 	bl	80074a8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8007714:	f7ff fe9a 	bl	800744c <SSD1306_UpdateScreen>
}
 8007718:	bf00      	nop
 800771a:	bd80      	pop	{r7, pc}

0800771c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8007722:	4b07      	ldr	r3, [pc, #28]	; (8007740 <ssd1306_I2C_Init+0x24>)
 8007724:	607b      	str	r3, [r7, #4]
	while(p>0)
 8007726:	e002      	b.n	800772e <ssd1306_I2C_Init+0x12>
		p--;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3b01      	subs	r3, #1
 800772c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1f9      	bne.n	8007728 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr
 8007740:	0003d090 	.word	0x0003d090

08007744 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8007744:	b590      	push	{r4, r7, lr}
 8007746:	b0c7      	sub	sp, #284	; 0x11c
 8007748:	af02      	add	r7, sp, #8
 800774a:	4604      	mov	r4, r0
 800774c:	4608      	mov	r0, r1
 800774e:	4639      	mov	r1, r7
 8007750:	600a      	str	r2, [r1, #0]
 8007752:	4619      	mov	r1, r3
 8007754:	1dfb      	adds	r3, r7, #7
 8007756:	4622      	mov	r2, r4
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	1dbb      	adds	r3, r7, #6
 800775c:	4602      	mov	r2, r0
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	1d3b      	adds	r3, r7, #4
 8007762:	460a      	mov	r2, r1
 8007764:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8007766:	f107 030c 	add.w	r3, r7, #12
 800776a:	1dba      	adds	r2, r7, #6
 800776c:	7812      	ldrb	r2, [r2, #0]
 800776e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8007770:	2300      	movs	r3, #0
 8007772:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007776:	e010      	b.n	800779a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8007778:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800777c:	463a      	mov	r2, r7
 800777e:	6812      	ldr	r2, [r2, #0]
 8007780:	441a      	add	r2, r3
 8007782:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007786:	3301      	adds	r3, #1
 8007788:	7811      	ldrb	r1, [r2, #0]
 800778a:	f107 020c 	add.w	r2, r7, #12
 800778e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8007790:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007794:	3301      	adds	r3, #1
 8007796:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800779a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800779e:	b29b      	uxth	r3, r3
 80077a0:	1d3a      	adds	r2, r7, #4
 80077a2:	8812      	ldrh	r2, [r2, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d8e7      	bhi.n	8007778 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80077a8:	1dfb      	adds	r3, r7, #7
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	b299      	uxth	r1, r3
 80077ae:	1d3b      	adds	r3, r7, #4
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	3301      	adds	r3, #1
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	f107 020c 	add.w	r2, r7, #12
 80077ba:	200a      	movs	r0, #10
 80077bc:	9000      	str	r0, [sp, #0]
 80077be:	4804      	ldr	r0, [pc, #16]	; (80077d0 <ssd1306_I2C_WriteMulti+0x8c>)
 80077c0:	f7f9 ff28 	bl	8001614 <HAL_I2C_Master_Transmit>
}
 80077c4:	bf00      	nop
 80077c6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd90      	pop	{r4, r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20003780 	.word	0x20003780

080077d4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af02      	add	r7, sp, #8
 80077da:	4603      	mov	r3, r0
 80077dc:	71fb      	strb	r3, [r7, #7]
 80077de:	460b      	mov	r3, r1
 80077e0:	71bb      	strb	r3, [r7, #6]
 80077e2:	4613      	mov	r3, r2
 80077e4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80077e6:	79bb      	ldrb	r3, [r7, #6]
 80077e8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80077ea:	797b      	ldrb	r3, [r7, #5]
 80077ec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	b299      	uxth	r1, r3
 80077f2:	f107 020c 	add.w	r2, r7, #12
 80077f6:	230a      	movs	r3, #10
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	2302      	movs	r3, #2
 80077fc:	4803      	ldr	r0, [pc, #12]	; (800780c <ssd1306_I2C_Write+0x38>)
 80077fe:	f7f9 ff09 	bl	8001614 <HAL_I2C_Master_Transmit>
}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20003780 	.word	0x20003780

08007810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007816:	4b15      	ldr	r3, [pc, #84]	; (800786c <HAL_MspInit+0x5c>)
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	4a14      	ldr	r2, [pc, #80]	; (800786c <HAL_MspInit+0x5c>)
 800781c:	f043 0301 	orr.w	r3, r3, #1
 8007820:	6193      	str	r3, [r2, #24]
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <HAL_MspInit+0x5c>)
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	60bb      	str	r3, [r7, #8]
 800782c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800782e:	4b0f      	ldr	r3, [pc, #60]	; (800786c <HAL_MspInit+0x5c>)
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	4a0e      	ldr	r2, [pc, #56]	; (800786c <HAL_MspInit+0x5c>)
 8007834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007838:	61d3      	str	r3, [r2, #28]
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <HAL_MspInit+0x5c>)
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007842:	607b      	str	r3, [r7, #4]
 8007844:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007846:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <HAL_MspInit+0x60>)
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	4a04      	ldr	r2, [pc, #16]	; (8007870 <HAL_MspInit+0x60>)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007862:	bf00      	nop
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr
 800786c:	40021000 	.word	0x40021000
 8007870:	40010000 	.word	0x40010000

08007874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800787c:	f107 0310 	add.w	r3, r7, #16
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	605a      	str	r2, [r3, #4]
 8007886:	609a      	str	r2, [r3, #8]
 8007888:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a28      	ldr	r2, [pc, #160]	; (8007930 <HAL_ADC_MspInit+0xbc>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d149      	bne.n	8007928 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007894:	4b27      	ldr	r3, [pc, #156]	; (8007934 <HAL_ADC_MspInit+0xc0>)
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	4a26      	ldr	r2, [pc, #152]	; (8007934 <HAL_ADC_MspInit+0xc0>)
 800789a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800789e:	6193      	str	r3, [r2, #24]
 80078a0:	4b24      	ldr	r3, [pc, #144]	; (8007934 <HAL_ADC_MspInit+0xc0>)
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078ac:	4b21      	ldr	r3, [pc, #132]	; (8007934 <HAL_ADC_MspInit+0xc0>)
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	4a20      	ldr	r2, [pc, #128]	; (8007934 <HAL_ADC_MspInit+0xc0>)
 80078b2:	f043 0304 	orr.w	r3, r3, #4
 80078b6:	6193      	str	r3, [r2, #24]
 80078b8:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <HAL_ADC_MspInit+0xc0>)
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	60bb      	str	r3, [r7, #8]
 80078c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Joystick_xValue_Pin|Joystick_yValue_Pin;
 80078c4:	2306      	movs	r3, #6
 80078c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078c8:	2303      	movs	r3, #3
 80078ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078cc:	f107 0310 	add.w	r3, r7, #16
 80078d0:	4619      	mov	r1, r3
 80078d2:	4819      	ldr	r0, [pc, #100]	; (8007938 <HAL_ADC_MspInit+0xc4>)
 80078d4:	f7f9 fbd6 	bl	8001084 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80078d8:	4b18      	ldr	r3, [pc, #96]	; (800793c <HAL_ADC_MspInit+0xc8>)
 80078da:	4a19      	ldr	r2, [pc, #100]	; (8007940 <HAL_ADC_MspInit+0xcc>)
 80078dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078de:	4b17      	ldr	r3, [pc, #92]	; (800793c <HAL_ADC_MspInit+0xc8>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80078e4:	4b15      	ldr	r3, [pc, #84]	; (800793c <HAL_ADC_MspInit+0xc8>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80078ea:	4b14      	ldr	r3, [pc, #80]	; (800793c <HAL_ADC_MspInit+0xc8>)
 80078ec:	2280      	movs	r2, #128	; 0x80
 80078ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80078f0:	4b12      	ldr	r3, [pc, #72]	; (800793c <HAL_ADC_MspInit+0xc8>)
 80078f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80078f8:	4b10      	ldr	r3, [pc, #64]	; (800793c <HAL_ADC_MspInit+0xc8>)
 80078fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007900:	4b0e      	ldr	r3, [pc, #56]	; (800793c <HAL_ADC_MspInit+0xc8>)
 8007902:	2220      	movs	r2, #32
 8007904:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007906:	4b0d      	ldr	r3, [pc, #52]	; (800793c <HAL_ADC_MspInit+0xc8>)
 8007908:	2200      	movs	r2, #0
 800790a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800790c:	480b      	ldr	r0, [pc, #44]	; (800793c <HAL_ADC_MspInit+0xc8>)
 800790e:	f7f9 fa59 	bl	8000dc4 <HAL_DMA_Init>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8007918:	f7ff fc6a 	bl	80071f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a07      	ldr	r2, [pc, #28]	; (800793c <HAL_ADC_MspInit+0xc8>)
 8007920:	621a      	str	r2, [r3, #32]
 8007922:	4a06      	ldr	r2, [pc, #24]	; (800793c <HAL_ADC_MspInit+0xc8>)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007928:	bf00      	nop
 800792a:	3720      	adds	r7, #32
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	40012400 	.word	0x40012400
 8007934:	40021000 	.word	0x40021000
 8007938:	40010800 	.word	0x40010800
 800793c:	2000487c 	.word	0x2000487c
 8007940:	40020008 	.word	0x40020008

08007944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800794c:	f107 0310 	add.w	r3, r7, #16
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	609a      	str	r2, [r3, #8]
 8007958:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <HAL_I2C_MspInit+0x70>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d123      	bne.n	80079ac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007964:	4b14      	ldr	r3, [pc, #80]	; (80079b8 <HAL_I2C_MspInit+0x74>)
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	4a13      	ldr	r2, [pc, #76]	; (80079b8 <HAL_I2C_MspInit+0x74>)
 800796a:	f043 0308 	orr.w	r3, r3, #8
 800796e:	6193      	str	r3, [r2, #24]
 8007970:	4b11      	ldr	r3, [pc, #68]	; (80079b8 <HAL_I2C_MspInit+0x74>)
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	f003 0308 	and.w	r3, r3, #8
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800797c:	23c0      	movs	r3, #192	; 0xc0
 800797e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007980:	2312      	movs	r3, #18
 8007982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007984:	2303      	movs	r3, #3
 8007986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007988:	f107 0310 	add.w	r3, r7, #16
 800798c:	4619      	mov	r1, r3
 800798e:	480b      	ldr	r0, [pc, #44]	; (80079bc <HAL_I2C_MspInit+0x78>)
 8007990:	f7f9 fb78 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007994:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <HAL_I2C_MspInit+0x74>)
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	4a07      	ldr	r2, [pc, #28]	; (80079b8 <HAL_I2C_MspInit+0x74>)
 800799a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800799e:	61d3      	str	r3, [r2, #28]
 80079a0:	4b05      	ldr	r3, [pc, #20]	; (80079b8 <HAL_I2C_MspInit+0x74>)
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80079ac:	bf00      	nop
 80079ae:	3720      	adds	r7, #32
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40005400 	.word	0x40005400
 80079b8:	40021000 	.word	0x40021000
 80079bc:	40010c00 	.word	0x40010c00

080079c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c8:	f107 0310 	add.w	r3, r7, #16
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	605a      	str	r2, [r3, #4]
 80079d2:	609a      	str	r2, [r3, #8]
 80079d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a1b      	ldr	r2, [pc, #108]	; (8007a48 <HAL_SPI_MspInit+0x88>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d12f      	bne.n	8007a40 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80079e0:	4b1a      	ldr	r3, [pc, #104]	; (8007a4c <HAL_SPI_MspInit+0x8c>)
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	4a19      	ldr	r2, [pc, #100]	; (8007a4c <HAL_SPI_MspInit+0x8c>)
 80079e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079ea:	6193      	str	r3, [r2, #24]
 80079ec:	4b17      	ldr	r3, [pc, #92]	; (8007a4c <HAL_SPI_MspInit+0x8c>)
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079f8:	4b14      	ldr	r3, [pc, #80]	; (8007a4c <HAL_SPI_MspInit+0x8c>)
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	4a13      	ldr	r2, [pc, #76]	; (8007a4c <HAL_SPI_MspInit+0x8c>)
 80079fe:	f043 0304 	orr.w	r3, r3, #4
 8007a02:	6193      	str	r3, [r2, #24]
 8007a04:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <HAL_SPI_MspInit+0x8c>)
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	60bb      	str	r3, [r7, #8]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_CLK_Pin|SD_MOSI_Pin;
 8007a10:	23a0      	movs	r3, #160	; 0xa0
 8007a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a14:	2302      	movs	r3, #2
 8007a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a1c:	f107 0310 	add.w	r3, r7, #16
 8007a20:	4619      	mov	r1, r3
 8007a22:	480b      	ldr	r0, [pc, #44]	; (8007a50 <HAL_SPI_MspInit+0x90>)
 8007a24:	f7f9 fb2e 	bl	8001084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin;
 8007a28:	2340      	movs	r3, #64	; 0x40
 8007a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 8007a34:	f107 0310 	add.w	r3, r7, #16
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4805      	ldr	r0, [pc, #20]	; (8007a50 <HAL_SPI_MspInit+0x90>)
 8007a3c:	f7f9 fb22 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007a40:	bf00      	nop
 8007a42:	3720      	adds	r7, #32
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	40013000 	.word	0x40013000
 8007a4c:	40021000 	.word	0x40021000
 8007a50:	40010800 	.word	0x40010800

08007a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a5c:	f107 0310 	add.w	r3, r7, #16
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	605a      	str	r2, [r3, #4]
 8007a66:	609a      	str	r2, [r3, #8]
 8007a68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <HAL_UART_MspInit+0x8c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d131      	bne.n	8007ad8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007a74:	4b1b      	ldr	r3, [pc, #108]	; (8007ae4 <HAL_UART_MspInit+0x90>)
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	4a1a      	ldr	r2, [pc, #104]	; (8007ae4 <HAL_UART_MspInit+0x90>)
 8007a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a7e:	6193      	str	r3, [r2, #24]
 8007a80:	4b18      	ldr	r3, [pc, #96]	; (8007ae4 <HAL_UART_MspInit+0x90>)
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a8c:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <HAL_UART_MspInit+0x90>)
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	4a14      	ldr	r2, [pc, #80]	; (8007ae4 <HAL_UART_MspInit+0x90>)
 8007a92:	f043 0304 	orr.w	r3, r3, #4
 8007a96:	6193      	str	r3, [r2, #24]
 8007a98:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <HAL_UART_MspInit+0x90>)
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	60bb      	str	r3, [r7, #8]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aaa:	2302      	movs	r3, #2
 8007aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ab2:	f107 0310 	add.w	r3, r7, #16
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	480b      	ldr	r0, [pc, #44]	; (8007ae8 <HAL_UART_MspInit+0x94>)
 8007aba:	f7f9 fae3 	bl	8001084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007acc:	f107 0310 	add.w	r3, r7, #16
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4805      	ldr	r0, [pc, #20]	; (8007ae8 <HAL_UART_MspInit+0x94>)
 8007ad4:	f7f9 fad6 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007ad8:	bf00      	nop
 8007ada:	3720      	adds	r7, #32
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40013800 	.word	0x40013800
 8007ae4:	40021000 	.word	0x40021000
 8007ae8:	40010800 	.word	0x40010800

08007aec <SDTimer_Handler>:
/* USER CODE BEGIN EV */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007af0:	4b0d      	ldr	r3, [pc, #52]	; (8007b28 <SDTimer_Handler+0x3c>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d006      	beq.n	8007b08 <SDTimer_Handler+0x1c>
    Timer1--;
 8007afa:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <SDTimer_Handler+0x3c>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	3b01      	subs	r3, #1
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	4b08      	ldr	r3, [pc, #32]	; (8007b28 <SDTimer_Handler+0x3c>)
 8007b06:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8007b08:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <SDTimer_Handler+0x40>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d006      	beq.n	8007b20 <SDTimer_Handler+0x34>
    Timer2--;
 8007b12:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <SDTimer_Handler+0x40>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	4b03      	ldr	r3, [pc, #12]	; (8007b2c <SDTimer_Handler+0x40>)
 8007b1e:	701a      	strb	r2, [r3, #0]
}
 8007b20:	bf00      	nop
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr
 8007b28:	20004922 	.word	0x20004922
 8007b2c:	20004921 	.word	0x20004921

08007b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007b34:	bf00      	nop
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr

08007b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b40:	e7fe      	b.n	8007b40 <HardFault_Handler+0x4>

08007b42 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b42:	b480      	push	{r7}
 8007b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b46:	e7fe      	b.n	8007b46 <MemManage_Handler+0x4>

08007b48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b4c:	e7fe      	b.n	8007b4c <BusFault_Handler+0x4>

08007b4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b52:	e7fe      	b.n	8007b52 <UsageFault_Handler+0x4>

08007b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007b54:	b480      	push	{r7}
 8007b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007b58:	bf00      	nop
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bc80      	pop	{r7}
 8007b5e:	4770      	bx	lr

08007b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b64:	bf00      	nop
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc80      	pop	{r7}
 8007b6a:	4770      	bx	lr

08007b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007b70:	bf00      	nop
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bc80      	pop	{r7}
 8007b76:	4770      	bx	lr

08007b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
  {
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
  	FatFsCnt++;
 8007b7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <SysTick_Handler+0x30>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	3301      	adds	r3, #1
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	4b08      	ldr	r3, [pc, #32]	; (8007ba8 <SysTick_Handler+0x30>)
 8007b88:	701a      	strb	r2, [r3, #0]
    if(FatFsCnt >= 10)
 8007b8a:	4b07      	ldr	r3, [pc, #28]	; (8007ba8 <SysTick_Handler+0x30>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b09      	cmp	r3, #9
 8007b92:	d904      	bls.n	8007b9e <SysTick_Handler+0x26>
    {
      FatFsCnt = 0;
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <SysTick_Handler+0x30>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
      SDTimer_Handler();
 8007b9a:	f7ff ffa7 	bl	8007aec <SDTimer_Handler>
    }
    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8007b9e:	f7f8 fb1b 	bl	80001d8 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
  }
 8007ba2:	bf00      	nop
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	200006be 	.word	0x200006be

08007bac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007bb0:	4802      	ldr	r0, [pc, #8]	; (8007bbc <DMA1_Channel1_IRQHandler+0x10>)
 8007bb2:	f7f9 f961 	bl	8000e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007bb6:	bf00      	nop
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	2000487c 	.word	0x2000487c

08007bc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007bc4:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <SystemInit+0x5c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a14      	ldr	r2, [pc, #80]	; (8007c1c <SystemInit+0x5c>)
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007bd0:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <SystemInit+0x5c>)
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	4911      	ldr	r1, [pc, #68]	; (8007c1c <SystemInit+0x5c>)
 8007bd6:	4b12      	ldr	r3, [pc, #72]	; (8007c20 <SystemInit+0x60>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007bdc:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <SystemInit+0x5c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a0e      	ldr	r2, [pc, #56]	; (8007c1c <SystemInit+0x5c>)
 8007be2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007bec:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <SystemInit+0x5c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <SystemInit+0x5c>)
 8007bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bf6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8007bf8:	4b08      	ldr	r3, [pc, #32]	; (8007c1c <SystemInit+0x5c>)
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	4a07      	ldr	r2, [pc, #28]	; (8007c1c <SystemInit+0x5c>)
 8007bfe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007c02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8007c04:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <SystemInit+0x5c>)
 8007c06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8007c0a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <SystemInit+0x64>)
 8007c0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c12:	609a      	str	r2, [r3, #8]
#endif 
}
 8007c14:	bf00      	nop
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr
 8007c1c:	40021000 	.word	0x40021000
 8007c20:	f8ff0000 	.word	0xf8ff0000
 8007c24:	e000ed00 	.word	0xe000ed00

08007c28 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fe fc65 	bl	8006504 <SD_disk_initialize>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <USER_initialize+0x28>)
 8007c40:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007c42:	4b03      	ldr	r3, [pc, #12]	; (8007c50 <USER_initialize+0x28>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	20000018 	.word	0x20000018

08007c54 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fd39 	bl	80066d8 <SD_disk_status>
 8007c66:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8007c80:	7bf8      	ldrb	r0, [r7, #15]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	68b9      	ldr	r1, [r7, #8]
 8007c88:	f7fe fd3a 	bl	8006700 <SD_disk_read>
 8007c8c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8007ca6:	7bf8      	ldrb	r0, [r7, #15]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68b9      	ldr	r1, [r7, #8]
 8007cae:	f7fe fd91 	bl	80067d4 <SD_disk_write>
 8007cb2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	603a      	str	r2, [r7, #0]
 8007cc6:	71fb      	strb	r3, [r7, #7]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8007ccc:	79b9      	ldrb	r1, [r7, #6]
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fe02 	bl	80068dc <SD_disk_ioctl>
 8007cd8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007ce4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007ce6:	e003      	b.n	8007cf0 <LoopCopyDataInit>

08007ce8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007ce8:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007cea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007cec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007cee:	3104      	adds	r1, #4

08007cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007cf0:	480a      	ldr	r0, [pc, #40]	; (8007d1c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007cf2:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007cf4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007cf6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007cf8:	d3f6      	bcc.n	8007ce8 <CopyDataInit>
  ldr r2, =_sbss
 8007cfa:	4a0a      	ldr	r2, [pc, #40]	; (8007d24 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007cfc:	e002      	b.n	8007d04 <LoopFillZerobss>

08007cfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007cfe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007d00:	f842 3b04 	str.w	r3, [r2], #4

08007d04 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007d04:	4b08      	ldr	r3, [pc, #32]	; (8007d28 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007d06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007d08:	d3f9      	bcc.n	8007cfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007d0a:	f7ff ff59 	bl	8007bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d0e:	f000 f80f 	bl	8007d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007d12:	f7fe ff15 	bl	8006b40 <main>
  bx lr
 8007d16:	4770      	bx	lr
  ldr r3, =_sidata
 8007d18:	0800916c 	.word	0x0800916c
  ldr r0, =_sdata
 8007d1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007d20:	20000030 	.word	0x20000030
  ldr r2, =_sbss
 8007d24:	20000030 	.word	0x20000030
  ldr r3, = _ebss
 8007d28:	20004924 	.word	0x20004924

08007d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007d2c:	e7fe      	b.n	8007d2c <ADC1_2_IRQHandler>
	...

08007d30 <__libc_init_array>:
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	2600      	movs	r6, #0
 8007d34:	4d0c      	ldr	r5, [pc, #48]	; (8007d68 <__libc_init_array+0x38>)
 8007d36:	4c0d      	ldr	r4, [pc, #52]	; (8007d6c <__libc_init_array+0x3c>)
 8007d38:	1b64      	subs	r4, r4, r5
 8007d3a:	10a4      	asrs	r4, r4, #2
 8007d3c:	42a6      	cmp	r6, r4
 8007d3e:	d109      	bne.n	8007d54 <__libc_init_array+0x24>
 8007d40:	f000 f822 	bl	8007d88 <_init>
 8007d44:	2600      	movs	r6, #0
 8007d46:	4d0a      	ldr	r5, [pc, #40]	; (8007d70 <__libc_init_array+0x40>)
 8007d48:	4c0a      	ldr	r4, [pc, #40]	; (8007d74 <__libc_init_array+0x44>)
 8007d4a:	1b64      	subs	r4, r4, r5
 8007d4c:	10a4      	asrs	r4, r4, #2
 8007d4e:	42a6      	cmp	r6, r4
 8007d50:	d105      	bne.n	8007d5e <__libc_init_array+0x2e>
 8007d52:	bd70      	pop	{r4, r5, r6, pc}
 8007d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d58:	4798      	blx	r3
 8007d5a:	3601      	adds	r6, #1
 8007d5c:	e7ee      	b.n	8007d3c <__libc_init_array+0xc>
 8007d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d62:	4798      	blx	r3
 8007d64:	3601      	adds	r6, #1
 8007d66:	e7f2      	b.n	8007d4e <__libc_init_array+0x1e>
 8007d68:	08009164 	.word	0x08009164
 8007d6c:	08009164 	.word	0x08009164
 8007d70:	08009164 	.word	0x08009164
 8007d74:	08009168 	.word	0x08009168

08007d78 <memset>:
 8007d78:	4603      	mov	r3, r0
 8007d7a:	4402      	add	r2, r0
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d100      	bne.n	8007d82 <memset+0xa>
 8007d80:	4770      	bx	lr
 8007d82:	f803 1b01 	strb.w	r1, [r3], #1
 8007d86:	e7f9      	b.n	8007d7c <memset+0x4>

08007d88 <_init>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	bf00      	nop
 8007d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8e:	bc08      	pop	{r3}
 8007d90:	469e      	mov	lr, r3
 8007d92:	4770      	bx	lr

08007d94 <_fini>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr
