
GCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004794  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f8  080048f8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080048f8  080048f8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048f8  080048f8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048fc  080048fc  000148fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042fc  20000024  08004924  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004320  08004924  00024320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002082b  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ffc  00000000  00000000  00040878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00044878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00045908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019158  00000000  00000000  000467f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019017  00000000  00000000  0005f950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076397  00000000  00000000  00078967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004c  00000000  00000000  000eecfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004318  00000000  00000000  000eed4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08004888 	.word	0x08004888

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08004888 	.word	0x08004888

0800014c <HAL_Init>:
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fc17 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>
 8000168:	f004 f8d2 	bl	8004310 <HAL_MspInit>
 800016c:	2300      	movs	r3, #0
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fc2f 	bl	80009fa <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fbf7 	bl	80009a6 <HAL_NVIC_SetPriority>
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
 80001c2:	2301      	movs	r3, #1
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000ac 	.word	0x200000ac

080001fc <HAL_GetTick>:
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000ac 	.word	0x200000ac

08000210 <HAL_ADC_Init>:
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d101      	bne.n	8000232 <HAL_ADC_Init+0x22>
 800022e:	2301      	movs	r3, #1
 8000230:	e0be      	b.n	80003b0 <HAL_ADC_Init+0x1a0>
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	2b00      	cmp	r3, #0
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023c:	2b00      	cmp	r3, #0
 800023e:	d109      	bne.n	8000254 <HAL_ADC_Init+0x44>
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f004 f890 	bl	8004374 <HAL_ADC_MspInit>
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 f9fd 	bl	8000654 <ADC_ConversionStop_Disable>
 800025a:	4603      	mov	r3, r0
 800025c:	75fb      	strb	r3, [r7, #23]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8099 	bne.w	800039e <HAL_ADC_Init+0x18e>
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8095 	bne.w	800039e <HAL_ADC_Init+0x18e>
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800027c:	f023 0302 	bic.w	r3, r3, #2
 8000280:	f043 0202 	orr.w	r2, r3, #2
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
 8000290:	431a      	orrs	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	4313      	orrs	r3, r2
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4313      	orrs	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002a8:	d003      	beq.n	80002b2 <HAL_ADC_Init+0xa2>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <HAL_ADC_Init+0xa8>
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	e000      	b.n	80002ba <HAL_ADC_Init+0xaa>
 80002b8:	2300      	movs	r3, #0
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	4313      	orrs	r3, r2
 80002be:	613b      	str	r3, [r7, #16]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d119      	bne.n	80002fc <HAL_ADC_Init+0xec>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <HAL_ADC_Init+0xd4>
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	035a      	lsls	r2, r3, #13
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	4313      	orrs	r3, r2
 80002dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	e00b      	b.n	80002fc <HAL_ADC_Init+0xec>
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e8:	f043 0220 	orr.w	r2, r3, #32
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	f043 0201 	orr.w	r2, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	693a      	ldr	r2, [r7, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <HAL_ADC_Init+0x1a8>)
 8000318:	4013      	ands	r3, r2
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	6812      	ldr	r2, [r2, #0]
 800031e:	68b9      	ldr	r1, [r7, #8]
 8000320:	430b      	orrs	r3, r1
 8000322:	6093      	str	r3, [r2, #8]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800032c:	d003      	beq.n	8000336 <HAL_ADC_Init+0x126>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d104      	bne.n	8000340 <HAL_ADC_Init+0x130>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	3b01      	subs	r3, #1
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000346:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	430a      	orrs	r2, r1
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <HAL_ADC_Init+0x1ac>)
 800035c:	4013      	ands	r3, r2
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	429a      	cmp	r2, r3
 8000362:	d10b      	bne.n	800037c <HAL_ADC_Init+0x16c>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	f043 0201 	orr.w	r2, r3, #1
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
 800037a:	e018      	b.n	80003ae <HAL_ADC_Init+0x19e>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f023 0312 	bic.w	r3, r3, #18
 8000384:	f043 0210 	orr.w	r2, r3, #16
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000390:	f043 0201 	orr.w	r2, r3, #1
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
 8000398:	2301      	movs	r3, #1
 800039a:	75fb      	strb	r3, [r7, #23]
 800039c:	e007      	b.n	80003ae <HAL_ADC_Init+0x19e>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a2:	f043 0210 	orr.w	r2, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
 80003aa:	2301      	movs	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
 80003b0:	4618      	mov	r0, r3
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	ffe1f7fd 	.word	0xffe1f7fd
 80003bc:	ff1f0efe 	.word	0xff1f0efe

080003c0 <HAL_ADC_ConfigChannel>:
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
 80003ca:	2300      	movs	r3, #0
 80003cc:	73fb      	strb	r3, [r7, #15]
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d101      	bne.n	80003e0 <HAL_ADC_ConfigChannel+0x20>
 80003dc:	2302      	movs	r3, #2
 80003de:	e0dc      	b.n	800059a <HAL_ADC_ConfigChannel+0x1da>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2201      	movs	r2, #1
 80003e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	2b06      	cmp	r3, #6
 80003ee:	d81c      	bhi.n	800042a <HAL_ADC_ConfigChannel+0x6a>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	685a      	ldr	r2, [r3, #4]
 80003fa:	4613      	mov	r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	4413      	add	r3, r2
 8000400:	3b05      	subs	r3, #5
 8000402:	221f      	movs	r2, #31
 8000404:	fa02 f303 	lsl.w	r3, r2, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	4019      	ands	r1, r3
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	6818      	ldr	r0, [r3, #0]
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	685a      	ldr	r2, [r3, #4]
 8000414:	4613      	mov	r3, r2
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	4413      	add	r3, r2
 800041a:	3b05      	subs	r3, #5
 800041c:	fa00 f203 	lsl.w	r2, r0, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	430a      	orrs	r2, r1
 8000426:	635a      	str	r2, [r3, #52]	; 0x34
 8000428:	e03c      	b.n	80004a4 <HAL_ADC_ConfigChannel+0xe4>
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	2b0c      	cmp	r3, #12
 8000430:	d81c      	bhi.n	800046c <HAL_ADC_ConfigChannel+0xac>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685a      	ldr	r2, [r3, #4]
 800043c:	4613      	mov	r3, r2
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	4413      	add	r3, r2
 8000442:	3b23      	subs	r3, #35	; 0x23
 8000444:	221f      	movs	r2, #31
 8000446:	fa02 f303 	lsl.w	r3, r2, r3
 800044a:	43db      	mvns	r3, r3
 800044c:	4019      	ands	r1, r3
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	6818      	ldr	r0, [r3, #0]
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	685a      	ldr	r2, [r3, #4]
 8000456:	4613      	mov	r3, r2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4413      	add	r3, r2
 800045c:	3b23      	subs	r3, #35	; 0x23
 800045e:	fa00 f203 	lsl.w	r2, r0, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	430a      	orrs	r2, r1
 8000468:	631a      	str	r2, [r3, #48]	; 0x30
 800046a:	e01b      	b.n	80004a4 <HAL_ADC_ConfigChannel+0xe4>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	4613      	mov	r3, r2
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	4413      	add	r3, r2
 800047c:	3b41      	subs	r3, #65	; 0x41
 800047e:	221f      	movs	r2, #31
 8000480:	fa02 f303 	lsl.w	r3, r2, r3
 8000484:	43db      	mvns	r3, r3
 8000486:	4019      	ands	r1, r3
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	6818      	ldr	r0, [r3, #0]
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	4613      	mov	r3, r2
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	4413      	add	r3, r2
 8000496:	3b41      	subs	r3, #65	; 0x41
 8000498:	fa00 f203 	lsl.w	r2, r0, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b09      	cmp	r3, #9
 80004aa:	d91c      	bls.n	80004e6 <HAL_ADC_ConfigChannel+0x126>
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	68d9      	ldr	r1, [r3, #12]
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4613      	mov	r3, r2
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	4413      	add	r3, r2
 80004bc:	3b1e      	subs	r3, #30
 80004be:	2207      	movs	r2, #7
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	43db      	mvns	r3, r3
 80004c6:	4019      	ands	r1, r3
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	6898      	ldr	r0, [r3, #8]
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4613      	mov	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	4413      	add	r3, r2
 80004d6:	3b1e      	subs	r3, #30
 80004d8:	fa00 f203 	lsl.w	r2, r0, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	430a      	orrs	r2, r1
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	e019      	b.n	800051a <HAL_ADC_ConfigChannel+0x15a>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	6919      	ldr	r1, [r3, #16]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4613      	mov	r3, r2
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	4413      	add	r3, r2
 80004f6:	2207      	movs	r2, #7
 80004f8:	fa02 f303 	lsl.w	r3, r2, r3
 80004fc:	43db      	mvns	r3, r3
 80004fe:	4019      	ands	r1, r3
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	6898      	ldr	r0, [r3, #8]
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4613      	mov	r3, r2
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4413      	add	r3, r2
 800050e:	fa00 f203 	lsl.w	r2, r0, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	430a      	orrs	r2, r1
 8000518:	611a      	str	r2, [r3, #16]
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b10      	cmp	r3, #16
 8000520:	d003      	beq.n	800052a <HAL_ADC_ConfigChannel+0x16a>
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b11      	cmp	r3, #17
 8000528:	d132      	bne.n	8000590 <HAL_ADC_ConfigChannel+0x1d0>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d125      	bne.n	8000580 <HAL_ADC_ConfigChannel+0x1c0>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800053e:	2b00      	cmp	r3, #0
 8000540:	d126      	bne.n	8000590 <HAL_ADC_ConfigChannel+0x1d0>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	689a      	ldr	r2, [r3, #8]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b10      	cmp	r3, #16
 8000558:	d11a      	bne.n	8000590 <HAL_ADC_ConfigChannel+0x1d0>
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a13      	ldr	r2, [pc, #76]	; (80005ac <HAL_ADC_ConfigChannel+0x1ec>)
 8000560:	fba2 2303 	umull	r2, r3, r2, r3
 8000564:	0c9a      	lsrs	r2, r3, #18
 8000566:	4613      	mov	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	e002      	b.n	8000578 <HAL_ADC_ConfigChannel+0x1b8>
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	3b01      	subs	r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f9      	bne.n	8000572 <HAL_ADC_ConfigChannel+0x1b2>
 800057e:	e007      	b.n	8000590 <HAL_ADC_ConfigChannel+0x1d0>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000584:	f043 0220 	orr.w	r2, r3, #32
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	629a      	str	r2, [r3, #40]	; 0x28
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	4618      	mov	r0, r3
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	40012400 	.word	0x40012400
 80005a8:	20000008 	.word	0x20000008
 80005ac:	431bde83 	.word	0x431bde83

080005b0 <ADC_Enable>:
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d039      	beq.n	8000642 <ADC_Enable+0x92>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	689a      	ldr	r2, [r3, #8]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f042 0201 	orr.w	r2, r2, #1
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <ADC_Enable+0x9c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <ADC_Enable+0xa0>)
 80005e4:	fba2 2303 	umull	r2, r3, r2, r3
 80005e8:	0c9b      	lsrs	r3, r3, #18
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	e002      	b.n	80005f4 <ADC_Enable+0x44>
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f9      	bne.n	80005ee <ADC_Enable+0x3e>
 80005fa:	f7ff fdff 	bl	80001fc <HAL_GetTick>
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	e018      	b.n	8000634 <ADC_Enable+0x84>
 8000602:	f7ff fdfb 	bl	80001fc <HAL_GetTick>
 8000606:	4602      	mov	r2, r0
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	2b02      	cmp	r3, #2
 800060e:	d911      	bls.n	8000634 <ADC_Enable+0x84>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000614:	f043 0210 	orr.w	r2, r3, #16
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000620:	f043 0201 	orr.w	r2, r3, #1
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000630:	2301      	movs	r3, #1
 8000632:	e007      	b.n	8000644 <ADC_Enable+0x94>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b01      	cmp	r3, #1
 8000640:	d1df      	bne.n	8000602 <ADC_Enable+0x52>
 8000642:	2300      	movs	r3, #0
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000008 	.word	0x20000008
 8000650:	431bde83 	.word	0x431bde83

08000654 <ADC_ConversionStop_Disable>:
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	2b01      	cmp	r3, #1
 800066c:	d127      	bne.n	80006be <ADC_ConversionStop_Disable+0x6a>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f022 0201 	bic.w	r2, r2, #1
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	f7ff fdbd 	bl	80001fc <HAL_GetTick>
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	e014      	b.n	80006b0 <ADC_ConversionStop_Disable+0x5c>
 8000686:	f7ff fdb9 	bl	80001fc <HAL_GetTick>
 800068a:	4602      	mov	r2, r0
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	2b02      	cmp	r3, #2
 8000692:	d90d      	bls.n	80006b0 <ADC_ConversionStop_Disable+0x5c>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000698:	f043 0210 	orr.w	r2, r3, #16
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a4:	f043 0201 	orr.w	r2, r3, #1
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ac:	2301      	movs	r3, #1
 80006ae:	e007      	b.n	80006c0 <ADC_ConversionStop_Disable+0x6c>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d0e3      	beq.n	8000686 <ADC_ConversionStop_Disable+0x32>
 80006be:	2300      	movs	r3, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <HAL_ADCEx_Calibration_Start>:
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	2300      	movs	r3, #0
 80006d2:	75fb      	strb	r3, [r7, #23]
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d101      	bne.n	80006e6 <HAL_ADCEx_Calibration_Start+0x1e>
 80006e2:	2302      	movs	r3, #2
 80006e4:	e086      	b.n	80007f4 <HAL_ADCEx_Calibration_Start+0x12c>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2201      	movs	r2, #1
 80006ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff ffb0 	bl	8000654 <ADC_ConversionStop_Disable>
 80006f4:	4603      	mov	r3, r0
 80006f6:	75fb      	strb	r3, [r7, #23]
 80006f8:	7dfb      	ldrb	r3, [r7, #23]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d175      	bne.n	80007ea <HAL_ADCEx_Calibration_Start+0x122>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000702:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000706:	f023 0302 	bic.w	r3, r3, #2
 800070a:	f043 0202 	orr.w	r2, r3, #2
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
 8000712:	4b3a      	ldr	r3, [pc, #232]	; (80007fc <HAL_ADCEx_Calibration_Start+0x134>)
 8000714:	681c      	ldr	r4, [r3, #0]
 8000716:	2002      	movs	r0, #2
 8000718:	f001 fa64 	bl	8001be4 <HAL_RCCEx_GetPeriphCLKFreq>
 800071c:	4603      	mov	r3, r0
 800071e:	fbb4 f3f3 	udiv	r3, r4, r3
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e002      	b.n	800072e <HAL_ADCEx_Calibration_Start+0x66>
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3b01      	subs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1f9      	bne.n	8000728 <HAL_ADCEx_Calibration_Start+0x60>
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff3b 	bl	80005b0 <ADC_Enable>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	689a      	ldr	r2, [r3, #8]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f042 0208 	orr.w	r2, r2, #8
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	f7ff fd57 	bl	80001fc <HAL_GetTick>
 800074e:	6138      	str	r0, [r7, #16]
 8000750:	e014      	b.n	800077c <HAL_ADCEx_Calibration_Start+0xb4>
 8000752:	f7ff fd53 	bl	80001fc <HAL_GetTick>
 8000756:	4602      	mov	r2, r0
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	2b0a      	cmp	r3, #10
 800075e:	d90d      	bls.n	800077c <HAL_ADCEx_Calibration_Start+0xb4>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000764:	f023 0312 	bic.w	r3, r3, #18
 8000768:	f043 0210 	orr.w	r2, r3, #16
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000778:	2301      	movs	r3, #1
 800077a:	e03b      	b.n	80007f4 <HAL_ADCEx_Calibration_Start+0x12c>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1e3      	bne.n	8000752 <HAL_ADCEx_Calibration_Start+0x8a>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f042 0204 	orr.w	r2, r2, #4
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	f7ff fd2f 	bl	80001fc <HAL_GetTick>
 800079e:	6138      	str	r0, [r7, #16]
 80007a0:	e014      	b.n	80007cc <HAL_ADCEx_Calibration_Start+0x104>
 80007a2:	f7ff fd2b 	bl	80001fc <HAL_GetTick>
 80007a6:	4602      	mov	r2, r0
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	2b0a      	cmp	r3, #10
 80007ae:	d90d      	bls.n	80007cc <HAL_ADCEx_Calibration_Start+0x104>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b4:	f023 0312 	bic.w	r3, r3, #18
 80007b8:	f043 0210 	orr.w	r2, r3, #16
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80007c8:	2301      	movs	r3, #1
 80007ca:	e013      	b.n	80007f4 <HAL_ADCEx_Calibration_Start+0x12c>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1e3      	bne.n	80007a2 <HAL_ADCEx_Calibration_Start+0xda>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007de:	f023 0303 	bic.w	r3, r3, #3
 80007e2:	f043 0201 	orr.w	r2, r3, #1
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80007f2:	7dfb      	ldrb	r3, [r7, #23]
 80007f4:	4618      	mov	r0, r3
 80007f6:	371c      	adds	r7, #28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	20000008 	.word	0x20000008

08000800 <NVIC_SetPriorityGrouping>:
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_GetPriorityGrouping>:
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EnableIRQ>:
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 021f 	and.w	r2, r3, #31
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <NVIC_EnableIRQ+0x2c>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	095b      	lsrs	r3, r3, #5
 800087c:	2001      	movs	r0, #1
 800087e:	fa00 f202 	lsl.w	r2, r0, r2
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	e000e100 	.word	0xe000e100

08000894 <NVIC_SetPriority>:
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	da0b      	bge.n	80008c0 <NVIC_SetPriority+0x2c>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	490c      	ldr	r1, [pc, #48]	; (80008e0 <NVIC_SetPriority+0x4c>)
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	3b04      	subs	r3, #4
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	761a      	strb	r2, [r3, #24]
 80008be:	e009      	b.n	80008d4 <NVIC_SetPriority+0x40>
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4907      	ldr	r1, [pc, #28]	; (80008e4 <NVIC_SetPriority+0x50>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	0112      	lsls	r2, r2, #4
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	440b      	add	r3, r1
 80008d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00
 80008e4:	e000e100 	.word	0xe000e100

080008e8 <NVIC_EncodePriority>:
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	61fb      	str	r3, [r7, #28]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f1c3 0307 	rsb	r3, r3, #7
 8000902:	2b04      	cmp	r3, #4
 8000904:	bf28      	it	cs
 8000906:	2304      	movcs	r3, #4
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3304      	adds	r3, #4
 800090e:	2b06      	cmp	r3, #6
 8000910:	d902      	bls.n	8000918 <NVIC_EncodePriority+0x30>
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3b03      	subs	r3, #3
 8000916:	e000      	b.n	800091a <NVIC_EncodePriority+0x32>
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	f04f 32ff 	mov.w	r2, #4294967295
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43da      	mvns	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	401a      	ands	r2, r3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	409a      	lsls	r2, r3
 8000930:	f04f 31ff 	mov.w	r1, #4294967295
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	43d9      	mvns	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	400b      	ands	r3, r1
 8000940:	4313      	orrs	r3, r2
 8000942:	4618      	mov	r0, r3
 8000944:	3724      	adds	r7, #36	; 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <SysTick_Config>:
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800095c:	d301      	bcc.n	8000962 <SysTick_Config+0x16>
 800095e:	2301      	movs	r3, #1
 8000960:	e00f      	b.n	8000982 <SysTick_Config+0x36>
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SysTick_Config+0x40>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
 800096a:	210f      	movs	r1, #15
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f7ff ff90 	bl	8000894 <NVIC_SetPriority>
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x40>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	2300      	movs	r3, #0
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriorityGrouping>:
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff31 	bl	8000800 <NVIC_SetPriorityGrouping>
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	f7ff ff46 	bl	8000848 <NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ff90 	bl	80008e8 <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff5f 	bl	8000894 <NVIC_SetPriority>
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_EnableIRQ>:
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff39 	bl	8000864 <NVIC_EnableIRQ>
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffa2 	bl	800094c <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_DMA_Init>:
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <HAL_DMA_Init+0x16>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e043      	b.n	8000ab2 <HAL_DMA_Init+0x9e>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <HAL_DMA_Init+0xa8>)
 8000a32:	4413      	add	r3, r2
 8000a34:	4a22      	ldr	r2, [pc, #136]	; (8000ac0 <HAL_DMA_Init+0xac>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	091b      	lsrs	r3, r3, #4
 8000a3c:	009a      	lsls	r2, r3, #2
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	641a      	str	r2, [r3, #64]	; 0x40
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <HAL_DMA_Init+0xb0>)
 8000a46:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685a      	ldr	r2, [r3, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	639a      	str	r2, [r3, #56]	; 0x38
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2020 	strb.w	r2, [r3, #32]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	bffdfff8 	.word	0xbffdfff8
 8000ac0:	cccccccd 	.word	0xcccccccd
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <HAL_DMA_IRQHandler>:
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4013      	ands	r3, r2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d04f      	beq.n	8000b90 <HAL_DMA_IRQHandler+0xc8>
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d04a      	beq.n	8000b90 <HAL_DMA_IRQHandler+0xc8>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 0320 	and.w	r3, r3, #32
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d107      	bne.n	8000b18 <HAL_DMA_IRQHandler+0x50>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 0204 	bic.w	r2, r2, #4
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a66      	ldr	r2, [pc, #408]	; (8000cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d029      	beq.n	8000b76 <HAL_DMA_IRQHandler+0xae>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a65      	ldr	r2, [pc, #404]	; (8000cbc <HAL_DMA_IRQHandler+0x1f4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d022      	beq.n	8000b72 <HAL_DMA_IRQHandler+0xaa>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a63      	ldr	r2, [pc, #396]	; (8000cc0 <HAL_DMA_IRQHandler+0x1f8>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d01a      	beq.n	8000b6c <HAL_DMA_IRQHandler+0xa4>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a62      	ldr	r2, [pc, #392]	; (8000cc4 <HAL_DMA_IRQHandler+0x1fc>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d012      	beq.n	8000b66 <HAL_DMA_IRQHandler+0x9e>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <HAL_DMA_IRQHandler+0x200>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d00a      	beq.n	8000b60 <HAL_DMA_IRQHandler+0x98>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a5f      	ldr	r2, [pc, #380]	; (8000ccc <HAL_DMA_IRQHandler+0x204>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d102      	bne.n	8000b5a <HAL_DMA_IRQHandler+0x92>
 8000b54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b58:	e00e      	b.n	8000b78 <HAL_DMA_IRQHandler+0xb0>
 8000b5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b5e:	e00b      	b.n	8000b78 <HAL_DMA_IRQHandler+0xb0>
 8000b60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b64:	e008      	b.n	8000b78 <HAL_DMA_IRQHandler+0xb0>
 8000b66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b6a:	e005      	b.n	8000b78 <HAL_DMA_IRQHandler+0xb0>
 8000b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b70:	e002      	b.n	8000b78 <HAL_DMA_IRQHandler+0xb0>
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	e000      	b.n	8000b78 <HAL_DMA_IRQHandler+0xb0>
 8000b76:	2304      	movs	r3, #4
 8000b78:	4a55      	ldr	r2, [pc, #340]	; (8000cd0 <HAL_DMA_IRQHandler+0x208>)
 8000b7a:	6053      	str	r3, [r2, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 8094 	beq.w	8000cae <HAL_DMA_IRQHandler+0x1e6>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	4798      	blx	r3
 8000b8e:	e08e      	b.n	8000cae <HAL_DMA_IRQHandler+0x1e6>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	2202      	movs	r2, #2
 8000b96:	409a      	lsls	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d056      	beq.n	8000c4e <HAL_DMA_IRQHandler+0x186>
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d051      	beq.n	8000c4e <HAL_DMA_IRQHandler+0x186>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 0320 	and.w	r3, r3, #32
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10b      	bne.n	8000bd0 <HAL_DMA_IRQHandler+0x108>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f022 020a 	bic.w	r2, r2, #10
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a38      	ldr	r2, [pc, #224]	; (8000cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d029      	beq.n	8000c2e <HAL_DMA_IRQHandler+0x166>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a37      	ldr	r2, [pc, #220]	; (8000cbc <HAL_DMA_IRQHandler+0x1f4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d022      	beq.n	8000c2a <HAL_DMA_IRQHandler+0x162>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a35      	ldr	r2, [pc, #212]	; (8000cc0 <HAL_DMA_IRQHandler+0x1f8>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d01a      	beq.n	8000c24 <HAL_DMA_IRQHandler+0x15c>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a34      	ldr	r2, [pc, #208]	; (8000cc4 <HAL_DMA_IRQHandler+0x1fc>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d012      	beq.n	8000c1e <HAL_DMA_IRQHandler+0x156>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a32      	ldr	r2, [pc, #200]	; (8000cc8 <HAL_DMA_IRQHandler+0x200>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d00a      	beq.n	8000c18 <HAL_DMA_IRQHandler+0x150>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a31      	ldr	r2, [pc, #196]	; (8000ccc <HAL_DMA_IRQHandler+0x204>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d102      	bne.n	8000c12 <HAL_DMA_IRQHandler+0x14a>
 8000c0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c10:	e00e      	b.n	8000c30 <HAL_DMA_IRQHandler+0x168>
 8000c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c16:	e00b      	b.n	8000c30 <HAL_DMA_IRQHandler+0x168>
 8000c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c1c:	e008      	b.n	8000c30 <HAL_DMA_IRQHandler+0x168>
 8000c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c22:	e005      	b.n	8000c30 <HAL_DMA_IRQHandler+0x168>
 8000c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c28:	e002      	b.n	8000c30 <HAL_DMA_IRQHandler+0x168>
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	e000      	b.n	8000c30 <HAL_DMA_IRQHandler+0x168>
 8000c2e:	2302      	movs	r3, #2
 8000c30:	4a27      	ldr	r2, [pc, #156]	; (8000cd0 <HAL_DMA_IRQHandler+0x208>)
 8000c32:	6053      	str	r3, [r2, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2020 	strb.w	r2, [r3, #32]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d034      	beq.n	8000cae <HAL_DMA_IRQHandler+0x1e6>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	4798      	blx	r3
 8000c4c:	e02f      	b.n	8000cae <HAL_DMA_IRQHandler+0x1e6>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	2208      	movs	r2, #8
 8000c54:	409a      	lsls	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d028      	beq.n	8000cb0 <HAL_DMA_IRQHandler+0x1e8>
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d023      	beq.n	8000cb0 <HAL_DMA_IRQHandler+0x1e8>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 020e 	bic.w	r2, r2, #14
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c80:	2101      	movs	r1, #1
 8000c82:	fa01 f202 	lsl.w	r2, r1, r2
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2201      	movs	r2, #1
 8000c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d004      	beq.n	8000cb0 <HAL_DMA_IRQHandler+0x1e8>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	4798      	blx	r3
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40020008 	.word	0x40020008
 8000cbc:	4002001c 	.word	0x4002001c
 8000cc0:	40020030 	.word	0x40020030
 8000cc4:	40020044 	.word	0x40020044
 8000cc8:	40020058 	.word	0x40020058
 8000ccc:	4002006c 	.word	0x4002006c
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <HAL_GPIO_Init>:
 8000cd4:	b480      	push	{r7}
 8000cd6:	b08b      	sub	sp, #44	; 0x2c
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf6:	e169      	b.n	8000fcc <HAL_GPIO_Init+0x2f8>
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f040 8158 	bne.w	8000fc6 <HAL_GPIO_Init+0x2f2>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	4a9a      	ldr	r2, [pc, #616]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d05e      	beq.n	8000dde <HAL_GPIO_Init+0x10a>
 8000d20:	4a98      	ldr	r2, [pc, #608]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d875      	bhi.n	8000e12 <HAL_GPIO_Init+0x13e>
 8000d26:	4a98      	ldr	r2, [pc, #608]	; (8000f88 <HAL_GPIO_Init+0x2b4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d058      	beq.n	8000dde <HAL_GPIO_Init+0x10a>
 8000d2c:	4a96      	ldr	r2, [pc, #600]	; (8000f88 <HAL_GPIO_Init+0x2b4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d86f      	bhi.n	8000e12 <HAL_GPIO_Init+0x13e>
 8000d32:	4a96      	ldr	r2, [pc, #600]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d052      	beq.n	8000dde <HAL_GPIO_Init+0x10a>
 8000d38:	4a94      	ldr	r2, [pc, #592]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d869      	bhi.n	8000e12 <HAL_GPIO_Init+0x13e>
 8000d3e:	4a94      	ldr	r2, [pc, #592]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d04c      	beq.n	8000dde <HAL_GPIO_Init+0x10a>
 8000d44:	4a92      	ldr	r2, [pc, #584]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d863      	bhi.n	8000e12 <HAL_GPIO_Init+0x13e>
 8000d4a:	4a92      	ldr	r2, [pc, #584]	; (8000f94 <HAL_GPIO_Init+0x2c0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d046      	beq.n	8000dde <HAL_GPIO_Init+0x10a>
 8000d50:	4a90      	ldr	r2, [pc, #576]	; (8000f94 <HAL_GPIO_Init+0x2c0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d85d      	bhi.n	8000e12 <HAL_GPIO_Init+0x13e>
 8000d56:	2b12      	cmp	r3, #18
 8000d58:	d82a      	bhi.n	8000db0 <HAL_GPIO_Init+0xdc>
 8000d5a:	2b12      	cmp	r3, #18
 8000d5c:	d859      	bhi.n	8000e12 <HAL_GPIO_Init+0x13e>
 8000d5e:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <HAL_GPIO_Init+0x90>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000ddf 	.word	0x08000ddf
 8000d68:	08000db9 	.word	0x08000db9
 8000d6c:	08000dcb 	.word	0x08000dcb
 8000d70:	08000e0d 	.word	0x08000e0d
 8000d74:	08000e13 	.word	0x08000e13
 8000d78:	08000e13 	.word	0x08000e13
 8000d7c:	08000e13 	.word	0x08000e13
 8000d80:	08000e13 	.word	0x08000e13
 8000d84:	08000e13 	.word	0x08000e13
 8000d88:	08000e13 	.word	0x08000e13
 8000d8c:	08000e13 	.word	0x08000e13
 8000d90:	08000e13 	.word	0x08000e13
 8000d94:	08000e13 	.word	0x08000e13
 8000d98:	08000e13 	.word	0x08000e13
 8000d9c:	08000e13 	.word	0x08000e13
 8000da0:	08000e13 	.word	0x08000e13
 8000da4:	08000e13 	.word	0x08000e13
 8000da8:	08000dc1 	.word	0x08000dc1
 8000dac:	08000dd5 	.word	0x08000dd5
 8000db0:	4a79      	ldr	r2, [pc, #484]	; (8000f98 <HAL_GPIO_Init+0x2c4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d013      	beq.n	8000dde <HAL_GPIO_Init+0x10a>
 8000db6:	e02c      	b.n	8000e12 <HAL_GPIO_Init+0x13e>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	623b      	str	r3, [r7, #32]
 8000dbe:	e029      	b.n	8000e14 <HAL_GPIO_Init+0x140>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	e024      	b.n	8000e14 <HAL_GPIO_Init+0x140>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	3308      	adds	r3, #8
 8000dd0:	623b      	str	r3, [r7, #32]
 8000dd2:	e01f      	b.n	8000e14 <HAL_GPIO_Init+0x140>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	330c      	adds	r3, #12
 8000dda:	623b      	str	r3, [r7, #32]
 8000ddc:	e01a      	b.n	8000e14 <HAL_GPIO_Init+0x140>
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <HAL_GPIO_Init+0x118>
 8000de6:	2304      	movs	r3, #4
 8000de8:	623b      	str	r3, [r7, #32]
 8000dea:	e013      	b.n	8000e14 <HAL_GPIO_Init+0x140>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d105      	bne.n	8000e00 <HAL_GPIO_Init+0x12c>
 8000df4:	2308      	movs	r3, #8
 8000df6:	623b      	str	r3, [r7, #32]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	611a      	str	r2, [r3, #16]
 8000dfe:	e009      	b.n	8000e14 <HAL_GPIO_Init+0x140>
 8000e00:	2308      	movs	r3, #8
 8000e02:	623b      	str	r3, [r7, #32]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	615a      	str	r2, [r3, #20]
 8000e0a:	e003      	b.n	8000e14 <HAL_GPIO_Init+0x140>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
 8000e10:	e000      	b.n	8000e14 <HAL_GPIO_Init+0x140>
 8000e12:	bf00      	nop
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	2bff      	cmp	r3, #255	; 0xff
 8000e18:	d801      	bhi.n	8000e1e <HAL_GPIO_Init+0x14a>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	e001      	b.n	8000e22 <HAL_GPIO_Init+0x14e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3304      	adds	r3, #4
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	2bff      	cmp	r3, #255	; 0xff
 8000e28:	d802      	bhi.n	8000e30 <HAL_GPIO_Init+0x15c>
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	e002      	b.n	8000e36 <HAL_GPIO_Init+0x162>
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	3b08      	subs	r3, #8
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	210f      	movs	r1, #15
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	401a      	ands	r2, r3
 8000e48:	6a39      	ldr	r1, [r7, #32]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	431a      	orrs	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <HAL_GPIO_Init+0x2f2>
 8000e64:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <HAL_GPIO_Init+0x2c8>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a4c      	ldr	r2, [pc, #304]	; (8000f9c <HAL_GPIO_Init+0x2c8>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <HAL_GPIO_Init+0x2c8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4a48      	ldr	r2, [pc, #288]	; (8000fa0 <HAL_GPIO_Init+0x2cc>)
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a40      	ldr	r2, [pc, #256]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d013      	beq.n	8000ed0 <HAL_GPIO_Init+0x1fc>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a3f      	ldr	r2, [pc, #252]	; (8000fa8 <HAL_GPIO_Init+0x2d4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d00d      	beq.n	8000ecc <HAL_GPIO_Init+0x1f8>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a3e      	ldr	r2, [pc, #248]	; (8000fac <HAL_GPIO_Init+0x2d8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d007      	beq.n	8000ec8 <HAL_GPIO_Init+0x1f4>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a3d      	ldr	r2, [pc, #244]	; (8000fb0 <HAL_GPIO_Init+0x2dc>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d101      	bne.n	8000ec4 <HAL_GPIO_Init+0x1f0>
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e006      	b.n	8000ed2 <HAL_GPIO_Init+0x1fe>
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	e004      	b.n	8000ed2 <HAL_GPIO_Init+0x1fe>
 8000ec8:	2302      	movs	r3, #2
 8000eca:	e002      	b.n	8000ed2 <HAL_GPIO_Init+0x1fe>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <HAL_GPIO_Init+0x1fe>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed4:	f002 0203 	and.w	r2, r2, #3
 8000ed8:	0092      	lsls	r2, r2, #2
 8000eda:	4093      	lsls	r3, r2
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	492f      	ldr	r1, [pc, #188]	; (8000fa0 <HAL_GPIO_Init+0x2cc>)
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x236>
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	492c      	ldr	r1, [pc, #176]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	600b      	str	r3, [r1, #0]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	4928      	ldr	r1, [pc, #160]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x25e>
 8000f24:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4922      	ldr	r1, [pc, #136]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x26c>
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	491e      	ldr	r1, [pc, #120]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <HAL_GPIO_Init+0x286>
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	4918      	ldr	r1, [pc, #96]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x294>
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	4914      	ldr	r1, [pc, #80]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	608b      	str	r3, [r1, #8]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d021      	beq.n	8000fb8 <HAL_GPIO_Init+0x2e4>
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60cb      	str	r3, [r1, #12]
 8000f80:	e021      	b.n	8000fc6 <HAL_GPIO_Init+0x2f2>
 8000f82:	bf00      	nop
 8000f84:	10320000 	.word	0x10320000
 8000f88:	10310000 	.word	0x10310000
 8000f8c:	10220000 	.word	0x10220000
 8000f90:	10210000 	.word	0x10210000
 8000f94:	10120000 	.word	0x10120000
 8000f98:	10110000 	.word	0x10110000
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	40010c00 	.word	0x40010c00
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40011400 	.word	0x40011400
 8000fb4:	40010400 	.word	0x40010400
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_GPIO_Init+0x30c>)
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <HAL_GPIO_Init+0x30c>)
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	60cb      	str	r3, [r1, #12]
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	3301      	adds	r3, #1
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	f67f ae92 	bls.w	8000cf8 <HAL_GPIO_Init+0x24>
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	372c      	adds	r7, #44	; 0x2c
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	40010400 	.word	0x40010400

08000fe4 <HAL_GPIO_WritePin>:
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x26>
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <HAL_I2C_Init>:
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_I2C_Init+0x1a>
 800102a:	2301      	movs	r3, #1
 800102c:	e0f3      	b.n	8001216 <HAL_I2C_Init+0x202>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d106      	bne.n	8001048 <HAL_I2C_Init+0x34>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f003 f9fe 	bl	8004444 <HAL_I2C_MspInit>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2224      	movs	r2, #36	; 0x24
 800104c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0201 	bic.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	f000 fcc2 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8001064:	60b8      	str	r0, [r7, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a6d      	ldr	r2, [pc, #436]	; (8001220 <HAL_I2C_Init+0x20c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d807      	bhi.n	8001080 <HAL_I2C_Init+0x6c>
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4a6c      	ldr	r2, [pc, #432]	; (8001224 <HAL_I2C_Init+0x210>)
 8001074:	4293      	cmp	r3, r2
 8001076:	bf94      	ite	ls
 8001078:	2301      	movls	r3, #1
 800107a:	2300      	movhi	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	e006      	b.n	800108e <HAL_I2C_Init+0x7a>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4a69      	ldr	r2, [pc, #420]	; (8001228 <HAL_I2C_Init+0x214>)
 8001084:	4293      	cmp	r3, r2
 8001086:	bf94      	ite	ls
 8001088:	2301      	movls	r3, #1
 800108a:	2300      	movhi	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_I2C_Init+0x82>
 8001092:	2301      	movs	r3, #1
 8001094:	e0bf      	b.n	8001216 <HAL_I2C_Init+0x202>
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	4a64      	ldr	r2, [pc, #400]	; (800122c <HAL_I2C_Init+0x218>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	0c9b      	lsrs	r3, r3, #18
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4a5c      	ldr	r2, [pc, #368]	; (8001220 <HAL_I2C_Init+0x20c>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d802      	bhi.n	80010ba <HAL_I2C_Init+0xa6>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	e009      	b.n	80010ce <HAL_I2C_Init+0xba>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	4a5a      	ldr	r2, [pc, #360]	; (8001230 <HAL_I2C_Init+0x21c>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	099b      	lsrs	r3, r3, #6
 80010cc:	3301      	adds	r3, #1
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	6213      	str	r3, [r2, #32]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4a51      	ldr	r2, [pc, #324]	; (8001220 <HAL_I2C_Init+0x20c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d819      	bhi.n	8001112 <HAL_I2C_Init+0xfe>
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1e5a      	subs	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010f2:	4013      	ands	r3, r2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00a      	beq.n	800110e <HAL_I2C_Init+0xfa>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1e5a      	subs	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	3301      	adds	r3, #1
 8001108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800110c:	e051      	b.n	80011b2 <HAL_I2C_Init+0x19e>
 800110e:	2304      	movs	r3, #4
 8001110:	e04f      	b.n	80011b2 <HAL_I2C_Init+0x19e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d111      	bne.n	800113e <HAL_I2C_Init+0x12a>
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1e59      	subs	r1, r3, #1
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	fbb1 f3f3 	udiv	r3, r1, r3
 800112c:	3301      	adds	r3, #1
 800112e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf0c      	ite	eq
 8001136:	2301      	moveq	r3, #1
 8001138:	2300      	movne	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	e012      	b.n	8001164 <HAL_I2C_Init+0x150>
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1e59      	subs	r1, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009a      	lsls	r2, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	fbb1 f3f3 	udiv	r3, r1, r3
 8001154:	3301      	adds	r3, #1
 8001156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf0c      	ite	eq
 800115e:	2301      	moveq	r3, #1
 8001160:	2300      	movne	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_I2C_Init+0x158>
 8001168:	2301      	movs	r3, #1
 800116a:	e022      	b.n	80011b2 <HAL_I2C_Init+0x19e>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10e      	bne.n	8001192 <HAL_I2C_Init+0x17e>
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1e59      	subs	r1, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	fbb1 f3f3 	udiv	r3, r1, r3
 8001186:	3301      	adds	r3, #1
 8001188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800118c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001190:	e00f      	b.n	80011b2 <HAL_I2C_Init+0x19e>
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1e59      	subs	r1, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009a      	lsls	r2, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011a8:	3301      	adds	r3, #1
 80011aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	61d3      	str	r3, [r2, #28]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69d9      	ldr	r1, [r3, #28]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1a      	ldr	r2, [r3, #32]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6919      	ldr	r1, [r3, #16]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6959      	ldr	r1, [r3, #20]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699a      	ldr	r2, [r3, #24]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2220      	movs	r2, #32
 8001202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001214:	2300      	movs	r3, #0
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	000186a0 	.word	0x000186a0
 8001224:	001e847f 	.word	0x001e847f
 8001228:	003d08ff 	.word	0x003d08ff
 800122c:	431bde83 	.word	0x431bde83
 8001230:	10624dd3 	.word	0x10624dd3

08001234 <HAL_RCC_OscConfig>:
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 8087 	beq.w	800135c <HAL_RCC_OscConfig+0x128>
 800124e:	4b92      	ldr	r3, [pc, #584]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b04      	cmp	r3, #4
 8001258:	d00c      	beq.n	8001274 <HAL_RCC_OscConfig+0x40>
 800125a:	4b8f      	ldr	r3, [pc, #572]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b08      	cmp	r3, #8
 8001264:	d112      	bne.n	800128c <HAL_RCC_OscConfig+0x58>
 8001266:	4b8c      	ldr	r3, [pc, #560]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001272:	d10b      	bne.n	800128c <HAL_RCC_OscConfig+0x58>
 8001274:	4b88      	ldr	r3, [pc, #544]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d06c      	beq.n	800135a <HAL_RCC_OscConfig+0x126>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d168      	bne.n	800135a <HAL_RCC_OscConfig+0x126>
 8001288:	2301      	movs	r3, #1
 800128a:	e22d      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x70>
 8001296:	4b80      	ldr	r3, [pc, #512]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a7f      	ldr	r2, [pc, #508]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e02e      	b.n	8001302 <HAL_RCC_OscConfig+0xce>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10c      	bne.n	80012c6 <HAL_RCC_OscConfig+0x92>
 80012ac:	4b7a      	ldr	r3, [pc, #488]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a79      	ldr	r2, [pc, #484]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b77      	ldr	r3, [pc, #476]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a76      	ldr	r2, [pc, #472]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e01d      	b.n	8001302 <HAL_RCC_OscConfig+0xce>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ce:	d10c      	bne.n	80012ea <HAL_RCC_OscConfig+0xb6>
 80012d0:	4b71      	ldr	r3, [pc, #452]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a70      	ldr	r2, [pc, #448]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b6e      	ldr	r3, [pc, #440]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a6d      	ldr	r2, [pc, #436]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e00b      	b.n	8001302 <HAL_RCC_OscConfig+0xce>
 80012ea:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6a      	ldr	r2, [pc, #424]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b68      	ldr	r3, [pc, #416]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a67      	ldr	r2, [pc, #412]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80012fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d013      	beq.n	8001332 <HAL_RCC_OscConfig+0xfe>
 800130a:	f7fe ff77 	bl	80001fc <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0xf0>
 8001312:	f7fe ff73 	bl	80001fc <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0xf0>
 8001320:	2303      	movs	r3, #3
 8001322:	e1e1      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 8001324:	4b5c      	ldr	r3, [pc, #368]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0xde>
 8001330:	e014      	b.n	800135c <HAL_RCC_OscConfig+0x128>
 8001332:	f7fe ff63 	bl	80001fc <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x118>
 800133a:	f7fe ff5f 	bl	80001fc <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b64      	cmp	r3, #100	; 0x64
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x118>
 8001348:	2303      	movs	r3, #3
 800134a:	e1cd      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 800134c:	4b52      	ldr	r3, [pc, #328]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x106>
 8001358:	e000      	b.n	800135c <HAL_RCC_OscConfig+0x128>
 800135a:	bf00      	nop
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d063      	beq.n	8001430 <HAL_RCC_OscConfig+0x1fc>
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00b      	beq.n	800138c <HAL_RCC_OscConfig+0x158>
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b08      	cmp	r3, #8
 800137e:	d11c      	bne.n	80013ba <HAL_RCC_OscConfig+0x186>
 8001380:	4b45      	ldr	r3, [pc, #276]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d116      	bne.n	80013ba <HAL_RCC_OscConfig+0x186>
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_OscConfig+0x170>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_OscConfig+0x170>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e1a1      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 80013a4:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4939      	ldr	r1, [pc, #228]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e03a      	b.n	8001430 <HAL_RCC_OscConfig+0x1fc>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d020      	beq.n	8001404 <HAL_RCC_OscConfig+0x1d0>
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <HAL_RCC_OscConfig+0x268>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	f7fe ff18 	bl	80001fc <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x1ae>
 80013d0:	f7fe ff14 	bl	80001fc <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x1ae>
 80013de:	2303      	movs	r3, #3
 80013e0:	e182      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x19c>
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4926      	ldr	r1, [pc, #152]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
 8001402:	e015      	b.n	8001430 <HAL_RCC_OscConfig+0x1fc>
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <HAL_RCC_OscConfig+0x268>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	f7fe fef7 	bl	80001fc <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x1f0>
 8001412:	f7fe fef3 	bl	80001fc <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x1f0>
 8001420:	2303      	movs	r3, #3
 8001422:	e161      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x1de>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d039      	beq.n	80014b0 <HAL_RCC_OscConfig+0x27c>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d019      	beq.n	8001478 <HAL_RCC_OscConfig+0x244>
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	f7fe fed7 	bl	80001fc <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x230>
 8001452:	f7fe fed3 	bl	80001fc <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x230>
 8001460:	2303      	movs	r3, #3
 8001462:	e141      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_RCC_OscConfig+0x264>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x21e>
 8001470:	2001      	movs	r0, #1
 8001472:	f000 fae1 	bl	8001a38 <RCC_Delay>
 8001476:	e01b      	b.n	80014b0 <HAL_RCC_OscConfig+0x27c>
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f7fe febd 	bl	80001fc <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]
 8001484:	e00e      	b.n	80014a4 <HAL_RCC_OscConfig+0x270>
 8001486:	f7fe feb9 	bl	80001fc <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d907      	bls.n	80014a4 <HAL_RCC_OscConfig+0x270>
 8001494:	2303      	movs	r3, #3
 8001496:	e127      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 8001498:	40021000 	.word	0x40021000
 800149c:	42420000 	.word	0x42420000
 80014a0:	42420480 	.word	0x42420480
 80014a4:	4b92      	ldr	r3, [pc, #584]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1ea      	bne.n	8001486 <HAL_RCC_OscConfig+0x252>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80a6 	beq.w	800160a <HAL_RCC_OscConfig+0x3d6>
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]
 80014c2:	4b8b      	ldr	r3, [pc, #556]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10d      	bne.n	80014ea <HAL_RCC_OscConfig+0x2b6>
 80014ce:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a87      	ldr	r2, [pc, #540]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	61d3      	str	r3, [r2, #28]
 80014da:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
 80014ea:	4b82      	ldr	r3, [pc, #520]	; (80016f4 <HAL_RCC_OscConfig+0x4c0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <HAL_RCC_OscConfig+0x2f4>
 80014f6:	4b7f      	ldr	r3, [pc, #508]	; (80016f4 <HAL_RCC_OscConfig+0x4c0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a7e      	ldr	r2, [pc, #504]	; (80016f4 <HAL_RCC_OscConfig+0x4c0>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	f7fe fe7b 	bl	80001fc <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x2e8>
 800150a:	f7fe fe77 	bl	80001fc <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x2e8>
 8001518:	2303      	movs	r3, #3
 800151a:	e0e5      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 800151c:	4b75      	ldr	r3, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0x4c0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x2d6>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x30a>
 8001530:	4b6f      	ldr	r3, [pc, #444]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a6e      	ldr	r2, [pc, #440]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6213      	str	r3, [r2, #32]
 800153c:	e02d      	b.n	800159a <HAL_RCC_OscConfig+0x366>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x32c>
 8001546:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4a69      	ldr	r2, [pc, #420]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	6213      	str	r3, [r2, #32]
 8001552:	4b67      	ldr	r3, [pc, #412]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a66      	ldr	r2, [pc, #408]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001558:	f023 0304 	bic.w	r3, r3, #4
 800155c:	6213      	str	r3, [r2, #32]
 800155e:	e01c      	b.n	800159a <HAL_RCC_OscConfig+0x366>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b05      	cmp	r3, #5
 8001566:	d10c      	bne.n	8001582 <HAL_RCC_OscConfig+0x34e>
 8001568:	4b61      	ldr	r3, [pc, #388]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4a60      	ldr	r2, [pc, #384]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6213      	str	r3, [r2, #32]
 8001574:	4b5e      	ldr	r3, [pc, #376]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4a5d      	ldr	r2, [pc, #372]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6213      	str	r3, [r2, #32]
 8001580:	e00b      	b.n	800159a <HAL_RCC_OscConfig+0x366>
 8001582:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4a5a      	ldr	r2, [pc, #360]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	6213      	str	r3, [r2, #32]
 800158e:	4b58      	ldr	r3, [pc, #352]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001594:	f023 0304 	bic.w	r3, r3, #4
 8001598:	6213      	str	r3, [r2, #32]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d015      	beq.n	80015ce <HAL_RCC_OscConfig+0x39a>
 80015a2:	f7fe fe2b 	bl	80001fc <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x38c>
 80015aa:	f7fe fe27 	bl	80001fc <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x38c>
 80015bc:	2303      	movs	r3, #3
 80015be:	e093      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 80015c0:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0ee      	beq.n	80015aa <HAL_RCC_OscConfig+0x376>
 80015cc:	e014      	b.n	80015f8 <HAL_RCC_OscConfig+0x3c4>
 80015ce:	f7fe fe15 	bl	80001fc <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]
 80015d4:	e00a      	b.n	80015ec <HAL_RCC_OscConfig+0x3b8>
 80015d6:	f7fe fe11 	bl	80001fc <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x3b8>
 80015e8:	2303      	movs	r3, #3
 80015ea:	e07d      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 80015ec:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1ee      	bne.n	80015d6 <HAL_RCC_OscConfig+0x3a2>
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d105      	bne.n	800160a <HAL_RCC_OscConfig+0x3d6>
 80015fe:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a3b      	ldr	r2, [pc, #236]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d069      	beq.n	80016e6 <HAL_RCC_OscConfig+0x4b2>
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b08      	cmp	r3, #8
 800161c:	d061      	beq.n	80016e2 <HAL_RCC_OscConfig+0x4ae>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d146      	bne.n	80016b4 <HAL_RCC_OscConfig+0x480>
 8001626:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f7fe fde6 	bl	80001fc <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x412>
 8001634:	f7fe fde2 	bl	80001fc <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x412>
 8001642:	2303      	movs	r3, #3
 8001644:	e050      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x400>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165a:	d108      	bne.n	800166e <HAL_RCC_OscConfig+0x43a>
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4921      	ldr	r1, [pc, #132]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a19      	ldr	r1, [r3, #32]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	430b      	orrs	r3, r1
 8001680:	491b      	ldr	r1, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	f7fe fdb6 	bl	80001fc <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x472>
 8001694:	f7fe fdb2 	bl	80001fc <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x472>
 80016a2:	2303      	movs	r3, #3
 80016a4:	e020      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x460>
 80016b2:	e018      	b.n	80016e6 <HAL_RCC_OscConfig+0x4b2>
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	f7fe fd9f 	bl	80001fc <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x4a0>
 80016c2:	f7fe fd9b 	bl	80001fc <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x4a0>
 80016d0:	2303      	movs	r3, #3
 80016d2:	e009      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_RCC_OscConfig+0x4bc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x48e>
 80016e0:	e001      	b.n	80016e6 <HAL_RCC_OscConfig+0x4b2>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b4>
 80016e6:	2300      	movs	r3, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40007000 	.word	0x40007000
 80016f8:	42420060 	.word	0x42420060

080016fc <HAL_RCC_ClockConfig>:
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b7e      	ldr	r3, [pc, #504]	; (8001904 <HAL_RCC_ClockConfig+0x208>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d910      	bls.n	800173a <HAL_RCC_ClockConfig+0x3e>
 8001718:	4b7a      	ldr	r3, [pc, #488]	; (8001904 <HAL_RCC_ClockConfig+0x208>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 0207 	bic.w	r2, r3, #7
 8001720:	4978      	ldr	r1, [pc, #480]	; (8001904 <HAL_RCC_ClockConfig+0x208>)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
 8001728:	4b76      	ldr	r3, [pc, #472]	; (8001904 <HAL_RCC_ClockConfig+0x208>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_RCC_ClockConfig+0x3e>
 8001736:	2301      	movs	r3, #1
 8001738:	e0e0      	b.n	80018fc <HAL_RCC_ClockConfig+0x200>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d020      	beq.n	8001788 <HAL_RCC_ClockConfig+0x8c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_RCC_ClockConfig+0x62>
 8001752:	4b6d      	ldr	r3, [pc, #436]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4a6c      	ldr	r2, [pc, #432]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 8001758:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800175c:	6053      	str	r3, [r2, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_RCC_ClockConfig+0x7a>
 800176a:	4b67      	ldr	r3, [pc, #412]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4a66      	ldr	r2, [pc, #408]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 8001770:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001774:	6053      	str	r3, [r2, #4]
 8001776:	4b64      	ldr	r3, [pc, #400]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	4961      	ldr	r1, [pc, #388]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d06a      	beq.n	800186a <HAL_RCC_ClockConfig+0x16e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d107      	bne.n	80017ac <HAL_RCC_ClockConfig+0xb0>
 800179c:	4b5a      	ldr	r3, [pc, #360]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d115      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xd8>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0a7      	b.n	80018fc <HAL_RCC_ClockConfig+0x200>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xc8>
 80017b4:	4b54      	ldr	r3, [pc, #336]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d109      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xd8>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e09b      	b.n	80018fc <HAL_RCC_ClockConfig+0x200>
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xd8>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e093      	b.n	80018fc <HAL_RCC_ClockConfig+0x200>
 80017d4:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f023 0203 	bic.w	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4949      	ldr	r1, [pc, #292]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
 80017e6:	f7fe fd09 	bl	80001fc <HAL_GetTick>
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d112      	bne.n	800181a <HAL_RCC_ClockConfig+0x11e>
 80017f4:	e00a      	b.n	800180c <HAL_RCC_ClockConfig+0x110>
 80017f6:	f7fe fd01 	bl	80001fc <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f241 3288 	movw	r2, #5000	; 0x1388
 8001804:	4293      	cmp	r3, r2
 8001806:	d901      	bls.n	800180c <HAL_RCC_ClockConfig+0x110>
 8001808:	2303      	movs	r3, #3
 800180a:	e077      	b.n	80018fc <HAL_RCC_ClockConfig+0x200>
 800180c:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	d1ee      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xfa>
 8001818:	e027      	b.n	800186a <HAL_RCC_ClockConfig+0x16e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d11d      	bne.n	800185e <HAL_RCC_ClockConfig+0x162>
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x13e>
 8001824:	f7fe fcea 	bl	80001fc <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x13e>
 8001836:	2303      	movs	r3, #3
 8001838:	e060      	b.n	80018fc <HAL_RCC_ClockConfig+0x200>
 800183a:	4b33      	ldr	r3, [pc, #204]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d1ee      	bne.n	8001824 <HAL_RCC_ClockConfig+0x128>
 8001846:	e010      	b.n	800186a <HAL_RCC_ClockConfig+0x16e>
 8001848:	f7fe fcd8 	bl	80001fc <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x162>
 800185a:	2303      	movs	r3, #3
 800185c:	e04e      	b.n	80018fc <HAL_RCC_ClockConfig+0x200>
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ee      	bne.n	8001848 <HAL_RCC_ClockConfig+0x14c>
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_RCC_ClockConfig+0x208>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d210      	bcs.n	800189a <HAL_RCC_ClockConfig+0x19e>
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_ClockConfig+0x208>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 0207 	bic.w	r2, r3, #7
 8001880:	4920      	ldr	r1, [pc, #128]	; (8001904 <HAL_RCC_ClockConfig+0x208>)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <HAL_RCC_ClockConfig+0x208>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d001      	beq.n	800189a <HAL_RCC_ClockConfig+0x19e>
 8001896:	2301      	movs	r3, #1
 8001898:	e030      	b.n	80018fc <HAL_RCC_ClockConfig+0x200>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x1bc>
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	4915      	ldr	r1, [pc, #84]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x1dc>
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	490d      	ldr	r1, [pc, #52]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
 80018d8:	f000 f81c 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_RCC_ClockConfig+0x20c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	4908      	ldr	r1, [pc, #32]	; (800190c <HAL_RCC_ClockConfig+0x210>)
 80018ea:	5ccb      	ldrb	r3, [r1, r3]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <HAL_RCC_ClockConfig+0x214>)
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7fe fc3f 	bl	8000178 <HAL_InitTick>
 80018fa:	2300      	movs	r3, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40022000 	.word	0x40022000
 8001908:	40021000 	.word	0x40021000
 800190c:	080048e0 	.word	0x080048e0
 8001910:	20000008 	.word	0x20000008

08001914 <HAL_RCC_GetSysClockFreq>:
 8001914:	b490      	push	{r4, r7}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800191c:	1d3c      	adds	r4, r7, #4
 800191e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001924:	f240 2301 	movw	r3, #513	; 0x201
 8001928:	803b      	strh	r3, [r7, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b04      	cmp	r3, #4
 800194c:	d002      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x40>
 800194e:	2b08      	cmp	r3, #8
 8001950:	d003      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x46>
 8001952:	e02d      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x9c>
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	e02d      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0xa2>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	0c9b      	lsrs	r3, r3, #18
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001966:	4413      	add	r3, r2
 8001968:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x8c>
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	0c5b      	lsrs	r3, r3, #17
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001986:	4413      	add	r3, r2
 8001988:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001992:	fb02 f203 	mul.w	r2, r2, r3
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	e004      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x96>
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	623b      	str	r3, [r7, #32]
 80019ae:	e002      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0xa2>
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80019b2:	623b      	str	r3, [r7, #32]
 80019b4:	bf00      	nop
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	4618      	mov	r0, r3
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc90      	pop	{r4, r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	080048a0 	.word	0x080048a0
 80019c8:	40021000 	.word	0x40021000
 80019cc:	007a1200 	.word	0x007a1200
 80019d0:	003d0900 	.word	0x003d0900

080019d4 <HAL_RCC_GetHCLKFreq>:
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4b02      	ldr	r3, [pc, #8]	; (80019e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	20000008 	.word	0x20000008

080019e8 <HAL_RCC_GetPCLK1Freq>:
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	f7ff fff2 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	4903      	ldr	r1, [pc, #12]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	080048f0 	.word	0x080048f0

08001a10 <HAL_RCC_GetPCLK2Freq>:
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	f7ff ffde 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	0adb      	lsrs	r3, r3, #11
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	4903      	ldr	r1, [pc, #12]	; (8001a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a26:	5ccb      	ldrb	r3, [r1, r3]
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	080048f0 	.word	0x080048f0

08001a38 <RCC_Delay>:
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <RCC_Delay+0x38>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <RCC_Delay+0x3c>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0a5b      	lsrs	r3, r3, #9
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1e5a      	subs	r2, r3, #1
 8001a5c:	60fa      	str	r2, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f8      	bne.n	8001a54 <RCC_Delay+0x1c>
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000008 	.word	0x20000008
 8001a74:	10624dd3 	.word	0x10624dd3

08001a78 <HAL_RCCEx_PeriphCLKConfig>:
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d07d      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]
 8001a98:	4b4f      	ldr	r3, [pc, #316]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10d      	bne.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001aa4:	4b4c      	ldr	r3, [pc, #304]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	4a4b      	ldr	r2, [pc, #300]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aae:	61d3      	str	r3, [r2, #28]
 8001ab0:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2301      	movs	r3, #1
 8001abe:	75fb      	strb	r3, [r7, #23]
 8001ac0:	4b46      	ldr	r3, [pc, #280]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d118      	bne.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x86>
 8001acc:	4b43      	ldr	r3, [pc, #268]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a42      	ldr	r2, [pc, #264]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	f7fe fb90 	bl	80001fc <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]
 8001ade:	e008      	b.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001ae0:	f7fe fb8c 	bl	80001fc <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001aee:	2303      	movs	r3, #3
 8001af0:	e06d      	b.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x156>
 8001af2:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d02e      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d027      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d014      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b42:	f7fe fb5b 	bl	80001fc <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]
 8001b48:	e00a      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b4a:	f7fe fb57 	bl	80001fc <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e036      	b.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x156>
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ee      	beq.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4917      	ldr	r1, [pc, #92]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	620b      	str	r3, [r1, #32]
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d105      	bne.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	61d3      	str	r3, [r2, #28]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	490b      	ldr	r1, [pc, #44]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d008      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	4904      	ldr	r1, [pc, #16]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	42420440 	.word	0x42420440

08001be4 <HAL_RCCEx_GetPeriphCLKFreq>:
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b08d      	sub	sp, #52	; 0x34
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	4b5a      	ldr	r3, [pc, #360]	; (8001d58 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001bee:	f107 040c 	add.w	r4, r7, #12
 8001bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001bf8:	f240 2301 	movw	r3, #513	; 0x201
 8001bfc:	813b      	strh	r3, [r7, #8]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
 8001c02:	2300      	movs	r3, #0
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b10      	cmp	r3, #16
 8001c16:	d00a      	beq.n	8001c2e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	f200 8094 	bhi.w	8001d48 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d04c      	beq.n	8001cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d07f      	beq.n	8001d2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8001c2c:	e08c      	b.n	8001d48 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8001c2e:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8085 	beq.w	8001d4c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	0c9b      	lsrs	r3, r3, #18
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c4e:	4413      	add	r3, r2
 8001c50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c54:	623b      	str	r3, [r7, #32]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d018      	beq.n	8001c92 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8001c60:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	0c5b      	lsrs	r3, r3, #17
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c6e:	4413      	add	r3, r2
 8001c70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8001c80:	4a37      	ldr	r2, [pc, #220]	; (8001d60 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c90:	e004      	b.n	8001c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	4a33      	ldr	r2, [pc, #204]	; (8001d64 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c9c:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca8:	d102      	bne.n	8001cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cae:	e04d      	b.n	8001d4c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cbe:	e045      	b.n	8001d4c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8001cc0:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd0:	d108      	bne.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce2:	e022      	b.n	8001d2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cee:	d109      	bne.n	8001d04 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001cfc:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d02:	e012      	b.n	8001d2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d0e:	d109      	bne.n	8001d24 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8001d1c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d22:	e002      	b.n	8001d2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d28:	e011      	b.n	8001d4e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8001d2a:	e010      	b.n	8001d4e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8001d2c:	f7ff fe70 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	0b9b      	lsrs	r3, r3, #14
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d46:	e002      	b.n	8001d4e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8001d48:	bf00      	nop
 8001d4a:	e000      	b.n	8001d4e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8001d4c:	bf00      	nop
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	4618      	mov	r0, r3
 8001d52:	3734      	adds	r7, #52	; 0x34
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	080048b0 	.word	0x080048b0
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	007a1200 	.word	0x007a1200
 8001d64:	003d0900 	.word	0x003d0900
 8001d68:	aaaaaaab 	.word	0xaaaaaaab

08001d6c <HAL_SPI_Transmit>:
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	80fb      	strh	r3, [r7, #6]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	2300      	movs	r3, #0
 8001d82:	77fb      	strb	r3, [r7, #31]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_SPI_Transmit+0x26>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e125      	b.n	8001fde <HAL_SPI_Transmit+0x272>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d9a:	f7fe fa2f 	bl	80001fc <HAL_GetTick>
 8001d9e:	61b8      	str	r0, [r7, #24]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d002      	beq.n	8001db2 <HAL_SPI_Transmit+0x46>
 8001dac:	2302      	movs	r3, #2
 8001dae:	77fb      	strb	r3, [r7, #31]
 8001db0:	e10c      	b.n	8001fcc <HAL_SPI_Transmit+0x260>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <HAL_SPI_Transmit+0x52>
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <HAL_SPI_Transmit+0x58>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	77fb      	strb	r3, [r7, #31]
 8001dc2:	e103      	b.n	8001fcc <HAL_SPI_Transmit+0x260>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	88fa      	ldrh	r2, [r7, #6]
 8001ddc:	869a      	strh	r2, [r3, #52]	; 0x34
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	86da      	strh	r2, [r3, #54]	; 0x36
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	879a      	strh	r2, [r3, #60]	; 0x3c
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	645a      	str	r2, [r3, #68]	; 0x44
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e0a:	d107      	bne.n	8001e1c <HAL_SPI_Transmit+0xb0>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	2b40      	cmp	r3, #64	; 0x40
 8001e28:	d007      	beq.n	8001e3a <HAL_SPI_Transmit+0xce>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e42:	d147      	bne.n	8001ed4 <HAL_SPI_Transmit+0x168>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d004      	beq.n	8001e56 <HAL_SPI_Transmit+0xea>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d138      	bne.n	8001ec8 <HAL_SPI_Transmit+0x15c>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	881a      	ldrh	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3302      	adds	r3, #2
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e74:	e028      	b.n	8001ec8 <HAL_SPI_Transmit+0x15c>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d10f      	bne.n	8001ea4 <HAL_SPI_Transmit+0x138>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	881a      	ldrh	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3302      	adds	r3, #2
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ea2:	e011      	b.n	8001ec8 <HAL_SPI_Transmit+0x15c>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_SPI_Transmit+0x156>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_SPI_Transmit+0x15c>
 8001eb2:	f7fe f9a3 	bl	80001fc <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d802      	bhi.n	8001ec8 <HAL_SPI_Transmit+0x15c>
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	77fb      	strb	r3, [r7, #31]
 8001ec6:	e081      	b.n	8001fcc <HAL_SPI_Transmit+0x260>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1d1      	bne.n	8001e76 <HAL_SPI_Transmit+0x10a>
 8001ed2:	e048      	b.n	8001f66 <HAL_SPI_Transmit+0x1fa>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <HAL_SPI_Transmit+0x17a>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d13a      	bne.n	8001f5c <HAL_SPI_Transmit+0x1f0>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	330c      	adds	r3, #12
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	7812      	ldrb	r2, [r2, #0]
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f06:	e029      	b.n	8001f5c <HAL_SPI_Transmit+0x1f0>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d110      	bne.n	8001f38 <HAL_SPI_Transmit+0x1cc>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	330c      	adds	r3, #12
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	7812      	ldrb	r2, [r2, #0]
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3301      	adds	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f36:	e011      	b.n	8001f5c <HAL_SPI_Transmit+0x1f0>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_SPI_Transmit+0x1ea>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d00a      	beq.n	8001f5c <HAL_SPI_Transmit+0x1f0>
 8001f46:	f7fe f959 	bl	80001fc <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d802      	bhi.n	8001f5c <HAL_SPI_Transmit+0x1f0>
 8001f56:	2303      	movs	r3, #3
 8001f58:	77fb      	strb	r3, [r7, #31]
 8001f5a:	e037      	b.n	8001fcc <HAL_SPI_Transmit+0x260>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1d0      	bne.n	8001f08 <HAL_SPI_Transmit+0x19c>
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2102      	movs	r1, #2
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f9e5 	bl	8002340 <SPI_WaitFlagStateUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <HAL_SPI_Transmit+0x216>
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	77fb      	strb	r3, [r7, #31]
 8001f80:	e024      	b.n	8001fcc <HAL_SPI_Transmit+0x260>
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	6839      	ldr	r1, [r7, #0]
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fa43 	bl	8002412 <SPI_CheckFlag_BSY>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_SPI_Transmit+0x232>
 8001f92:	2301      	movs	r3, #1
 8001f94:	77fb      	strb	r3, [r7, #31]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54
 8001f9c:	e016      	b.n	8001fcc <HAL_SPI_Transmit+0x260>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10a      	bne.n	8001fbc <HAL_SPI_Transmit+0x250>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <HAL_SPI_Transmit+0x25e>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	77fb      	strb	r3, [r7, #31]
 8001fc8:	e000      	b.n	8001fcc <HAL_SPI_Transmit+0x260>
 8001fca:	bf00      	nop
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001fdc:	7ffb      	ldrb	r3, [r7, #31]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SPI_TransmitReceive>:
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b08c      	sub	sp, #48	; 0x30
 8001fea:	af02      	add	r7, sp, #8
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	807b      	strh	r3, [r7, #2]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	2301      	movs	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_SPI_TransmitReceive+0x32>
 8002014:	2302      	movs	r3, #2
 8002016:	e182      	b.n	800231e <HAL_SPI_TransmitReceive+0x338>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002020:	f7fe f8ec 	bl	80001fc <HAL_GetTick>
 8002024:	6178      	str	r0, [r7, #20]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800202c:	b2db      	uxtb	r3, r3
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d00e      	beq.n	800205a <HAL_SPI_TransmitReceive+0x74>
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002042:	d106      	bne.n	8002052 <HAL_SPI_TransmitReceive+0x6c>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <HAL_SPI_TransmitReceive+0x6c>
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b04      	cmp	r3, #4
 8002050:	d003      	beq.n	800205a <HAL_SPI_TransmitReceive+0x74>
 8002052:	2302      	movs	r3, #2
 8002054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002058:	e157      	b.n	800230a <HAL_SPI_TransmitReceive+0x324>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_SPI_TransmitReceive+0x86>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_SPI_TransmitReceive+0x86>
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d103      	bne.n	8002074 <HAL_SPI_TransmitReceive+0x8e>
 800206c:	2301      	movs	r3, #1
 800206e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002072:	e14a      	b.n	800230a <HAL_SPI_TransmitReceive+0x324>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d103      	bne.n	8002088 <HAL_SPI_TransmitReceive+0xa2>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2205      	movs	r2, #5
 8002084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	639a      	str	r2, [r3, #56]	; 0x38
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	87da      	strh	r2, [r3, #62]	; 0x3e
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	887a      	ldrh	r2, [r7, #2]
 800209e:	879a      	strh	r2, [r3, #60]	; 0x3c
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	887a      	ldrh	r2, [r7, #2]
 80020aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	869a      	strh	r2, [r3, #52]	; 0x34
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c8:	2b40      	cmp	r3, #64	; 0x40
 80020ca:	d007      	beq.n	80020dc <HAL_SPI_TransmitReceive+0xf6>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020e4:	d171      	bne.n	80021ca <HAL_SPI_TransmitReceive+0x1e4>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <HAL_SPI_TransmitReceive+0x112>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d15d      	bne.n	80021b4 <HAL_SPI_TransmitReceive+0x1ce>
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	881a      	ldrh	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3302      	adds	r3, #2
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	86da      	strh	r2, [r3, #54]	; 0x36
 8002116:	e04d      	b.n	80021b4 <HAL_SPI_TransmitReceive+0x1ce>
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01c      	beq.n	8002158 <HAL_SPI_TransmitReceive+0x172>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d017      	beq.n	8002158 <HAL_SPI_TransmitReceive+0x172>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d110      	bne.n	8002158 <HAL_SPI_TransmitReceive+0x172>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	881a      	ldrh	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	3302      	adds	r3, #2
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	86da      	strh	r2, [r3, #54]	; 0x36
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d018      	beq.n	8002194 <HAL_SPI_TransmitReceive+0x1ae>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d111      	bne.n	8002194 <HAL_SPI_TransmitReceive+0x1ae>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	b29a      	uxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3302      	adds	r3, #2
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002190:	2301      	movs	r3, #1
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
 8002194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d00b      	beq.n	80021b4 <HAL_SPI_TransmitReceive+0x1ce>
 800219c:	f7fe f82e 	bl	80001fc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d803      	bhi.n	80021b4 <HAL_SPI_TransmitReceive+0x1ce>
 80021ac:	2303      	movs	r3, #3
 80021ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021b2:	e0aa      	b.n	800230a <HAL_SPI_TransmitReceive+0x324>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ac      	bne.n	8002118 <HAL_SPI_TransmitReceive+0x132>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1a7      	bne.n	8002118 <HAL_SPI_TransmitReceive+0x132>
 80021c8:	e070      	b.n	80022ac <HAL_SPI_TransmitReceive+0x2c6>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <HAL_SPI_TransmitReceive+0x1f6>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d15d      	bne.n	8002298 <HAL_SPI_TransmitReceive+0x2b2>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	330c      	adds	r3, #12
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	3301      	adds	r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80021fc:	e04c      	b.n	8002298 <HAL_SPI_TransmitReceive+0x2b2>
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01c      	beq.n	800223e <HAL_SPI_TransmitReceive+0x258>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d017      	beq.n	800223e <HAL_SPI_TransmitReceive+0x258>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b02      	cmp	r3, #2
 800221a:	d110      	bne.n	800223e <HAL_SPI_TransmitReceive+0x258>
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	60ba      	str	r2, [r7, #8]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	320c      	adds	r2, #12
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	7013      	strb	r3, [r2, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	86da      	strh	r2, [r3, #54]	; 0x36
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d017      	beq.n	8002278 <HAL_SPI_TransmitReceive+0x292>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d110      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x292>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68d9      	ldr	r1, [r3, #12]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	b2ca      	uxtb	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002274:	2301      	movs	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227e:	d00b      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x2b2>
 8002280:	f7fd ffbc 	bl	80001fc <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800228c:	429a      	cmp	r2, r3
 800228e:	d803      	bhi.n	8002298 <HAL_SPI_TransmitReceive+0x2b2>
 8002290:	2303      	movs	r3, #3
 8002292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002296:	e038      	b.n	800230a <HAL_SPI_TransmitReceive+0x324>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ad      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x218>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1a8      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x218>
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	2201      	movs	r2, #1
 80022b4:	2102      	movs	r1, #2
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f842 	bl	8002340 <SPI_WaitFlagStateUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_SPI_TransmitReceive+0x2e4>
 80022c2:	2303      	movs	r3, #3
 80022c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022c8:	e01f      	b.n	800230a <HAL_SPI_TransmitReceive+0x324>
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f89f 	bl	8002412 <SPI_CheckFlag_BSY>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_SPI_TransmitReceive+0x302>
 80022da:	2301      	movs	r3, #1
 80022dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54
 80022e6:	e010      	b.n	800230a <HAL_SPI_TransmitReceive+0x324>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <HAL_SPI_TransmitReceive+0x322>
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	e000      	b.n	800230a <HAL_SPI_TransmitReceive+0x324>
 8002308:	bf00      	nop
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800231a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800231e:	4618      	mov	r0, r3
 8002320:	3728      	adds	r7, #40	; 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SPI_GetState>:
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <SPI_WaitFlagStateUntilTimeout>:
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	e04d      	b.n	80023ec <SPI_WaitFlagStateUntilTimeout+0xac>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d049      	beq.n	80023ec <SPI_WaitFlagStateUntilTimeout+0xac>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <SPI_WaitFlagStateUntilTimeout+0x2e>
 800235e:	f7fd ff4d 	bl	80001fc <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d83e      	bhi.n	80023ec <SPI_WaitFlagStateUntilTimeout+0xac>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002386:	d111      	bne.n	80023ac <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002390:	d004      	beq.n	800239c <SPI_WaitFlagStateUntilTimeout+0x5c>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239a:	d107      	bne.n	80023ac <SPI_WaitFlagStateUntilTimeout+0x6c>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b4:	d110      	bne.n	80023d8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80023c4:	400b      	ands	r3, r1
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80023e8:	2303      	movs	r3, #3
 80023ea:	e00e      	b.n	800240a <SPI_WaitFlagStateUntilTimeout+0xca>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4013      	ands	r3, r2
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d101      	bne.n	8002400 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80023fc:	2201      	movs	r2, #1
 80023fe:	e000      	b.n	8002402 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8002400:	2200      	movs	r2, #0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	d1a3      	bne.n	8002350 <SPI_WaitFlagStateUntilTimeout+0x10>
 8002408:	2300      	movs	r3, #0
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <SPI_CheckFlag_BSY>:
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af02      	add	r7, sp, #8
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff ff89 	bl	8002340 <SPI_WaitFlagStateUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <SPI_CheckFlag_BSY+0x32>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	f043 0220 	orr.w	r2, r3, #32
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
 8002440:	2303      	movs	r3, #3
 8002442:	e000      	b.n	8002446 <SPI_CheckFlag_BSY+0x34>
 8002444:	2300      	movs	r3, #0
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SPI_Init>:
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_SPI_Init+0x12>
 800245c:	2301      	movs	r3, #1
 800245e:	e057      	b.n	8002510 <HAL_SPI_Init+0xc2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <HAL_SPI_Init+0x2a>
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f002 f824 	bl	80044c0 <HAL_SPI_MspInit>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	ea42 0103 	orr.w	r1, r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	f003 0104 	and.w	r1, r3, #4
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024ee:	611a      	str	r2, [r3, #16]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024fe:	61da      	str	r2, [r3, #28]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800250e:	2300      	movs	r3, #0
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_UART_Init>:
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_UART_Init+0x12>
 8002526:	2301      	movs	r3, #1
 8002528:	e03f      	b.n	80025aa <HAL_UART_Init+0x92>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_UART_Init+0x2c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f002 f808 	bl	8004554 <HAL_UART_MspInit>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800255a:	60da      	str	r2, [r3, #12]
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f829 	bl	80025b4 <UART_SetConfig>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002570:	611a      	str	r2, [r3, #16]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002580:	615a      	str	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	63da      	str	r2, [r3, #60]	; 0x3c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80025a8:	2300      	movs	r3, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <UART_SetConfig>:
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	611a      	str	r2, [r3, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025f6:	f023 030c 	bic.w	r3, r3, #12
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	68f9      	ldr	r1, [r7, #12]
 8002600:	430b      	orrs	r3, r1
 8002602:	60d3      	str	r3, [r2, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	615a      	str	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6f      	ldr	r2, [pc, #444]	; (80027dc <UART_SetConfig+0x228>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d16b      	bne.n	80026fc <UART_SetConfig+0x148>
 8002624:	f7ff f9f4 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 8002628:	4602      	mov	r2, r0
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	009a      	lsls	r2, r3, #2
 8002632:	441a      	add	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	4a68      	ldr	r2, [pc, #416]	; (80027e0 <UART_SetConfig+0x22c>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	011c      	lsls	r4, r3, #4
 8002648:	f7ff f9e2 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 800264c:	4602      	mov	r2, r0
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	009a      	lsls	r2, r3, #2
 8002656:	441a      	add	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002662:	f7ff f9d5 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 8002666:	4602      	mov	r2, r0
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	009a      	lsls	r2, r3, #2
 8002670:	441a      	add	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	fbb2 f3f3 	udiv	r3, r2, r3
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <UART_SetConfig+0x22c>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2264      	movs	r2, #100	; 0x64
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	1aeb      	subs	r3, r5, r3
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	3332      	adds	r3, #50	; 0x32
 8002690:	4a53      	ldr	r2, [pc, #332]	; (80027e0 <UART_SetConfig+0x22c>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269c:	441c      	add	r4, r3
 800269e:	f7ff f9b7 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	009a      	lsls	r2, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fbb2 f5f3 	udiv	r5, r2, r3
 80026b8:	f7ff f9aa 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	009a      	lsls	r2, r3, #2
 80026c6:	441a      	add	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4a43      	ldr	r2, [pc, #268]	; (80027e0 <UART_SetConfig+0x22c>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	2264      	movs	r2, #100	; 0x64
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	1aeb      	subs	r3, r5, r3
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	3332      	adds	r3, #50	; 0x32
 80026e6:	4a3e      	ldr	r2, [pc, #248]	; (80027e0 <UART_SetConfig+0x22c>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	f003 020f 	and.w	r2, r3, #15
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4422      	add	r2, r4
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	e06a      	b.n	80027d2 <UART_SetConfig+0x21e>
 80026fc:	f7ff f974 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002700:	4602      	mov	r2, r0
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	009a      	lsls	r2, r3, #2
 800270a:	441a      	add	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	4a32      	ldr	r2, [pc, #200]	; (80027e0 <UART_SetConfig+0x22c>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	011c      	lsls	r4, r3, #4
 8002720:	f7ff f962 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002724:	4602      	mov	r2, r0
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	009a      	lsls	r2, r3, #2
 800272e:	441a      	add	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	fbb2 f5f3 	udiv	r5, r2, r3
 800273a:	f7ff f955 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 800273e:	4602      	mov	r2, r0
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	009a      	lsls	r2, r3, #2
 8002748:	441a      	add	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <UART_SetConfig+0x22c>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	2264      	movs	r2, #100	; 0x64
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	1aeb      	subs	r3, r5, r3
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	3332      	adds	r3, #50	; 0x32
 8002768:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <UART_SetConfig+0x22c>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002774:	441c      	add	r4, r3
 8002776:	f7ff f937 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 800277a:	4602      	mov	r2, r0
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	009a      	lsls	r2, r3, #2
 8002784:	441a      	add	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002790:	f7ff f92a 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002794:	4602      	mov	r2, r0
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	009a      	lsls	r2, r3, #2
 800279e:	441a      	add	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027aa:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <UART_SetConfig+0x22c>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	2264      	movs	r2, #100	; 0x64
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	1aeb      	subs	r3, r5, r3
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	3332      	adds	r3, #50	; 0x32
 80027be:	4a08      	ldr	r2, [pc, #32]	; (80027e0 <UART_SetConfig+0x22c>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	f003 020f 	and.w	r2, r3, #15
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4422      	add	r2, r4
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bdb0      	pop	{r4, r5, r7, pc}
 80027da:	bf00      	nop
 80027dc:	40013800 	.word	0x40013800
 80027e0:	51eb851f 	.word	0x51eb851f

080027e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	4a08      	ldr	r2, [pc, #32]	; (8002814 <disk_status+0x30>)
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	79fa      	ldrb	r2, [r7, #7]
 80027fc:	4905      	ldr	r1, [pc, #20]	; (8002814 <disk_status+0x30>)
 80027fe:	440a      	add	r2, r1
 8002800:	7a12      	ldrb	r2, [r2, #8]
 8002802:	4610      	mov	r0, r2
 8002804:	4798      	blx	r3
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]
  return stat;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000060 	.word	0x20000060

08002818 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	4a0d      	ldr	r2, [pc, #52]	; (8002860 <disk_initialize+0x48>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d111      	bne.n	8002854 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <disk_initialize+0x48>)
 8002834:	2101      	movs	r1, #1
 8002836:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <disk_initialize+0x48>)
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	79fa      	ldrb	r2, [r7, #7]
 8002846:	4906      	ldr	r1, [pc, #24]	; (8002860 <disk_initialize+0x48>)
 8002848:	440a      	add	r2, r1
 800284a:	7a12      	ldrb	r2, [r2, #8]
 800284c:	4610      	mov	r0, r2
 800284e:	4798      	blx	r3
 8002850:	4603      	mov	r3, r0
 8002852:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000060 	.word	0x20000060

08002864 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <disk_read+0x3c>)
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	689c      	ldr	r4, [r3, #8]
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <disk_read+0x3c>)
 8002884:	4413      	add	r3, r2
 8002886:	7a18      	ldrb	r0, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	47a0      	blx	r4
 8002890:	4603      	mov	r3, r0
 8002892:	75fb      	strb	r3, [r7, #23]
  return res;
 8002894:	7dfb      	ldrb	r3, [r7, #23]
}
 8002896:	4618      	mov	r0, r3
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000060 	.word	0x20000060

080028a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <disk_write+0x3c>)
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	68dc      	ldr	r4, [r3, #12]
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <disk_write+0x3c>)
 80028c4:	4413      	add	r3, r2
 80028c6:	7a18      	ldrb	r0, [r3, #8]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	47a0      	blx	r4
 80028d0:	4603      	mov	r3, r0
 80028d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000060 	.word	0x20000060

080028e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	603a      	str	r2, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
 80028f0:	460b      	mov	r3, r1
 80028f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	4a09      	ldr	r2, [pc, #36]	; (800291c <disk_ioctl+0x38>)
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	79fa      	ldrb	r2, [r7, #7]
 8002902:	4906      	ldr	r1, [pc, #24]	; (800291c <disk_ioctl+0x38>)
 8002904:	440a      	add	r2, r1
 8002906:	7a10      	ldrb	r0, [r2, #8]
 8002908:	79b9      	ldrb	r1, [r7, #6]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4798      	blx	r3
 800290e:	4603      	mov	r3, r0
 8002910:	73fb      	strb	r3, [r7, #15]
  return res;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000060 	.word	0x20000060

08002920 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e016      	b.n	800295c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800292e:	4910      	ldr	r1, [pc, #64]	; (8002970 <clear_lock+0x50>)
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	429a      	cmp	r2, r3
 8002942:	d108      	bne.n	8002956 <clear_lock+0x36>
 8002944:	490a      	ldr	r1, [pc, #40]	; (8002970 <clear_lock+0x50>)
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3301      	adds	r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d9e5      	bls.n	800292e <clear_lock+0xe>
	}
}
 8002962:	bf00      	nop
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	20000048 	.word	0x20000048

08002974 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002986:	3304      	adds	r3, #4
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d047      	beq.n	8002a1e <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002994:	330c      	adds	r3, #12
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a0:	3301      	adds	r3, #1
 80029a2:	7818      	ldrb	r0, [r3, #0]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	2301      	movs	r3, #1
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	f7ff ff7b 	bl	80028a4 <disk_write>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <sync_window+0x46>
			res = FR_DISK_ERR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	e031      	b.n	8002a1e <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c0:	3304      	adds	r3, #4
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	1ad2      	subs	r2, r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d8:	3318      	adds	r3, #24
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d21e      	bcs.n	8002a1e <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e6:	3303      	adds	r3, #3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	e014      	b.n	8002a18 <sync_window+0xa4>
					wsect += fs->fsize;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f4:	3318      	adds	r3, #24
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4413      	add	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a04:	3301      	adds	r3, #1
 8002a06:	7818      	ldrb	r0, [r3, #0]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	f7ff ff49 	bl	80028a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d8e7      	bhi.n	80029ee <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d01f      	beq.n	8002a86 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff94 	bl	8002974 <sync_window>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d117      	bne.n	8002a86 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	7818      	ldrb	r0, [r3, #0]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	2301      	movs	r3, #1
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	f7ff fefd 	bl	8002864 <disk_read>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
 8002a74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002a80:	330c      	adds	r3, #12
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8002a98:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d031      	beq.n	8002b0a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e002      	b.n	8002ab4 <get_ldnumber+0x24>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b1f      	cmp	r3, #31
 8002aba:	d903      	bls.n	8002ac4 <get_ldnumber+0x34>
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b3a      	cmp	r3, #58	; 0x3a
 8002ac2:	d1f4      	bne.n	8002aae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b3a      	cmp	r3, #58	; 0x3a
 8002aca:	d11c      	bne.n	8002b06 <get_ldnumber+0x76>
			tp = *path;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	60fa      	str	r2, [r7, #12]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	3b30      	subs	r3, #48	; 0x30
 8002adc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b09      	cmp	r3, #9
 8002ae2:	d80e      	bhi.n	8002b02 <get_ldnumber+0x72>
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10a      	bne.n	8002b02 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d107      	bne.n	8002b02 <get_ldnumber+0x72>
					vol = (int)i;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3301      	adds	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	e002      	b.n	8002b0c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8002b0a:	693b      	ldr	r3, [r7, #16]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
	...

08002b18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002b34:	330c      	adds	r3, #12
 8002b36:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3a:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff72 	bl	8002a28 <move_window>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <check_fs+0x36>
		return 3;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e04a      	b.n	8002be4 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002b54:	3301      	adds	r3, #1
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	b21a      	sxth	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002b62:	b21b      	sxth	r3, r3
 8002b64:	4313      	orrs	r3, r2
 8002b66:	b21b      	sxth	r3, r3
 8002b68:	4a20      	ldr	r2, [pc, #128]	; (8002bec <check_fs+0xd4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d001      	beq.n	8002b72 <check_fs+0x5a>
		return 2;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e038      	b.n	8002be4 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3336      	adds	r3, #54	; 0x36
 8002b76:	3303      	adds	r3, #3
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	061a      	lsls	r2, r3, #24
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3336      	adds	r3, #54	; 0x36
 8002b80:	3302      	adds	r3, #2
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	4313      	orrs	r3, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	3236      	adds	r2, #54	; 0x36
 8002b8c:	3201      	adds	r2, #1
 8002b8e:	7812      	ldrb	r2, [r2, #0]
 8002b90:	0212      	lsls	r2, r2, #8
 8002b92:	4313      	orrs	r3, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ba0:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <check_fs+0xd8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <check_fs+0x92>
		return 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e01c      	b.n	8002be4 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3352      	adds	r3, #82	; 0x52
 8002bae:	3303      	adds	r3, #3
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	061a      	lsls	r2, r3, #24
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3352      	adds	r3, #82	; 0x52
 8002bb8:	3302      	adds	r3, #2
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	3252      	adds	r2, #82	; 0x52
 8002bc4:	3201      	adds	r2, #1
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	0212      	lsls	r2, r2, #8
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bd8:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <check_fs+0xd8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <check_fs+0xca>
		return 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <check_fs+0xcc>

	return 1;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	ffffaa55 	.word	0xffffaa55
 8002bf0:	00544146 	.word	0x00544146

08002bf4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b096      	sub	sp, #88	; 0x58
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002c08:	68b8      	ldr	r0, [r7, #8]
 8002c0a:	f7ff ff41 	bl	8002a90 <get_ldnumber>
 8002c0e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	da01      	bge.n	8002c1a <find_volume+0x26>
 8002c16:	230b      	movs	r3, #11
 8002c18:	e33c      	b.n	8003294 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002c1a:	4ab3      	ldr	r2, [pc, #716]	; (8002ee8 <find_volume+0x2f4>)
 8002c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <find_volume+0x3a>
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	e332      	b.n	8003294 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c32:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01d      	beq.n	8002c7c <find_volume+0x88>
		stat = disk_status(fs->drv);
 8002c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c46:	3301      	adds	r3, #1
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fdca 	bl	80027e4 <disk_status>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002c56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10c      	bne.n	8002c7c <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <find_volume+0x84>
 8002c68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8002c74:	230a      	movs	r3, #10
 8002c76:	e30d      	b.n	8003294 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e30b      	b.n	8003294 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c90:	3301      	adds	r3, #1
 8002c92:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fdba 	bl	8002818 <disk_initialize>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8002caa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e2ec      	b.n	8003294 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <find_volume+0xdc>
 8002cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8002ccc:	230a      	movs	r3, #10
 8002cce:	e2e1      	b.n	8003294 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	7818      	ldrb	r0, [r3, #0]
 8002cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce0:	330a      	adds	r3, #10
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	f7ff fdfd 	bl	80028e4 <disk_ioctl>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10f      	bne.n	8002d10 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf6:	330a      	adds	r3, #10
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfe:	d307      	bcc.n	8002d10 <find_volume+0x11c>
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d06:	330a      	adds	r3, #10
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0e:	d901      	bls.n	8002d14 <find_volume+0x120>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e2bf      	b.n	8003294 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8002d18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d1c:	f7ff fefc 	bl	8002b18 <check_fs>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8002d26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d155      	bne.n	8002dda <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002d2e:	2300      	movs	r3, #0
 8002d30:	643b      	str	r3, [r7, #64]	; 0x40
 8002d32:	e029      	b.n	8002d88 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8002d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002d3e:	4413      	add	r3, r2
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	3304      	adds	r3, #4
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d012      	beq.n	8002d72 <find_volume+0x17e>
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	330b      	adds	r3, #11
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	061a      	lsls	r2, r3, #24
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	330a      	adds	r3, #10
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d60:	3209      	adds	r2, #9
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	0212      	lsls	r2, r2, #8
 8002d66:	4313      	orrs	r3, r2
 8002d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6a:	3208      	adds	r2, #8
 8002d6c:	7812      	ldrb	r2, [r2, #0]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	e000      	b.n	8002d74 <find_volume+0x180>
 8002d72:	2200      	movs	r2, #0
 8002d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002d7c:	440b      	add	r3, r1
 8002d7e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d84:	3301      	adds	r3, #1
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40
 8002d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d9d2      	bls.n	8002d34 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8002d8e:	2300      	movs	r3, #0
 8002d90:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8002d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <find_volume+0x1aa>
 8002d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8002d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002da6:	4413      	add	r3, r2
 8002da8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002dac:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <find_volume+0x1cc>
 8002db4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002db6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002db8:	f7ff feae 	bl	8002b18 <check_fs>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	e000      	b.n	8002dc2 <find_volume+0x1ce>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8002dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <find_volume+0x1e6>
 8002dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d9e1      	bls.n	8002d9e <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002dda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d101      	bne.n	8002de6 <find_volume+0x1f2>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e256      	b.n	8003294 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8002de6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <find_volume+0x1fe>
 8002dee:	230d      	movs	r3, #13
 8002df0:	e250      	b.n	8003294 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	7b1b      	ldrb	r3, [r3, #12]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	b21a      	sxth	r2, r3
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	7adb      	ldrb	r3, [r3, #11]
 8002dfe:	b21b      	sxth	r3, r3
 8002e00:	4313      	orrs	r3, r2
 8002e02:	b21a      	sxth	r2, r3
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e0a:	330a      	adds	r3, #10
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8002e14:	230d      	movs	r3, #13
 8002e16:	e23d      	b.n	8003294 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	7ddb      	ldrb	r3, [r3, #23]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	b21a      	sxth	r2, r3
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	7d9b      	ldrb	r3, [r3, #22]
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b21b      	sxth	r3, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8002e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d112      	bne.n	8002e5a <find_volume+0x266>
 8002e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e36:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002e3a:	061a      	lsls	r2, r3, #24
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	4313      	orrs	r3, r2
 8002e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e48:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8002e4c:	0212      	lsls	r2, r2, #8
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e52:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002e56:	4313      	orrs	r3, r2
 8002e58:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e60:	3318      	adds	r3, #24
 8002e62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e64:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	7c1a      	ldrb	r2, [r3, #16]
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e70:	3303      	adds	r3, #3
 8002e72:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8002e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e7a:	3303      	adds	r3, #3
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d008      	beq.n	8002e94 <find_volume+0x2a0>
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e88:	3303      	adds	r3, #3
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d001      	beq.n	8002e94 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8002e90:	230d      	movs	r3, #13
 8002e92:	e1ff      	b.n	8003294 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e9a:	3303      	adds	r3, #3
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eaa:	7b5a      	ldrb	r2, [r3, #13]
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <find_volume+0x2ee>
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eca:	3302      	adds	r3, #2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8002ee2:	230d      	movs	r3, #13
 8002ee4:	e1d6      	b.n	8003294 <find_volume+0x6a0>
 8002ee6:	bf00      	nop
 8002ee8:	20000040 	.word	0x20000040

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	7c9b      	ldrb	r3, [r3, #18]
 8002ef0:	021b      	lsls	r3, r3, #8
 8002ef2:	b21a      	sxth	r2, r3
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	7c5b      	ldrb	r3, [r3, #17]
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	4313      	orrs	r3, r2
 8002efc:	b21b      	sxth	r3, r3
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f06:	3308      	adds	r3, #8
 8002f08:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f10:	3308      	adds	r3, #8
 8002f12:	881a      	ldrh	r2, [r3, #0]
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1a:	330a      	adds	r3, #10
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	fbb2 f1f3 	udiv	r1, r2, r3
 8002f26:	fb03 f301 	mul.w	r3, r3, r1
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8002f32:	230d      	movs	r3, #13
 8002f34:	e1ae      	b.n	8003294 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f38:	7d1b      	ldrb	r3, [r3, #20]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	b21a      	sxth	r2, r3
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	7cdb      	ldrb	r3, [r3, #19]
 8002f42:	b21b      	sxth	r3, r3
 8002f44:	4313      	orrs	r3, r2
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8002f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d112      	bne.n	8002f78 <find_volume+0x384>
 8002f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f54:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002f58:	061a      	lsls	r2, r3, #24
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	4313      	orrs	r3, r2
 8002f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f66:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002f6a:	0212      	lsls	r2, r2, #8
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f70:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	7bdb      	ldrb	r3, [r3, #15]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	b21a      	sxth	r2, r3
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	7b9b      	ldrb	r3, [r3, #14]
 8002f84:	b21b      	sxth	r3, r3
 8002f86:	4313      	orrs	r3, r2
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8002f8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <find_volume+0x3a2>
 8002f92:	230d      	movs	r3, #13
 8002f94:	e17e      	b.n	8003294 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002f96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9a:	441a      	add	r2, r3
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	8819      	ldrh	r1, [r3, #0]
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fac:	330a      	adds	r3, #10
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d201      	bcs.n	8002fca <find_volume+0x3d6>
 8002fc6:	230d      	movs	r3, #13
 8002fc8:	e164      	b.n	8003294 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	1ad2      	subs	r2, r2, r3
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <find_volume+0x3f6>
 8002fe6:	230d      	movs	r3, #13
 8002fe8:	e154      	b.n	8003294 <find_volume+0x6a0>
	fmt = FS_FAT12;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d902      	bls.n	8003000 <find_volume+0x40c>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003006:	4293      	cmp	r3, r2
 8003008:	d902      	bls.n	8003010 <find_volume+0x41c>
 800300a:	2303      	movs	r3, #3
 800300c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	1c9a      	adds	r2, r3, #2
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301a:	3314      	adds	r3, #20
 800301c:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003024:	331c      	adds	r3, #28
 8003026:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003028:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800302a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800302c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302e:	441a      	add	r2, r3
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003036:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8003038:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	441a      	add	r2, r3
 800303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003040:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003044:	3308      	adds	r3, #8
 8003046:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8003048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800304c:	2b03      	cmp	r3, #3
 800304e:	d127      	bne.n	80030a0 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003056:	3308      	adds	r3, #8
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <find_volume+0x46e>
 800305e:	230d      	movs	r3, #13
 8003060:	e118      	b.n	8003294 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003068:	061a      	lsls	r2, r3, #24
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003070:	041b      	lsls	r3, r3, #16
 8003072:	4313      	orrs	r3, r2
 8003074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003076:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800307a:	0212      	lsls	r2, r2, #8
 800307c:	4313      	orrs	r3, r2
 800307e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003080:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8003084:	431a      	orrs	r2, r3
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800308c:	3304      	adds	r3, #4
 800308e:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8003090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003096:	3314      	adds	r3, #20
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	647b      	str	r3, [r7, #68]	; 0x44
 800309e:	e030      	b.n	8003102 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80030a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a6:	3308      	adds	r3, #8
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <find_volume+0x4be>
 80030ae:	230d      	movs	r3, #13
 80030b0:	e0f0      	b.n	8003294 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030bc:	441a      	add	r2, r3
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80030c4:	3304      	adds	r3, #4
 80030c6:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80030c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d106      	bne.n	80030de <find_volume+0x4ea>
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d6:	3314      	adds	r3, #20
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	e010      	b.n	8003100 <find_volume+0x50c>
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e4:	3314      	adds	r3, #20
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	085a      	lsrs	r2, r3, #1
 80030f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f6:	3314      	adds	r3, #20
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8003100:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003108:	3318      	adds	r3, #24
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003112:	330a      	adds	r3, #10
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	4619      	mov	r1, r3
 8003118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311a:	440b      	add	r3, r1
 800311c:	1e59      	subs	r1, r3, #1
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003124:	330a      	adds	r3, #10
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	fbb1 f3f3 	udiv	r3, r1, r3
 800312c:	429a      	cmp	r2, r3
 800312e:	d201      	bcs.n	8003134 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8003130:	230d      	movs	r3, #13
 8003132:	e0af      	b.n	8003294 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800313a:	3310      	adds	r3, #16
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003148:	3310      	adds	r3, #16
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003152:	330c      	adds	r3, #12
 8003154:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315c:	3305      	adds	r3, #5
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8003162:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003166:	2b03      	cmp	r3, #3
 8003168:	d17d      	bne.n	8003266 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	b21a      	sxth	r2, r3
 8003174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003176:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800317a:	b21b      	sxth	r3, r3
 800317c:	4313      	orrs	r3, r2
 800317e:	b21b      	sxth	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d170      	bne.n	8003266 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8003184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003186:	3301      	adds	r3, #1
 8003188:	4619      	mov	r1, r3
 800318a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800318c:	f7ff fc4c 	bl	8002a28 <move_window>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d167      	bne.n	8003266 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800319c:	3305      	adds	r3, #5
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80031a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a4:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	b21a      	sxth	r2, r3
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80031b2:	b21b      	sxth	r3, r3
 80031b4:	4313      	orrs	r3, r2
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	4a38      	ldr	r2, [pc, #224]	; (800329c <find_volume+0x6a8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d153      	bne.n	8003266 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	78db      	ldrb	r3, [r3, #3]
 80031c2:	061a      	lsls	r2, r3, #24
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	789b      	ldrb	r3, [r3, #2]
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	4313      	orrs	r3, r2
 80031cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ce:	7852      	ldrb	r2, [r2, #1]
 80031d0:	0212      	lsls	r2, r2, #8
 80031d2:	4313      	orrs	r3, r2
 80031d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	4313      	orrs	r3, r2
 80031da:	4a31      	ldr	r2, [pc, #196]	; (80032a0 <find_volume+0x6ac>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d142      	bne.n	8003266 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80031e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e2:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80031e6:	061a      	lsls	r2, r3, #24
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	4313      	orrs	r3, r2
 80031f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f4:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80031f8:	0212      	lsls	r2, r2, #8
 80031fa:	4313      	orrs	r3, r2
 80031fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031fe:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8003202:	4313      	orrs	r3, r2
 8003204:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <find_volume+0x6b0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d12d      	bne.n	8003266 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8003210:	061a      	lsls	r2, r3, #24
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8003218:	041b      	lsls	r3, r3, #16
 800321a:	4313      	orrs	r3, r2
 800321c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800321e:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8003222:	0212      	lsls	r2, r2, #8
 8003224:	4313      	orrs	r3, r2
 8003226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003228:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800322c:	431a      	orrs	r2, r3
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003234:	3310      	adds	r3, #16
 8003236:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8003238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800323e:	061a      	lsls	r2, r3, #24
 8003240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003242:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8003246:	041b      	lsls	r3, r3, #16
 8003248:	4313      	orrs	r3, r2
 800324a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800324c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8003250:	0212      	lsls	r2, r2, #8
 8003252:	4313      	orrs	r3, r2
 8003254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003256:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800325a:	431a      	orrs	r2, r3
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003262:	330c      	adds	r3, #12
 8003264:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800326c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003270:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8003272:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <find_volume+0x6b4>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	3301      	adds	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <find_volume+0x6b4>)
 800327c:	801a      	strh	r2, [r3, #0]
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <find_volume+0x6b4>)
 8003280:	881a      	ldrh	r2, [r3, #0]
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003288:	3306      	adds	r3, #6
 800328a:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800328c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800328e:	f7ff fb47 	bl	8002920 <clear_lock>
#endif

	return FR_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3758      	adds	r7, #88	; 0x58
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	ffffaa55 	.word	0xffffaa55
 80032a0:	41615252 	.word	0x41615252
 80032a4:	61417272 	.word	0x61417272
 80032a8:	20000044 	.word	0x20000044

080032ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	4613      	mov	r3, r2
 80032b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80032be:	f107 0310 	add.w	r3, r7, #16
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fbe4 	bl	8002a90 <get_ldnumber>
 80032c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	da01      	bge.n	80032d4 <f_mount+0x28>
 80032d0:	230b      	movs	r3, #11
 80032d2:	e02f      	b.n	8003334 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80032d4:	4a19      	ldr	r2, [pc, #100]	; (800333c <f_mount+0x90>)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80032e4:	69b8      	ldr	r0, [r7, #24]
 80032e6:	f7ff fb1b 	bl	8002920 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	490d      	ldr	r1, [pc, #52]	; (800333c <f_mount+0x90>)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <f_mount+0x6e>
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d001      	beq.n	800331e <f_mount+0x72>
 800331a:	2300      	movs	r3, #0
 800331c:	e00a      	b.n	8003334 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800331e:	f107 0108 	add.w	r1, r7, #8
 8003322:	f107 030c 	add.w	r3, r7, #12
 8003326:	2200      	movs	r2, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fc63 	bl	8002bf4 <find_volume>
 800332e:	4603      	mov	r3, r0
 8003330:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003332:	7dfb      	ldrb	r3, [r7, #23]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000040 	.word	0x20000040

08003340 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8003356:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <FATFS_LinkDriverEx+0x90>)
 8003358:	7a5b      	ldrb	r3, [r3, #9]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d831      	bhi.n	80033c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <FATFS_LinkDriverEx+0x90>)
 8003362:	7a5b      	ldrb	r3, [r3, #9]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <FATFS_LinkDriverEx+0x90>)
 800336a:	2100      	movs	r1, #0
 800336c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800336e:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <FATFS_LinkDriverEx+0x90>)
 8003370:	7a5b      	ldrb	r3, [r3, #9]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <FATFS_LinkDriverEx+0x90>)
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <FATFS_LinkDriverEx+0x90>)
 8003380:	7a5b      	ldrb	r3, [r3, #9]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <FATFS_LinkDriverEx+0x90>)
 8003388:	4413      	add	r3, r2
 800338a:	79fa      	ldrb	r2, [r7, #7]
 800338c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <FATFS_LinkDriverEx+0x90>)
 8003390:	7a5b      	ldrb	r3, [r3, #9]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	b2d1      	uxtb	r1, r2
 8003398:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <FATFS_LinkDriverEx+0x90>)
 800339a:	7251      	strb	r1, [r2, #9]
 800339c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800339e:	7dbb      	ldrb	r3, [r7, #22]
 80033a0:	3330      	adds	r3, #48	; 0x30
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	3301      	adds	r3, #1
 80033ac:	223a      	movs	r2, #58	; 0x3a
 80033ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	3302      	adds	r3, #2
 80033b4:	222f      	movs	r2, #47	; 0x2f
 80033b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	3303      	adds	r3, #3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	20000060 	.word	0x20000060

080033d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	6839      	ldr	r1, [r7, #0]
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ffac 	bl	8003340 <FATFS_LinkDriverEx>
 80033e8:	4603      	mov	r3, r0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <JoyStick_Init>:
static ADC_HandleTypeDef hadc = {0};
static ADC_ChannelConfTypeDef sConfig = {0};
static uint8_t calibrated = 0;

void JoyStick_Init(JOYSTICK* Joystick_PTR)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	; 0x30
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 0320 	add.w	r3, r7, #32
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]

	if(Joystick_PTR -> JoyStick_xGPIO == GPIOA || Joystick_PTR -> JoyStick_yGPIO == GPIOA)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a60      	ldr	r2, [pc, #384]	; (8003590 <JoyStick_Init+0x19c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d004      	beq.n	800341e <JoyStick_Init+0x2a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4a5d      	ldr	r2, [pc, #372]	; (8003590 <JoyStick_Init+0x19c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10c      	bne.n	8003438 <JoyStick_Init+0x44>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800341e:	4b5d      	ldr	r3, [pc, #372]	; (8003594 <JoyStick_Init+0x1a0>)
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	4a5c      	ldr	r2, [pc, #368]	; (8003594 <JoyStick_Init+0x1a0>)
 8003424:	f043 0304 	orr.w	r3, r3, #4
 8003428:	6193      	str	r3, [r2, #24]
 800342a:	4b5a      	ldr	r3, [pc, #360]	; (8003594 <JoyStick_Init+0x1a0>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	e05a      	b.n	80034ee <JoyStick_Init+0xfa>
	}
	else if(Joystick_PTR -> JoyStick_xGPIO == GPIOB || Joystick_PTR -> JoyStick_yGPIO == GPIOB)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a56      	ldr	r2, [pc, #344]	; (8003598 <JoyStick_Init+0x1a4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <JoyStick_Init+0x58>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4a54      	ldr	r2, [pc, #336]	; (8003598 <JoyStick_Init+0x1a4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d10c      	bne.n	8003466 <JoyStick_Init+0x72>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800344c:	4b51      	ldr	r3, [pc, #324]	; (8003594 <JoyStick_Init+0x1a0>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	4a50      	ldr	r2, [pc, #320]	; (8003594 <JoyStick_Init+0x1a0>)
 8003452:	f043 0308 	orr.w	r3, r3, #8
 8003456:	6193      	str	r3, [r2, #24]
 8003458:	4b4e      	ldr	r3, [pc, #312]	; (8003594 <JoyStick_Init+0x1a0>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	e043      	b.n	80034ee <JoyStick_Init+0xfa>
	}
	else if(Joystick_PTR -> JoyStick_xGPIO == GPIOC || Joystick_PTR -> JoyStick_yGPIO == GPIOC)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a4c      	ldr	r2, [pc, #304]	; (800359c <JoyStick_Init+0x1a8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d004      	beq.n	800347a <JoyStick_Init+0x86>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a49      	ldr	r2, [pc, #292]	; (800359c <JoyStick_Init+0x1a8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d10c      	bne.n	8003494 <JoyStick_Init+0xa0>
	{
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800347a:	4b46      	ldr	r3, [pc, #280]	; (8003594 <JoyStick_Init+0x1a0>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	4a45      	ldr	r2, [pc, #276]	; (8003594 <JoyStick_Init+0x1a0>)
 8003480:	f043 0310 	orr.w	r3, r3, #16
 8003484:	6193      	str	r3, [r2, #24]
 8003486:	4b43      	ldr	r3, [pc, #268]	; (8003594 <JoyStick_Init+0x1a0>)
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	e02c      	b.n	80034ee <JoyStick_Init+0xfa>
	}
	else if (Joystick_PTR -> JoyStick_xGPIO == GPIOD || Joystick_PTR -> JoyStick_yGPIO == GPIOD)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a41      	ldr	r2, [pc, #260]	; (80035a0 <JoyStick_Init+0x1ac>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d004      	beq.n	80034a8 <JoyStick_Init+0xb4>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4a3f      	ldr	r2, [pc, #252]	; (80035a0 <JoyStick_Init+0x1ac>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d10c      	bne.n	80034c2 <JoyStick_Init+0xce>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80034a8:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <JoyStick_Init+0x1a0>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	4a39      	ldr	r2, [pc, #228]	; (8003594 <JoyStick_Init+0x1a0>)
 80034ae:	f043 0320 	orr.w	r3, r3, #32
 80034b2:	6193      	str	r3, [r2, #24]
 80034b4:	4b37      	ldr	r3, [pc, #220]	; (8003594 <JoyStick_Init+0x1a0>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	e015      	b.n	80034ee <JoyStick_Init+0xfa>
	}
	else if (Joystick_PTR -> JoyStick_xGPIO == GPIOE || Joystick_PTR -> JoyStick_yGPIO == GPIOE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a37      	ldr	r2, [pc, #220]	; (80035a4 <JoyStick_Init+0x1b0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d004      	beq.n	80034d6 <JoyStick_Init+0xe2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a34      	ldr	r2, [pc, #208]	; (80035a4 <JoyStick_Init+0x1b0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d10b      	bne.n	80034ee <JoyStick_Init+0xfa>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <JoyStick_Init+0x1a0>)
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	4a2e      	ldr	r2, [pc, #184]	; (8003594 <JoyStick_Init+0x1a0>)
 80034dc:	f043 0320 	orr.w	r3, r3, #32
 80034e0:	6193      	str	r3, [r2, #24]
 80034e2:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <JoyStick_Init+0x1a0>)
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
	}

	GPIO_InitStruct.Pin = Joystick_PTR -> JoyStick_xPIN;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	891b      	ldrh	r3, [r3, #8]
 80034f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034f4:	2303      	movs	r3, #3
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Joystick_PTR -> JoyStick_xGPIO, &GPIO_InitStruct);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f107 0220 	add.w	r2, r7, #32
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fbe6 	bl	8000cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Joystick_PTR -> JoyStick_yPIN;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	895b      	ldrh	r3, [r3, #10]
 800350c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800350e:	2303      	movs	r3, #3
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Joystick_PTR -> JoyStick_yGPIO, &GPIO_InitStruct);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f107 0220 	add.w	r2, r7, #32
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd fbd9 	bl	8000cd4 <HAL_GPIO_Init>

	hadc.Instance = Joystick_PTR -> ADC_Instance;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	4a20      	ldr	r2, [pc, #128]	; (80035a8 <JoyStick_Init+0x1b4>)
 8003528:	6013      	str	r3, [r2, #0]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800352a:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <JoyStick_Init+0x1b4>)
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
	hadc.Init.ContinuousConvMode = DISABLE;
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <JoyStick_Init+0x1b4>)
 8003532:	2200      	movs	r2, #0
 8003534:	60da      	str	r2, [r3, #12]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8003536:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <JoyStick_Init+0x1b4>)
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <JoyStick_Init+0x1b4>)
 800353e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003542:	61da      	str	r2, [r3, #28]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003544:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <JoyStick_Init+0x1b4>)
 8003546:	2200      	movs	r2, #0
 8003548:	605a      	str	r2, [r3, #4]
	hadc.Init.NbrOfConversion = 1;
 800354a:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <JoyStick_Init+0x1b4>)
 800354c:	2201      	movs	r2, #1
 800354e:	611a      	str	r2, [r3, #16]
	HAL_ADC_Init(&hadc);
 8003550:	4815      	ldr	r0, [pc, #84]	; (80035a8 <JoyStick_Init+0x1b4>)
 8003552:	f7fc fe5d 	bl	8000210 <HAL_ADC_Init>
    sConfig.Channel = Joystick_PTR -> ADCx_CH;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	4a14      	ldr	r2, [pc, #80]	; (80035ac <JoyStick_Init+0x1b8>)
 800355c:	6013      	str	r3, [r2, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <JoyStick_Init+0x1b8>)
 8003560:	2201      	movs	r2, #1
 8003562:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <JoyStick_Init+0x1b8>)
 8003566:	2203      	movs	r2, #3
 8003568:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800356a:	4910      	ldr	r1, [pc, #64]	; (80035ac <JoyStick_Init+0x1b8>)
 800356c:	480e      	ldr	r0, [pc, #56]	; (80035a8 <JoyStick_Init+0x1b4>)
 800356e:	f7fc ff27 	bl	80003c0 <HAL_ADC_ConfigChannel>

	if(calibrated == 0)
 8003572:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <JoyStick_Init+0x1bc>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <JoyStick_Init+0x192>
	{
		HAL_ADCEx_Calibration_Start(&hadc);
 800357a:	480b      	ldr	r0, [pc, #44]	; (80035a8 <JoyStick_Init+0x1b4>)
 800357c:	f7fd f8a4 	bl	80006c8 <HAL_ADCEx_Calibration_Start>
		calibrated = 1;
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <JoyStick_Init+0x1bc>)
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
	}
}
 8003586:	bf00      	nop
 8003588:	3730      	adds	r7, #48	; 0x30
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40010800 	.word	0x40010800
 8003594:	40021000 	.word	0x40021000
 8003598:	40010c00 	.word	0x40010c00
 800359c:	40011000 	.word	0x40011000
 80035a0:	40011400 	.word	0x40011400
 80035a4:	40011800 	.word	0x40011800
 80035a8:	2000006c 	.word	0x2000006c
 80035ac:	2000009c 	.word	0x2000009c
 80035b0:	200000a8 	.word	0x200000a8

080035b4 <SD_init>:
FRESULT res;
UINT byteswritten, bytesread;

// SD card init function
Std_ReturnType SD_init(GPIO_TypeDef * SD_CS_PORT, uint16_t SD_CS_PIN)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	807b      	strh	r3, [r7, #2]
	Std_ReturnType return_type = E_NOT_OK;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
	uint8 ErrorCount = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	73bb      	strb	r3, [r7, #14]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80035c8:	887b      	ldrh	r3, [r7, #2]
 80035ca:	2200      	movs	r2, #0
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd fd08 	bl	8000fe4 <HAL_GPIO_WritePin>
	MX_FATFS_Init();
 80035d4:	f000 f822 	bl	800361c <MX_FATFS_Init>
	do
	{
		return_type = f_mount(&fs , "" , 0);
 80035d8:	2200      	movs	r2, #0
 80035da:	490e      	ldr	r1, [pc, #56]	; (8003614 <SD_init+0x60>)
 80035dc:	480e      	ldr	r0, [pc, #56]	; (8003618 <SD_init+0x64>)
 80035de:	f7ff fe65 	bl	80032ac <f_mount>
 80035e2:	4603      	mov	r3, r0
 80035e4:	73fb      	strb	r3, [r7, #15]
		ErrorCount ++;
 80035e6:	7bbb      	ldrb	r3, [r7, #14]
 80035e8:	3301      	adds	r3, #1
 80035ea:	73bb      	strb	r3, [r7, #14]
	}while(return_type != FR_OK && ErrorCount < 5);
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <SD_init+0x44>
 80035f2:	7bbb      	ldrb	r3, [r7, #14]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d9ef      	bls.n	80035d8 <SD_init+0x24>

	if(return_type == FR_OK)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <SD_init+0x50>
		return_type = E_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	e001      	b.n	8003608 <SD_init+0x54>
	else
		return_type = E_NOT_OK;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]

	return return_type;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	080048c0 	.word	0x080048c0
 8003618:	200000b0 	.word	0x200000b0

0800361c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003620:	4904      	ldr	r1, [pc, #16]	; (8003634 <MX_FATFS_Init+0x18>)
 8003622:	4805      	ldr	r0, [pc, #20]	; (8003638 <MX_FATFS_Init+0x1c>)
 8003624:	f7ff fed6 	bl	80033d4 <FATFS_LinkDriver>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <MX_FATFS_Init+0x20>)
 800362e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20002118 	.word	0x20002118
 8003638:	20000010 	.word	0x20000010
 800363c:	2000211c 	.word	0x2000211c

08003640 <SELECT>:
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
 8003644:	2200      	movs	r2, #0
 8003646:	2110      	movs	r1, #16
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <SELECT+0x14>)
 800364a:	f7fd fccb 	bl	8000fe4 <HAL_GPIO_WritePin>
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40010800 	.word	0x40010800

08003658 <DESELECT>:
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
 800365c:	2201      	movs	r2, #1
 800365e:	2110      	movs	r1, #16
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <DESELECT+0x14>)
 8003662:	f7fd fcbf 	bl	8000fe4 <HAL_GPIO_WritePin>
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40010800 	.word	0x40010800

08003670 <SPI_TxByte>:
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
 800367a:	bf00      	nop
 800367c:	4808      	ldr	r0, [pc, #32]	; (80036a0 <SPI_TxByte+0x30>)
 800367e:	f7fe fe52 	bl	8002326 <HAL_SPI_GetState>
 8003682:	4603      	mov	r3, r0
 8003684:	2b01      	cmp	r3, #1
 8003686:	d1f9      	bne.n	800367c <SPI_TxByte+0xc>
 8003688:	1df9      	adds	r1, r7, #7
 800368a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800368e:	2201      	movs	r2, #1
 8003690:	4803      	ldr	r0, [pc, #12]	; (80036a0 <SPI_TxByte+0x30>)
 8003692:	f7fe fb6b 	bl	8001d6c <HAL_SPI_Transmit>
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200042c0 	.word	0x200042c0

080036a4 <SPI_RxByte>:
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	23ff      	movs	r3, #255	; 0xff
 80036ac:	71fb      	strb	r3, [r7, #7]
 80036ae:	2300      	movs	r3, #0
 80036b0:	71bb      	strb	r3, [r7, #6]
 80036b2:	bf00      	nop
 80036b4:	4809      	ldr	r0, [pc, #36]	; (80036dc <SPI_RxByte+0x38>)
 80036b6:	f7fe fe36 	bl	8002326 <HAL_SPI_GetState>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d1f9      	bne.n	80036b4 <SPI_RxByte+0x10>
 80036c0:	1dba      	adds	r2, r7, #6
 80036c2:	1df9      	adds	r1, r7, #7
 80036c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2301      	movs	r3, #1
 80036cc:	4803      	ldr	r0, [pc, #12]	; (80036dc <SPI_RxByte+0x38>)
 80036ce:	f7fe fc8a 	bl	8001fe6 <HAL_SPI_TransmitReceive>
 80036d2:	79bb      	ldrb	r3, [r7, #6]
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	200042c0 	.word	0x200042c0

080036e0 <SPI_RxBytePtr>:
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	f7ff ffdc 	bl	80036a4 <SPI_RxByte>
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	701a      	strb	r2, [r3, #0]
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <SD_ReadyWait>:
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <SD_ReadyWait+0x34>)
 8003704:	2232      	movs	r2, #50	; 0x32
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	f7ff ffcc 	bl	80036a4 <SPI_RxByte>
 800370c:	f7ff ffca 	bl	80036a4 <SPI_RxByte>
 8003710:	4603      	mov	r3, r0
 8003712:	71fb      	strb	r3, [r7, #7]
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	2bff      	cmp	r3, #255	; 0xff
 8003718:	d004      	beq.n	8003724 <SD_ReadyWait+0x28>
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <SD_ReadyWait+0x34>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f3      	bne.n	800370c <SD_ReadyWait+0x10>
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	2000431c 	.word	0x2000431c

08003734 <SD_PowerOn>:
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	f7ff ff8a 	bl	8003658 <DESELECT>
 8003744:	2300      	movs	r3, #0
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	e005      	b.n	8003756 <SD_PowerOn+0x22>
 800374a:	20ff      	movs	r0, #255	; 0xff
 800374c:	f7ff ff90 	bl	8003670 <SPI_TxByte>
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	3301      	adds	r3, #1
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b09      	cmp	r3, #9
 800375a:	ddf6      	ble.n	800374a <SD_PowerOn+0x16>
 800375c:	f7ff ff70 	bl	8003640 <SELECT>
 8003760:	2340      	movs	r3, #64	; 0x40
 8003762:	713b      	strb	r3, [r7, #4]
 8003764:	2300      	movs	r3, #0
 8003766:	717b      	strb	r3, [r7, #5]
 8003768:	2300      	movs	r3, #0
 800376a:	71bb      	strb	r3, [r7, #6]
 800376c:	2300      	movs	r3, #0
 800376e:	71fb      	strb	r3, [r7, #7]
 8003770:	2300      	movs	r3, #0
 8003772:	723b      	strb	r3, [r7, #8]
 8003774:	2395      	movs	r3, #149	; 0x95
 8003776:	727b      	strb	r3, [r7, #9]
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e009      	b.n	8003792 <SD_PowerOn+0x5e>
 800377e:	1d3a      	adds	r2, r7, #4
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ff72 	bl	8003670 <SPI_TxByte>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3301      	adds	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b05      	cmp	r3, #5
 8003796:	ddf2      	ble.n	800377e <SD_PowerOn+0x4a>
 8003798:	e002      	b.n	80037a0 <SD_PowerOn+0x6c>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	3b01      	subs	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	f7ff ff80 	bl	80036a4 <SPI_RxByte>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d002      	beq.n	80037b0 <SD_PowerOn+0x7c>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f4      	bne.n	800379a <SD_PowerOn+0x66>
 80037b0:	f7ff ff52 	bl	8003658 <DESELECT>
 80037b4:	20ff      	movs	r0, #255	; 0xff
 80037b6:	f7ff ff5b 	bl	8003670 <SPI_TxByte>
 80037ba:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <SD_PowerOn+0x94>)
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	bf00      	nop
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200000aa 	.word	0x200000aa

080037cc <SD_PowerOff>:
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <SD_PowerOff+0x14>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	bf00      	nop
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	200000aa 	.word	0x200000aa

080037e4 <SD_CheckPower>:
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	4b02      	ldr	r3, [pc, #8]	; (80037f4 <SD_CheckPower+0x10>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	200000aa 	.word	0x200000aa

080037f8 <SD_RxDataBlock>:
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <SD_RxDataBlock+0x68>)
 8003804:	220a      	movs	r2, #10
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	f7ff ff4c 	bl	80036a4 <SPI_RxByte>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2bff      	cmp	r3, #255	; 0xff
 8003814:	d104      	bne.n	8003820 <SD_RxDataBlock+0x28>
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <SD_RxDataBlock+0x68>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f3      	bne.n	8003808 <SD_RxDataBlock+0x10>
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2bfe      	cmp	r3, #254	; 0xfe
 8003824:	d001      	beq.n	800382a <SD_RxDataBlock+0x32>
 8003826:	2300      	movs	r3, #0
 8003828:	e016      	b.n	8003858 <SD_RxDataBlock+0x60>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff55 	bl	80036e0 <SPI_RxBytePtr>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff4f 	bl	80036e0 <SPI_RxBytePtr>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	3b02      	subs	r3, #2
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1ed      	bne.n	800382a <SD_RxDataBlock+0x32>
 800384e:	f7ff ff29 	bl	80036a4 <SPI_RxByte>
 8003852:	f7ff ff27 	bl	80036a4 <SPI_RxByte>
 8003856:	2301      	movs	r3, #1
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	2000431d 	.word	0x2000431d

08003864 <SD_TxDataBlock>:
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
 8003870:	2300      	movs	r3, #0
 8003872:	737b      	strb	r3, [r7, #13]
 8003874:	f7ff ff42 	bl	80036fc <SD_ReadyWait>
 8003878:	4603      	mov	r3, r0
 800387a:	2bff      	cmp	r3, #255	; 0xff
 800387c:	d001      	beq.n	8003882 <SD_TxDataBlock+0x1e>
 800387e:	2300      	movs	r3, #0
 8003880:	e040      	b.n	8003904 <SD_TxDataBlock+0xa0>
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fef3 	bl	8003670 <SPI_TxByte>
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	2bfd      	cmp	r3, #253	; 0xfd
 800388e:	d031      	beq.n	80038f4 <SD_TxDataBlock+0x90>
 8003890:	2300      	movs	r3, #0
 8003892:	73bb      	strb	r3, [r7, #14]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fee7 	bl	8003670 <SPI_TxByte>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fee0 	bl	8003670 <SPI_TxByte>
 80038b0:	7bbb      	ldrb	r3, [r7, #14]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	73bb      	strb	r3, [r7, #14]
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1eb      	bne.n	8003894 <SD_TxDataBlock+0x30>
 80038bc:	f7ff fef2 	bl	80036a4 <SPI_RxByte>
 80038c0:	f7ff fef0 	bl	80036a4 <SPI_RxByte>
 80038c4:	e00b      	b.n	80038de <SD_TxDataBlock+0x7a>
 80038c6:	f7ff feed 	bl	80036a4 <SPI_RxByte>
 80038ca:	4603      	mov	r3, r0
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d006      	beq.n	80038e6 <SD_TxDataBlock+0x82>
 80038d8:	7b7b      	ldrb	r3, [r7, #13]
 80038da:	3301      	adds	r3, #1
 80038dc:	737b      	strb	r3, [r7, #13]
 80038de:	7b7b      	ldrb	r3, [r7, #13]
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d9f0      	bls.n	80038c6 <SD_TxDataBlock+0x62>
 80038e4:	e000      	b.n	80038e8 <SD_TxDataBlock+0x84>
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	f7ff fedb 	bl	80036a4 <SPI_RxByte>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0fa      	beq.n	80038ea <SD_TxDataBlock+0x86>
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2b05      	cmp	r3, #5
 80038fc:	d101      	bne.n	8003902 <SD_TxDataBlock+0x9e>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <SD_TxDataBlock+0xa0>
 8003902:	2300      	movs	r3, #0
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <SD_SendCmd>:
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	71fb      	strb	r3, [r7, #7]
 8003918:	f7ff fef0 	bl	80036fc <SD_ReadyWait>
 800391c:	4603      	mov	r3, r0
 800391e:	2bff      	cmp	r3, #255	; 0xff
 8003920:	d001      	beq.n	8003926 <SD_SendCmd+0x1a>
 8003922:	23ff      	movs	r3, #255	; 0xff
 8003924:	e040      	b.n	80039a8 <SD_SendCmd+0x9c>
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fea1 	bl	8003670 <SPI_TxByte>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	0e1b      	lsrs	r3, r3, #24
 8003932:	b2db      	uxtb	r3, r3
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fe9b 	bl	8003670 <SPI_TxByte>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	b2db      	uxtb	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fe95 	bl	8003670 <SPI_TxByte>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	b2db      	uxtb	r3, r3
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fe8f 	bl	8003670 <SPI_TxByte>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fe8a 	bl	8003670 <SPI_TxByte>
 800395c:	2300      	movs	r3, #0
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d101      	bne.n	800396a <SD_SendCmd+0x5e>
 8003966:	2395      	movs	r3, #149	; 0x95
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	2b48      	cmp	r3, #72	; 0x48
 800396e:	d101      	bne.n	8003974 <SD_SendCmd+0x68>
 8003970:	2387      	movs	r3, #135	; 0x87
 8003972:	73fb      	strb	r3, [r7, #15]
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fe7a 	bl	8003670 <SPI_TxByte>
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	2b4c      	cmp	r3, #76	; 0x4c
 8003980:	d101      	bne.n	8003986 <SD_SendCmd+0x7a>
 8003982:	f7ff fe8f 	bl	80036a4 <SPI_RxByte>
 8003986:	230a      	movs	r3, #10
 8003988:	73bb      	strb	r3, [r7, #14]
 800398a:	f7ff fe8b 	bl	80036a4 <SPI_RxByte>
 800398e:	4603      	mov	r3, r0
 8003990:	737b      	strb	r3, [r7, #13]
 8003992:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003996:	2b00      	cmp	r3, #0
 8003998:	da05      	bge.n	80039a6 <SD_SendCmd+0x9a>
 800399a:	7bbb      	ldrb	r3, [r7, #14]
 800399c:	3b01      	subs	r3, #1
 800399e:	73bb      	strb	r3, [r7, #14]
 80039a0:	7bbb      	ldrb	r3, [r7, #14]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f1      	bne.n	800398a <SD_SendCmd+0x7e>
 80039a6:	7b7b      	ldrb	r3, [r7, #13]
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <SD_disk_initialize>:
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <SD_disk_initialize+0x14>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0d5      	b.n	8003b70 <SD_disk_initialize+0x1c0>
 80039c4:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <SD_disk_initialize+0x1c8>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <SD_disk_initialize+0x2a>
 80039d2:	4b69      	ldr	r3, [pc, #420]	; (8003b78 <SD_disk_initialize+0x1c8>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	e0ca      	b.n	8003b70 <SD_disk_initialize+0x1c0>
 80039da:	f7ff feab 	bl	8003734 <SD_PowerOn>
 80039de:	f7ff fe2f 	bl	8003640 <SELECT>
 80039e2:	2300      	movs	r3, #0
 80039e4:	73bb      	strb	r3, [r7, #14]
 80039e6:	2100      	movs	r1, #0
 80039e8:	2040      	movs	r0, #64	; 0x40
 80039ea:	f7ff ff8f 	bl	800390c <SD_SendCmd>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	f040 80a5 	bne.w	8003b40 <SD_disk_initialize+0x190>
 80039f6:	4b61      	ldr	r3, [pc, #388]	; (8003b7c <SD_disk_initialize+0x1cc>)
 80039f8:	2264      	movs	r2, #100	; 0x64
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003a00:	2048      	movs	r0, #72	; 0x48
 8003a02:	f7ff ff83 	bl	800390c <SD_SendCmd>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d158      	bne.n	8003abe <SD_disk_initialize+0x10e>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	e00c      	b.n	8003a2c <SD_disk_initialize+0x7c>
 8003a12:	7bfc      	ldrb	r4, [r7, #15]
 8003a14:	f7ff fe46 	bl	80036a4 <SPI_RxByte>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f107 0310 	add.w	r3, r7, #16
 8003a20:	4423      	add	r3, r4
 8003a22:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d9ef      	bls.n	8003a12 <SD_disk_initialize+0x62>
 8003a32:	7abb      	ldrb	r3, [r7, #10]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	f040 8083 	bne.w	8003b40 <SD_disk_initialize+0x190>
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
 8003a3c:	2baa      	cmp	r3, #170	; 0xaa
 8003a3e:	d17f      	bne.n	8003b40 <SD_disk_initialize+0x190>
 8003a40:	2100      	movs	r1, #0
 8003a42:	2077      	movs	r0, #119	; 0x77
 8003a44:	f7ff ff62 	bl	800390c <SD_SendCmd>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d807      	bhi.n	8003a5e <SD_disk_initialize+0xae>
 8003a4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003a52:	2069      	movs	r0, #105	; 0x69
 8003a54:	f7ff ff5a 	bl	800390c <SD_SendCmd>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <SD_disk_initialize+0xba>
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <SD_disk_initialize+0x1cc>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1eb      	bne.n	8003a40 <SD_disk_initialize+0x90>
 8003a68:	e000      	b.n	8003a6c <SD_disk_initialize+0xbc>
 8003a6a:	bf00      	nop
 8003a6c:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <SD_disk_initialize+0x1cc>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d064      	beq.n	8003b40 <SD_disk_initialize+0x190>
 8003a76:	2100      	movs	r1, #0
 8003a78:	207a      	movs	r0, #122	; 0x7a
 8003a7a:	f7ff ff47 	bl	800390c <SD_SendCmd>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d15d      	bne.n	8003b40 <SD_disk_initialize+0x190>
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	e00c      	b.n	8003aa4 <SD_disk_initialize+0xf4>
 8003a8a:	7bfc      	ldrb	r4, [r7, #15]
 8003a8c:	f7ff fe0a 	bl	80036a4 <SPI_RxByte>
 8003a90:	4603      	mov	r3, r0
 8003a92:	461a      	mov	r2, r3
 8003a94:	f107 0310 	add.w	r3, r7, #16
 8003a98:	4423      	add	r3, r4
 8003a9a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d9ef      	bls.n	8003a8a <SD_disk_initialize+0xda>
 8003aaa:	7a3b      	ldrb	r3, [r7, #8]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <SD_disk_initialize+0x108>
 8003ab4:	2306      	movs	r3, #6
 8003ab6:	e000      	b.n	8003aba <SD_disk_initialize+0x10a>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	73bb      	strb	r3, [r7, #14]
 8003abc:	e040      	b.n	8003b40 <SD_disk_initialize+0x190>
 8003abe:	2100      	movs	r1, #0
 8003ac0:	2077      	movs	r0, #119	; 0x77
 8003ac2:	f7ff ff23 	bl	800390c <SD_SendCmd>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d808      	bhi.n	8003ade <SD_disk_initialize+0x12e>
 8003acc:	2100      	movs	r1, #0
 8003ace:	2069      	movs	r0, #105	; 0x69
 8003ad0:	f7ff ff1c 	bl	800390c <SD_SendCmd>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d801      	bhi.n	8003ade <SD_disk_initialize+0x12e>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e000      	b.n	8003ae0 <SD_disk_initialize+0x130>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73bb      	strb	r3, [r7, #14]
 8003ae2:	7bbb      	ldrb	r3, [r7, #14]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d10e      	bne.n	8003b06 <SD_disk_initialize+0x156>
 8003ae8:	2100      	movs	r1, #0
 8003aea:	2077      	movs	r0, #119	; 0x77
 8003aec:	f7ff ff0e 	bl	800390c <SD_SendCmd>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d80e      	bhi.n	8003b14 <SD_disk_initialize+0x164>
 8003af6:	2100      	movs	r1, #0
 8003af8:	2069      	movs	r0, #105	; 0x69
 8003afa:	f7ff ff07 	bl	800390c <SD_SendCmd>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <SD_disk_initialize+0x164>
 8003b04:	e00d      	b.n	8003b22 <SD_disk_initialize+0x172>
 8003b06:	2100      	movs	r1, #0
 8003b08:	2041      	movs	r0, #65	; 0x41
 8003b0a:	f7ff feff 	bl	800390c <SD_SendCmd>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <SD_disk_initialize+0x170>
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <SD_disk_initialize+0x1cc>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e1      	bne.n	8003ae2 <SD_disk_initialize+0x132>
 8003b1e:	e000      	b.n	8003b22 <SD_disk_initialize+0x172>
 8003b20:	bf00      	nop
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <SD_disk_initialize+0x1cc>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <SD_disk_initialize+0x18c>
 8003b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b30:	2050      	movs	r0, #80	; 0x50
 8003b32:	f7ff feeb 	bl	800390c <SD_SendCmd>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <SD_disk_initialize+0x190>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73bb      	strb	r3, [r7, #14]
 8003b40:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <SD_disk_initialize+0x1d0>)
 8003b42:	7bbb      	ldrb	r3, [r7, #14]
 8003b44:	7013      	strb	r3, [r2, #0]
 8003b46:	f7ff fd87 	bl	8003658 <DESELECT>
 8003b4a:	f7ff fdab 	bl	80036a4 <SPI_RxByte>
 8003b4e:	7bbb      	ldrb	r3, [r7, #14]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <SD_disk_initialize+0x1b6>
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <SD_disk_initialize+0x1c8>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <SD_disk_initialize+0x1c8>)
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	e001      	b.n	8003b6a <SD_disk_initialize+0x1ba>
 8003b66:	f7ff fe31 	bl	80037cc <SD_PowerOff>
 8003b6a:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <SD_disk_initialize+0x1c8>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd90      	pop	{r4, r7, pc}
 8003b78:	20000005 	.word	0x20000005
 8003b7c:	2000431d 	.word	0x2000431d
 8003b80:	200000a9 	.word	0x200000a9

08003b84 <SD_disk_status>:
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <SD_disk_status+0x14>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e002      	b.n	8003b9e <SD_disk_status+0x1a>
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <SD_disk_status+0x24>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	20000005 	.word	0x20000005

08003bac <SD_disk_read>:
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4603      	mov	r3, r0
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <SD_disk_read+0x1c>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <SD_disk_read+0x20>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	e051      	b.n	8003c70 <SD_disk_read+0xc4>
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <SD_disk_read+0xcc>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <SD_disk_read+0x32>
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e048      	b.n	8003c70 <SD_disk_read+0xc4>
 8003bde:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <SD_disk_read+0xd0>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <SD_disk_read+0x44>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	025b      	lsls	r3, r3, #9
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	f7ff fd26 	bl	8003640 <SELECT>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d111      	bne.n	8003c1e <SD_disk_read+0x72>
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	2051      	movs	r0, #81	; 0x51
 8003bfe:	f7ff fe85 	bl	800390c <SD_SendCmd>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d129      	bne.n	8003c5c <SD_disk_read+0xb0>
 8003c08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c0c:	68b8      	ldr	r0, [r7, #8]
 8003c0e:	f7ff fdf3 	bl	80037f8 <SD_RxDataBlock>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d021      	beq.n	8003c5c <SD_disk_read+0xb0>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	e01e      	b.n	8003c5c <SD_disk_read+0xb0>
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	2052      	movs	r0, #82	; 0x52
 8003c22:	f7ff fe73 	bl	800390c <SD_SendCmd>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d117      	bne.n	8003c5c <SD_disk_read+0xb0>
 8003c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c30:	68b8      	ldr	r0, [r7, #8]
 8003c32:	f7ff fde1 	bl	80037f8 <SD_RxDataBlock>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <SD_disk_read+0xa6>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1ed      	bne.n	8003c2c <SD_disk_read+0x80>
 8003c50:	e000      	b.n	8003c54 <SD_disk_read+0xa8>
 8003c52:	bf00      	nop
 8003c54:	2100      	movs	r1, #0
 8003c56:	204c      	movs	r0, #76	; 0x4c
 8003c58:	f7ff fe58 	bl	800390c <SD_SendCmd>
 8003c5c:	f7ff fcfc 	bl	8003658 <DESELECT>
 8003c60:	f7ff fd20 	bl	80036a4 <SPI_RxByte>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	bf14      	ite	ne
 8003c6a:	2301      	movne	r3, #1
 8003c6c:	2300      	moveq	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000005 	.word	0x20000005
 8003c7c:	200000a9 	.word	0x200000a9

08003c80 <SD_disk_write>:
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <SD_disk_write+0x1c>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <SD_disk_write+0x20>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	e06b      	b.n	8003d78 <SD_disk_write+0xf8>
 8003ca0:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <SD_disk_write+0x100>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <SD_disk_write+0x32>
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e062      	b.n	8003d78 <SD_disk_write+0xf8>
 8003cb2:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <SD_disk_write+0x100>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <SD_disk_write+0x44>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e059      	b.n	8003d78 <SD_disk_write+0xf8>
 8003cc4:	4b2f      	ldr	r3, [pc, #188]	; (8003d84 <SD_disk_write+0x104>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <SD_disk_write+0x56>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	025b      	lsls	r3, r3, #9
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	f7ff fcb3 	bl	8003640 <SELECT>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d110      	bne.n	8003d02 <SD_disk_write+0x82>
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	2058      	movs	r0, #88	; 0x58
 8003ce4:	f7ff fe12 	bl	800390c <SD_SendCmd>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d13a      	bne.n	8003d64 <SD_disk_write+0xe4>
 8003cee:	21fe      	movs	r1, #254	; 0xfe
 8003cf0:	68b8      	ldr	r0, [r7, #8]
 8003cf2:	f7ff fdb7 	bl	8003864 <SD_TxDataBlock>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d033      	beq.n	8003d64 <SD_disk_write+0xe4>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	e030      	b.n	8003d64 <SD_disk_write+0xe4>
 8003d02:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <SD_disk_write+0x104>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <SD_disk_write+0x9e>
 8003d0e:	2100      	movs	r1, #0
 8003d10:	2077      	movs	r0, #119	; 0x77
 8003d12:	f7ff fdfb 	bl	800390c <SD_SendCmd>
 8003d16:	6839      	ldr	r1, [r7, #0]
 8003d18:	2057      	movs	r0, #87	; 0x57
 8003d1a:	f7ff fdf7 	bl	800390c <SD_SendCmd>
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	2059      	movs	r0, #89	; 0x59
 8003d22:	f7ff fdf3 	bl	800390c <SD_SendCmd>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d11b      	bne.n	8003d64 <SD_disk_write+0xe4>
 8003d2c:	21fc      	movs	r1, #252	; 0xfc
 8003d2e:	68b8      	ldr	r0, [r7, #8]
 8003d30:	f7ff fd98 	bl	8003864 <SD_TxDataBlock>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <SD_disk_write+0xd0>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ee      	bne.n	8003d2c <SD_disk_write+0xac>
 8003d4e:	e000      	b.n	8003d52 <SD_disk_write+0xd2>
 8003d50:	bf00      	nop
 8003d52:	21fd      	movs	r1, #253	; 0xfd
 8003d54:	2000      	movs	r0, #0
 8003d56:	f7ff fd85 	bl	8003864 <SD_TxDataBlock>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <SD_disk_write+0xe4>
 8003d60:	2301      	movs	r3, #1
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	f7ff fc78 	bl	8003658 <DESELECT>
 8003d68:	f7ff fc9c 	bl	80036a4 <SPI_RxByte>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bf14      	ite	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	2300      	moveq	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000005 	.word	0x20000005
 8003d84:	200000a9 	.word	0x200000a9

08003d88 <SD_disk_ioctl>:
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b08b      	sub	sp, #44	; 0x2c
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	603a      	str	r2, [r7, #0]
 8003d92:	71fb      	strb	r3, [r7, #7]
 8003d94:	460b      	mov	r3, r1
 8003d96:	71bb      	strb	r3, [r7, #6]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	623b      	str	r3, [r7, #32]
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <SD_disk_ioctl+0x1e>
 8003da2:	2304      	movs	r3, #4
 8003da4:	e11b      	b.n	8003fde <SD_disk_ioctl+0x256>
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003dac:	79bb      	ldrb	r3, [r7, #6]
 8003dae:	2b05      	cmp	r3, #5
 8003db0:	d129      	bne.n	8003e06 <SD_disk_ioctl+0x7e>
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d017      	beq.n	8003dea <SD_disk_ioctl+0x62>
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	dc1f      	bgt.n	8003dfe <SD_disk_ioctl+0x76>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <SD_disk_ioctl+0x40>
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d00b      	beq.n	8003dde <SD_disk_ioctl+0x56>
 8003dc6:	e01a      	b.n	8003dfe <SD_disk_ioctl+0x76>
 8003dc8:	f7ff fd0c 	bl	80037e4 <SD_CheckPower>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <SD_disk_ioctl+0x4e>
 8003dd2:	f7ff fcfb 	bl	80037cc <SD_PowerOff>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ddc:	e0fd      	b.n	8003fda <SD_disk_ioctl+0x252>
 8003dde:	f7ff fca9 	bl	8003734 <SD_PowerOn>
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003de8:	e0f7      	b.n	8003fda <SD_disk_ioctl+0x252>
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	1c5c      	adds	r4, r3, #1
 8003dee:	f7ff fcf9 	bl	80037e4 <SD_CheckPower>
 8003df2:	4603      	mov	r3, r0
 8003df4:	7023      	strb	r3, [r4, #0]
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003dfc:	e0ed      	b.n	8003fda <SD_disk_ioctl+0x252>
 8003dfe:	2304      	movs	r3, #4
 8003e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e04:	e0e9      	b.n	8003fda <SD_disk_ioctl+0x252>
 8003e06:	4b78      	ldr	r3, [pc, #480]	; (8003fe8 <SD_disk_ioctl+0x260>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <SD_disk_ioctl+0x90>
 8003e14:	2303      	movs	r3, #3
 8003e16:	e0e2      	b.n	8003fde <SD_disk_ioctl+0x256>
 8003e18:	f7ff fc12 	bl	8003640 <SELECT>
 8003e1c:	79bb      	ldrb	r3, [r7, #6]
 8003e1e:	2b0d      	cmp	r3, #13
 8003e20:	f200 80cc 	bhi.w	8003fbc <SD_disk_ioctl+0x234>
 8003e24:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <SD_disk_ioctl+0xa4>)
 8003e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2a:	bf00      	nop
 8003e2c:	08003f27 	.word	0x08003f27
 8003e30:	08003e65 	.word	0x08003e65
 8003e34:	08003f17 	.word	0x08003f17
 8003e38:	08003fbd 	.word	0x08003fbd
 8003e3c:	08003fbd 	.word	0x08003fbd
 8003e40:	08003fbd 	.word	0x08003fbd
 8003e44:	08003fbd 	.word	0x08003fbd
 8003e48:	08003fbd 	.word	0x08003fbd
 8003e4c:	08003fbd 	.word	0x08003fbd
 8003e50:	08003fbd 	.word	0x08003fbd
 8003e54:	08003fbd 	.word	0x08003fbd
 8003e58:	08003f39 	.word	0x08003f39
 8003e5c:	08003f5d 	.word	0x08003f5d
 8003e60:	08003f81 	.word	0x08003f81
 8003e64:	2100      	movs	r1, #0
 8003e66:	2049      	movs	r0, #73	; 0x49
 8003e68:	f7ff fd50 	bl	800390c <SD_SendCmd>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 80a8 	bne.w	8003fc4 <SD_disk_ioctl+0x23c>
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	2110      	movs	r1, #16
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fcbc 	bl	80037f8 <SD_RxDataBlock>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 809e 	beq.w	8003fc4 <SD_disk_ioctl+0x23c>
 8003e88:	7b3b      	ldrb	r3, [r7, #12]
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d10e      	bne.n	8003eb0 <SD_disk_ioctl+0x128>
 8003e92:	7d7b      	ldrb	r3, [r7, #21]
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	7d3b      	ldrb	r3, [r7, #20]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	83fb      	strh	r3, [r7, #30]
 8003ea6:	8bfb      	ldrh	r3, [r7, #30]
 8003ea8:	029a      	lsls	r2, r3, #10
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e02e      	b.n	8003f0e <SD_disk_ioctl+0x186>
 8003eb0:	7c7b      	ldrb	r3, [r7, #17]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	7dbb      	ldrb	r3, [r7, #22]
 8003eba:	09db      	lsrs	r3, r3, #7
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	7d7b      	ldrb	r3, [r7, #21]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 0306 	and.w	r3, r3, #6
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	4413      	add	r3, r2
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	3302      	adds	r3, #2
 8003ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003ed8:	7d3b      	ldrb	r3, [r7, #20]
 8003eda:	099b      	lsrs	r3, r3, #6
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	7cbb      	ldrb	r3, [r7, #18]
 8003eee:	029b      	lsls	r3, r3, #10
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3301      	adds	r3, #1
 8003efe:	83fb      	strh	r3, [r7, #30]
 8003f00:	8bfa      	ldrh	r2, [r7, #30]
 8003f02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f06:	3b09      	subs	r3, #9
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f14:	e056      	b.n	8003fc4 <SD_disk_ioctl+0x23c>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f24:	e055      	b.n	8003fd2 <SD_disk_ioctl+0x24a>
 8003f26:	f7ff fbe9 	bl	80036fc <SD_ReadyWait>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2bff      	cmp	r3, #255	; 0xff
 8003f2e:	d14b      	bne.n	8003fc8 <SD_disk_ioctl+0x240>
 8003f30:	2300      	movs	r3, #0
 8003f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f36:	e047      	b.n	8003fc8 <SD_disk_ioctl+0x240>
 8003f38:	2100      	movs	r1, #0
 8003f3a:	2049      	movs	r0, #73	; 0x49
 8003f3c:	f7ff fce6 	bl	800390c <SD_SendCmd>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d142      	bne.n	8003fcc <SD_disk_ioctl+0x244>
 8003f46:	2110      	movs	r1, #16
 8003f48:	6a38      	ldr	r0, [r7, #32]
 8003f4a:	f7ff fc55 	bl	80037f8 <SD_RxDataBlock>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d03b      	beq.n	8003fcc <SD_disk_ioctl+0x244>
 8003f54:	2300      	movs	r3, #0
 8003f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f5a:	e037      	b.n	8003fcc <SD_disk_ioctl+0x244>
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	204a      	movs	r0, #74	; 0x4a
 8003f60:	f7ff fcd4 	bl	800390c <SD_SendCmd>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d132      	bne.n	8003fd0 <SD_disk_ioctl+0x248>
 8003f6a:	2110      	movs	r1, #16
 8003f6c:	6a38      	ldr	r0, [r7, #32]
 8003f6e:	f7ff fc43 	bl	80037f8 <SD_RxDataBlock>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d02b      	beq.n	8003fd0 <SD_disk_ioctl+0x248>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f7e:	e027      	b.n	8003fd0 <SD_disk_ioctl+0x248>
 8003f80:	2100      	movs	r1, #0
 8003f82:	207a      	movs	r0, #122	; 0x7a
 8003f84:	f7ff fcc2 	bl	800390c <SD_SendCmd>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d116      	bne.n	8003fbc <SD_disk_ioctl+0x234>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003f94:	e00b      	b.n	8003fae <SD_disk_ioctl+0x226>
 8003f96:	6a3c      	ldr	r4, [r7, #32]
 8003f98:	1c63      	adds	r3, r4, #1
 8003f9a:	623b      	str	r3, [r7, #32]
 8003f9c:	f7ff fb82 	bl	80036a4 <SPI_RxByte>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	7023      	strb	r3, [r4, #0]
 8003fa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003fae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d9ef      	bls.n	8003f96 <SD_disk_ioctl+0x20e>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fc2:	e006      	b.n	8003fd2 <SD_disk_ioctl+0x24a>
 8003fc4:	bf00      	nop
 8003fc6:	e004      	b.n	8003fd2 <SD_disk_ioctl+0x24a>
 8003fc8:	bf00      	nop
 8003fca:	e002      	b.n	8003fd2 <SD_disk_ioctl+0x24a>
 8003fcc:	bf00      	nop
 8003fce:	e000      	b.n	8003fd2 <SD_disk_ioctl+0x24a>
 8003fd0:	bf00      	nop
 8003fd2:	f7ff fb41 	bl	8003658 <DESELECT>
 8003fd6:	f7ff fb65 	bl	80036a4 <SPI_RxByte>
 8003fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fde:	4618      	mov	r0, r3
 8003fe0:	372c      	adds	r7, #44	; 0x2c
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd90      	pop	{r4, r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000005 	.word	0x20000005

08003fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	JOYSTICK* Joystick_Handler = (JOYSTICK*)&JoyStick_CfgParam;
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <main+0x38>)
 8003ff4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ff6:	f7fc f8a9 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ffa:	f000 f817 	bl	800402c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ffe:	f000 f91d 	bl	800423c <MX_GPIO_Init>
  MX_DMA_Init();
 8004002:	f000 f8fd 	bl	8004200 <MX_DMA_Init>
  MX_I2C1_Init();
 8004006:	f000 f86d 	bl	80040e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800400a:	f000 f899 	bl	8004140 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800400e:	f000 f8cd 	bl	80041ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  JoyStick_Init(Joystick_Handler);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff f9ee 	bl	80033f4 <JoyStick_Init>
  if(SD_init(SD_CS_GPIO_Port, SD_CS_Pin) != E_OK)
 8004018:	2110      	movs	r1, #16
 800401a:	4803      	ldr	r0, [pc, #12]	; (8004028 <main+0x3c>)
 800401c:	f7ff faca 	bl	80035b4 <SD_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004020:	e7fe      	b.n	8004020 <main+0x34>
 8004022:	bf00      	nop
 8004024:	080048c4 	.word	0x080048c4
 8004028:	40010800 	.word	0x40010800

0800402c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b094      	sub	sp, #80	; 0x50
 8004030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004036:	2228      	movs	r2, #40	; 0x28
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fc1c 	bl	8004878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004040:	f107 0314 	add.w	r3, r7, #20
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	60da      	str	r2, [r3, #12]
 800404e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004050:	1d3b      	adds	r3, r7, #4
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	609a      	str	r2, [r3, #8]
 800405a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800405c:	2301      	movs	r3, #1
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004066:	2300      	movs	r3, #0
 8004068:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800406a:	2301      	movs	r3, #1
 800406c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800406e:	2302      	movs	r3, #2
 8004070:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004076:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004078:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800407c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800407e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd f8d6 	bl	8001234 <HAL_RCC_OscConfig>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800408e:	f000 f939 	bl	8004304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004092:	230f      	movs	r3, #15
 8004094:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004096:	2302      	movs	r3, #2
 8004098:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800409e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040a4:	2300      	movs	r3, #0
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fd fb24 	bl	80016fc <HAL_RCC_ClockConfig>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80040ba:	f000 f923 	bl	8004304 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80040be:	2302      	movs	r3, #2
 80040c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80040c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fd fcd4 	bl	8001a78 <HAL_RCCEx_PeriphCLKConfig>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80040d6:	f000 f915 	bl	8004304 <Error_Handler>
  }
}
 80040da:	bf00      	nop
 80040dc:	3750      	adds	r7, #80	; 0x50
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <MX_I2C1_Init+0x50>)
 80040ea:	4a13      	ldr	r2, [pc, #76]	; (8004138 <MX_I2C1_Init+0x54>)
 80040ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <MX_I2C1_Init+0x50>)
 80040f0:	4a12      	ldr	r2, [pc, #72]	; (800413c <MX_I2C1_Init+0x58>)
 80040f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <MX_I2C1_Init+0x50>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <MX_I2C1_Init+0x50>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <MX_I2C1_Init+0x50>)
 8004102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004106:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <MX_I2C1_Init+0x50>)
 800410a:	2200      	movs	r2, #0
 800410c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <MX_I2C1_Init+0x50>)
 8004110:	2200      	movs	r2, #0
 8004112:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <MX_I2C1_Init+0x50>)
 8004116:	2200      	movs	r2, #0
 8004118:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <MX_I2C1_Init+0x50>)
 800411c:	2200      	movs	r2, #0
 800411e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004120:	4804      	ldr	r0, [pc, #16]	; (8004134 <MX_I2C1_Init+0x50>)
 8004122:	f7fc ff77 	bl	8001014 <HAL_I2C_Init>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800412c:	f000 f8ea 	bl	8004304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004130:	bf00      	nop
 8004132:	bd80      	pop	{r7, pc}
 8004134:	200041a0 	.word	0x200041a0
 8004138:	40005400 	.word	0x40005400
 800413c:	00061a80 	.word	0x00061a80

08004140 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004144:	4b17      	ldr	r3, [pc, #92]	; (80041a4 <MX_SPI1_Init+0x64>)
 8004146:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <MX_SPI1_Init+0x68>)
 8004148:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800414a:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <MX_SPI1_Init+0x64>)
 800414c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004150:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004152:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <MX_SPI1_Init+0x64>)
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004158:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <MX_SPI1_Init+0x64>)
 800415a:	2200      	movs	r2, #0
 800415c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <MX_SPI1_Init+0x64>)
 8004160:	2200      	movs	r2, #0
 8004162:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004164:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <MX_SPI1_Init+0x64>)
 8004166:	2200      	movs	r2, #0
 8004168:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <MX_SPI1_Init+0x64>)
 800416c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004170:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004172:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <MX_SPI1_Init+0x64>)
 8004174:	2220      	movs	r2, #32
 8004176:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004178:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <MX_SPI1_Init+0x64>)
 800417a:	2200      	movs	r2, #0
 800417c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <MX_SPI1_Init+0x64>)
 8004180:	2200      	movs	r2, #0
 8004182:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <MX_SPI1_Init+0x64>)
 8004186:	2200      	movs	r2, #0
 8004188:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <MX_SPI1_Init+0x64>)
 800418c:	220a      	movs	r2, #10
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004190:	4804      	ldr	r0, [pc, #16]	; (80041a4 <MX_SPI1_Init+0x64>)
 8004192:	f7fe f95c 	bl	800244e <HAL_SPI_Init>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800419c:	f000 f8b2 	bl	8004304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	200042c0 	.word	0x200042c0
 80041a8:	40013000 	.word	0x40013000

080041ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <MX_USART1_UART_Init+0x50>)
 80041b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041d2:	220c      	movs	r2, #12
 80041d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041e2:	4805      	ldr	r0, [pc, #20]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041e4:	f7fe f998 	bl	8002518 <HAL_UART_Init>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80041ee:	f000 f889 	bl	8004304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20004234 	.word	0x20004234
 80041fc:	40013800 	.word	0x40013800

08004200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004206:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <MX_DMA_Init+0x38>)
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	4a0b      	ldr	r2, [pc, #44]	; (8004238 <MX_DMA_Init+0x38>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6153      	str	r3, [r2, #20]
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <MX_DMA_Init+0x38>)
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800421e:	2200      	movs	r2, #0
 8004220:	2100      	movs	r1, #0
 8004222:	200b      	movs	r0, #11
 8004224:	f7fc fbbf 	bl	80009a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004228:	200b      	movs	r0, #11
 800422a:	f7fc fbd8 	bl	80009de <HAL_NVIC_EnableIRQ>

}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000

0800423c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004242:	f107 0310 	add.w	r3, r7, #16
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	609a      	str	r2, [r3, #8]
 800424e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004250:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <MX_GPIO_Init+0xbc>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	4a28      	ldr	r2, [pc, #160]	; (80042f8 <MX_GPIO_Init+0xbc>)
 8004256:	f043 0320 	orr.w	r3, r3, #32
 800425a:	6193      	str	r3, [r2, #24]
 800425c:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <MX_GPIO_Init+0xbc>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004268:	4b23      	ldr	r3, [pc, #140]	; (80042f8 <MX_GPIO_Init+0xbc>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <MX_GPIO_Init+0xbc>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	6193      	str	r3, [r2, #24]
 8004274:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <MX_GPIO_Init+0xbc>)
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004280:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <MX_GPIO_Init+0xbc>)
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <MX_GPIO_Init+0xbc>)
 8004286:	f043 0308 	orr.w	r3, r3, #8
 800428a:	6193      	str	r3, [r2, #24]
 800428c:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <MX_GPIO_Init+0xbc>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8004298:	2200      	movs	r2, #0
 800429a:	2110      	movs	r1, #16
 800429c:	4817      	ldr	r0, [pc, #92]	; (80042fc <MX_GPIO_Init+0xc0>)
 800429e:	f7fc fea1 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Joystick_Button_Pin */
  GPIO_InitStruct.Pin = Joystick_Button_Pin;
 80042a2:	2301      	movs	r3, #1
 80042a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 80042ae:	f107 0310 	add.w	r3, r7, #16
 80042b2:	4619      	mov	r1, r3
 80042b4:	4811      	ldr	r0, [pc, #68]	; (80042fc <MX_GPIO_Init+0xc0>)
 80042b6:	f7fc fd0d 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80042ba:	2310      	movs	r3, #16
 80042bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042be:	2301      	movs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c6:	2302      	movs	r3, #2
 80042c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80042ca:	f107 0310 	add.w	r3, r7, #16
 80042ce:	4619      	mov	r1, r3
 80042d0:	480a      	ldr	r0, [pc, #40]	; (80042fc <MX_GPIO_Init+0xc0>)
 80042d2:	f7fc fcff 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS12_Pin MS3_Pin MS6_Pin MS9_Pin */
  GPIO_InitStruct.Pin = MS12_Pin|MS3_Pin|MS6_Pin|MS9_Pin;
 80042d6:	f640 4303 	movw	r3, #3075	; 0xc03
 80042da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	4619      	mov	r1, r3
 80042ea:	4805      	ldr	r0, [pc, #20]	; (8004300 <MX_GPIO_Init+0xc4>)
 80042ec:	f7fc fcf2 	bl	8000cd4 <HAL_GPIO_Init>

}
 80042f0:	bf00      	nop
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40010800 	.word	0x40010800
 8004300:	40010c00 	.word	0x40010c00

08004304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004308:	bf00      	nop
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004316:	4b15      	ldr	r3, [pc, #84]	; (800436c <HAL_MspInit+0x5c>)
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	4a14      	ldr	r2, [pc, #80]	; (800436c <HAL_MspInit+0x5c>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6193      	str	r3, [r2, #24]
 8004322:	4b12      	ldr	r3, [pc, #72]	; (800436c <HAL_MspInit+0x5c>)
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <HAL_MspInit+0x5c>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	4a0e      	ldr	r2, [pc, #56]	; (800436c <HAL_MspInit+0x5c>)
 8004334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004338:	61d3      	str	r3, [r2, #28]
 800433a:	4b0c      	ldr	r3, [pc, #48]	; (800436c <HAL_MspInit+0x5c>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <HAL_MspInit+0x60>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	4a04      	ldr	r2, [pc, #16]	; (8004370 <HAL_MspInit+0x60>)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	40021000 	.word	0x40021000
 8004370:	40010000 	.word	0x40010000

08004374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800437c:	f107 0310 	add.w	r3, r7, #16
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a28      	ldr	r2, [pc, #160]	; (8004430 <HAL_ADC_MspInit+0xbc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d149      	bne.n	8004428 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004394:	4b27      	ldr	r3, [pc, #156]	; (8004434 <HAL_ADC_MspInit+0xc0>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	4a26      	ldr	r2, [pc, #152]	; (8004434 <HAL_ADC_MspInit+0xc0>)
 800439a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800439e:	6193      	str	r3, [r2, #24]
 80043a0:	4b24      	ldr	r3, [pc, #144]	; (8004434 <HAL_ADC_MspInit+0xc0>)
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ac:	4b21      	ldr	r3, [pc, #132]	; (8004434 <HAL_ADC_MspInit+0xc0>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	4a20      	ldr	r2, [pc, #128]	; (8004434 <HAL_ADC_MspInit+0xc0>)
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	6193      	str	r3, [r2, #24]
 80043b8:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <HAL_ADC_MspInit+0xc0>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Joystick_xValue_Pin|Joystick_yValue_Pin;
 80043c4:	2306      	movs	r3, #6
 80043c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043c8:	2303      	movs	r3, #3
 80043ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	4619      	mov	r1, r3
 80043d2:	4819      	ldr	r0, [pc, #100]	; (8004438 <HAL_ADC_MspInit+0xc4>)
 80043d4:	f7fc fc7e 	bl	8000cd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80043d8:	4b18      	ldr	r3, [pc, #96]	; (800443c <HAL_ADC_MspInit+0xc8>)
 80043da:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_ADC_MspInit+0xcc>)
 80043dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043de:	4b17      	ldr	r3, [pc, #92]	; (800443c <HAL_ADC_MspInit+0xc8>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e4:	4b15      	ldr	r3, [pc, #84]	; (800443c <HAL_ADC_MspInit+0xc8>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <HAL_ADC_MspInit+0xc8>)
 80043ec:	2280      	movs	r2, #128	; 0x80
 80043ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80043f0:	4b12      	ldr	r3, [pc, #72]	; (800443c <HAL_ADC_MspInit+0xc8>)
 80043f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80043f8:	4b10      	ldr	r3, [pc, #64]	; (800443c <HAL_ADC_MspInit+0xc8>)
 80043fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_ADC_MspInit+0xc8>)
 8004402:	2220      	movs	r2, #32
 8004404:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <HAL_ADC_MspInit+0xc8>)
 8004408:	2200      	movs	r2, #0
 800440a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800440c:	480b      	ldr	r0, [pc, #44]	; (800443c <HAL_ADC_MspInit+0xc8>)
 800440e:	f7fc fb01 	bl	8000a14 <HAL_DMA_Init>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8004418:	f7ff ff74 	bl	8004304 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a07      	ldr	r2, [pc, #28]	; (800443c <HAL_ADC_MspInit+0xc8>)
 8004420:	621a      	str	r2, [r3, #32]
 8004422:	4a06      	ldr	r2, [pc, #24]	; (800443c <HAL_ADC_MspInit+0xc8>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004428:	bf00      	nop
 800442a:	3720      	adds	r7, #32
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40012400 	.word	0x40012400
 8004434:	40021000 	.word	0x40021000
 8004438:	40010800 	.word	0x40010800
 800443c:	20004274 	.word	0x20004274
 8004440:	40020008 	.word	0x40020008

08004444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800444c:	f107 0310 	add.w	r3, r7, #16
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <HAL_I2C_MspInit+0x70>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d123      	bne.n	80044ac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004464:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <HAL_I2C_MspInit+0x74>)
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <HAL_I2C_MspInit+0x74>)
 800446a:	f043 0308 	orr.w	r3, r3, #8
 800446e:	6193      	str	r3, [r2, #24]
 8004470:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <HAL_I2C_MspInit+0x74>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800447c:	23c0      	movs	r3, #192	; 0xc0
 800447e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004480:	2312      	movs	r3, #18
 8004482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004484:	2303      	movs	r3, #3
 8004486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004488:	f107 0310 	add.w	r3, r7, #16
 800448c:	4619      	mov	r1, r3
 800448e:	480b      	ldr	r0, [pc, #44]	; (80044bc <HAL_I2C_MspInit+0x78>)
 8004490:	f7fc fc20 	bl	8000cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004494:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <HAL_I2C_MspInit+0x74>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <HAL_I2C_MspInit+0x74>)
 800449a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800449e:	61d3      	str	r3, [r2, #28]
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_I2C_MspInit+0x74>)
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80044ac:	bf00      	nop
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40005400 	.word	0x40005400
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40010c00 	.word	0x40010c00

080044c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c8:	f107 0310 	add.w	r3, r7, #16
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <HAL_SPI_MspInit+0x88>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d12f      	bne.n	8004540 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80044e0:	4b1a      	ldr	r3, [pc, #104]	; (800454c <HAL_SPI_MspInit+0x8c>)
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	4a19      	ldr	r2, [pc, #100]	; (800454c <HAL_SPI_MspInit+0x8c>)
 80044e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044ea:	6193      	str	r3, [r2, #24]
 80044ec:	4b17      	ldr	r3, [pc, #92]	; (800454c <HAL_SPI_MspInit+0x8c>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <HAL_SPI_MspInit+0x8c>)
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	4a13      	ldr	r2, [pc, #76]	; (800454c <HAL_SPI_MspInit+0x8c>)
 80044fe:	f043 0304 	orr.w	r3, r3, #4
 8004502:	6193      	str	r3, [r2, #24]
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <HAL_SPI_MspInit+0x8c>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_CLK_Pin|SD_MOSI_Pin;
 8004510:	23a0      	movs	r3, #160	; 0xa0
 8004512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004514:	2302      	movs	r3, #2
 8004516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004518:	2303      	movs	r3, #3
 800451a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800451c:	f107 0310 	add.w	r3, r7, #16
 8004520:	4619      	mov	r1, r3
 8004522:	480b      	ldr	r0, [pc, #44]	; (8004550 <HAL_SPI_MspInit+0x90>)
 8004524:	f7fc fbd6 	bl	8000cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin;
 8004528:	2340      	movs	r3, #64	; 0x40
 800452a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 8004534:	f107 0310 	add.w	r3, r7, #16
 8004538:	4619      	mov	r1, r3
 800453a:	4805      	ldr	r0, [pc, #20]	; (8004550 <HAL_SPI_MspInit+0x90>)
 800453c:	f7fc fbca 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004540:	bf00      	nop
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40013000 	.word	0x40013000
 800454c:	40021000 	.word	0x40021000
 8004550:	40010800 	.word	0x40010800

08004554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800455c:	f107 0310 	add.w	r3, r7, #16
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <HAL_UART_MspInit+0x8c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d131      	bne.n	80045d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <HAL_UART_MspInit+0x90>)
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <HAL_UART_MspInit+0x90>)
 800457a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800457e:	6193      	str	r3, [r2, #24]
 8004580:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <HAL_UART_MspInit+0x90>)
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800458c:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <HAL_UART_MspInit+0x90>)
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <HAL_UART_MspInit+0x90>)
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	6193      	str	r3, [r2, #24]
 8004598:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <HAL_UART_MspInit+0x90>)
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80045a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045aa:	2302      	movs	r3, #2
 80045ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045ae:	2303      	movs	r3, #3
 80045b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b2:	f107 0310 	add.w	r3, r7, #16
 80045b6:	4619      	mov	r1, r3
 80045b8:	480b      	ldr	r0, [pc, #44]	; (80045e8 <HAL_UART_MspInit+0x94>)
 80045ba:	f7fc fb8b 	bl	8000cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045cc:	f107 0310 	add.w	r3, r7, #16
 80045d0:	4619      	mov	r1, r3
 80045d2:	4805      	ldr	r0, [pc, #20]	; (80045e8 <HAL_UART_MspInit+0x94>)
 80045d4:	f7fc fb7e 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80045d8:	bf00      	nop
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40013800 	.word	0x40013800
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40010800 	.word	0x40010800

080045ec <SDTimer_Handler>:
/* USER CODE BEGIN EV */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80045f0:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <SDTimer_Handler+0x3c>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d006      	beq.n	8004608 <SDTimer_Handler+0x1c>
    Timer1--;
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <SDTimer_Handler+0x3c>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b2da      	uxtb	r2, r3
 8004604:	4b08      	ldr	r3, [pc, #32]	; (8004628 <SDTimer_Handler+0x3c>)
 8004606:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <SDTimer_Handler+0x40>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d006      	beq.n	8004620 <SDTimer_Handler+0x34>
    Timer2--;
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <SDTimer_Handler+0x40>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b2da      	uxtb	r2, r3
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <SDTimer_Handler+0x40>)
 800461e:	701a      	strb	r2, [r3, #0]
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	2000431d 	.word	0x2000431d
 800462c:	2000431c 	.word	0x2000431c

08004630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004640:	e7fe      	b.n	8004640 <HardFault_Handler+0x4>

08004642 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004646:	e7fe      	b.n	8004646 <MemManage_Handler+0x4>

08004648 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800464c:	e7fe      	b.n	800464c <BusFault_Handler+0x4>

0800464e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800464e:	b480      	push	{r7}
 8004650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004652:	e7fe      	b.n	8004652 <UsageFault_Handler+0x4>

08004654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr

08004660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
  {
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
  	FatFsCnt++;
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <SysTick_Handler+0x30>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	3301      	adds	r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <SysTick_Handler+0x30>)
 8004688:	701a      	strb	r2, [r3, #0]
    if(FatFsCnt >= 10)
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <SysTick_Handler+0x30>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b09      	cmp	r3, #9
 8004692:	d904      	bls.n	800469e <SysTick_Handler+0x26>
    {
      FatFsCnt = 0;
 8004694:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <SysTick_Handler+0x30>)
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
      SDTimer_Handler();
 800469a:	f7ff ffa7 	bl	80045ec <SDTimer_Handler>
    }
    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 800469e:	f7fb fd9b 	bl	80001d8 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
  }
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	200000ab 	.word	0x200000ab

080046ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80046b0:	4802      	ldr	r0, [pc, #8]	; (80046bc <DMA1_Channel1_IRQHandler+0x10>)
 80046b2:	f7fc fa09 	bl	8000ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80046b6:	bf00      	nop
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20004274 	.word	0x20004274

080046c0 <SystemInit>:
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	4b15      	ldr	r3, [pc, #84]	; (800471c <SystemInit+0x5c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a14      	ldr	r2, [pc, #80]	; (800471c <SystemInit+0x5c>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <SystemInit+0x5c>)
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	4911      	ldr	r1, [pc, #68]	; (800471c <SystemInit+0x5c>)
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <SystemInit+0x60>)
 80046d8:	4013      	ands	r3, r2
 80046da:	604b      	str	r3, [r1, #4]
 80046dc:	4b0f      	ldr	r3, [pc, #60]	; (800471c <SystemInit+0x5c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a0e      	ldr	r2, [pc, #56]	; (800471c <SystemInit+0x5c>)
 80046e2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <SystemInit+0x5c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0a      	ldr	r2, [pc, #40]	; (800471c <SystemInit+0x5c>)
 80046f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	4b08      	ldr	r3, [pc, #32]	; (800471c <SystemInit+0x5c>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4a07      	ldr	r2, [pc, #28]	; (800471c <SystemInit+0x5c>)
 80046fe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004702:	6053      	str	r3, [r2, #4]
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <SystemInit+0x5c>)
 8004706:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <SystemInit+0x64>)
 800470e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	bf00      	nop
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	40021000 	.word	0x40021000
 8004720:	f8ff0000 	.word	0xf8ff0000
 8004724:	e000ed00 	.word	0xe000ed00

08004728 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff f93b 	bl	80039b0 <SD_disk_initialize>
 800473a:	4603      	mov	r3, r0
 800473c:	461a      	mov	r2, r3
 800473e:	4b04      	ldr	r3, [pc, #16]	; (8004750 <USER_initialize+0x28>)
 8004740:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004742:	4b03      	ldr	r3, [pc, #12]	; (8004750 <USER_initialize+0x28>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	2000000c 	.word	0x2000000c

08004754 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fa0f 	bl	8003b84 <SD_disk_status>
 8004766:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4603      	mov	r3, r0
 800477e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8004780:	7bf8      	ldrb	r0, [r7, #15]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	f7ff fa10 	bl	8003bac <SD_disk_read>
 800478c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	4603      	mov	r3, r0
 80047a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80047a6:	7bf8      	ldrb	r0, [r7, #15]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	f7ff fa67 	bl	8003c80 <SD_disk_write>
 80047b2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	603a      	str	r2, [r7, #0]
 80047c6:	71fb      	strb	r3, [r7, #7]
 80047c8:	460b      	mov	r3, r1
 80047ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80047cc:	79b9      	ldrb	r1, [r7, #6]
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fad8 	bl	8003d88 <SD_disk_ioctl>
 80047d8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <Reset_Handler>:
 80047e4:	2100      	movs	r1, #0
 80047e6:	e003      	b.n	80047f0 <LoopCopyDataInit>

080047e8 <CopyDataInit>:
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <LoopFillZerobss+0x14>)
 80047ea:	585b      	ldr	r3, [r3, r1]
 80047ec:	5043      	str	r3, [r0, r1]
 80047ee:	3104      	adds	r1, #4

080047f0 <LoopCopyDataInit>:
 80047f0:	480a      	ldr	r0, [pc, #40]	; (800481c <LoopFillZerobss+0x18>)
 80047f2:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <LoopFillZerobss+0x1c>)
 80047f4:	1842      	adds	r2, r0, r1
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d3f6      	bcc.n	80047e8 <CopyDataInit>
 80047fa:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <LoopFillZerobss+0x20>)
 80047fc:	e002      	b.n	8004804 <LoopFillZerobss>

080047fe <FillZerobss>:
 80047fe:	2300      	movs	r3, #0
 8004800:	f842 3b04 	str.w	r3, [r2], #4

08004804 <LoopFillZerobss>:
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <LoopFillZerobss+0x24>)
 8004806:	429a      	cmp	r2, r3
 8004808:	d3f9      	bcc.n	80047fe <FillZerobss>
 800480a:	f7ff ff59 	bl	80046c0 <SystemInit>
 800480e:	f000 f80f 	bl	8004830 <__libc_init_array>
 8004812:	f7ff fbeb 	bl	8003fec <main>
 8004816:	4770      	bx	lr
 8004818:	08004900 	.word	0x08004900
 800481c:	20000000 	.word	0x20000000
 8004820:	20000024 	.word	0x20000024
 8004824:	20000024 	.word	0x20000024
 8004828:	20004320 	.word	0x20004320

0800482c <ADC1_2_IRQHandler>:
 800482c:	e7fe      	b.n	800482c <ADC1_2_IRQHandler>
	...

08004830 <__libc_init_array>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	2600      	movs	r6, #0
 8004834:	4d0c      	ldr	r5, [pc, #48]	; (8004868 <__libc_init_array+0x38>)
 8004836:	4c0d      	ldr	r4, [pc, #52]	; (800486c <__libc_init_array+0x3c>)
 8004838:	1b64      	subs	r4, r4, r5
 800483a:	10a4      	asrs	r4, r4, #2
 800483c:	42a6      	cmp	r6, r4
 800483e:	d109      	bne.n	8004854 <__libc_init_array+0x24>
 8004840:	f000 f822 	bl	8004888 <_init>
 8004844:	2600      	movs	r6, #0
 8004846:	4d0a      	ldr	r5, [pc, #40]	; (8004870 <__libc_init_array+0x40>)
 8004848:	4c0a      	ldr	r4, [pc, #40]	; (8004874 <__libc_init_array+0x44>)
 800484a:	1b64      	subs	r4, r4, r5
 800484c:	10a4      	asrs	r4, r4, #2
 800484e:	42a6      	cmp	r6, r4
 8004850:	d105      	bne.n	800485e <__libc_init_array+0x2e>
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	f855 3b04 	ldr.w	r3, [r5], #4
 8004858:	4798      	blx	r3
 800485a:	3601      	adds	r6, #1
 800485c:	e7ee      	b.n	800483c <__libc_init_array+0xc>
 800485e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004862:	4798      	blx	r3
 8004864:	3601      	adds	r6, #1
 8004866:	e7f2      	b.n	800484e <__libc_init_array+0x1e>
 8004868:	080048f8 	.word	0x080048f8
 800486c:	080048f8 	.word	0x080048f8
 8004870:	080048f8 	.word	0x080048f8
 8004874:	080048fc 	.word	0x080048fc

08004878 <memset>:
 8004878:	4603      	mov	r3, r0
 800487a:	4402      	add	r2, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <_init>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	bf00      	nop
 800488c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488e:	bc08      	pop	{r3}
 8004890:	469e      	mov	lr, r3
 8004892:	4770      	bx	lr

08004894 <_fini>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	bf00      	nop
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr
