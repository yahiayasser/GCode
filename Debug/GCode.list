
GCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  0800b1c8  0800b1c8  0001b1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c710  0800c710  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800c710  0800c710  0001c710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c718  0800c718  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c718  0800c718  0001c718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c71c  0800c71c  0001c71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800c720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004990  20000030  0800c750  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200049c0  0800c750  000249c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000256c5  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a9a  00000000  00000000  0004571e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0004a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  0004b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1c3  00000000  00000000  0004c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c94b  00000000  00000000  0006678b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076e02  00000000  00000000  000830d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004c  00000000  00000000  000f9ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d0c  00000000  00000000  000f9f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b1b0 	.word	0x0800b1b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	0800b1b0 	.word	0x0800b1b0

0800014c <__aeabi_uldivmod>:
 800014c:	b953      	cbnz	r3, 8000164 <__aeabi_uldivmod+0x18>
 800014e:	b94a      	cbnz	r2, 8000164 <__aeabi_uldivmod+0x18>
 8000150:	2900      	cmp	r1, #0
 8000152:	bf08      	it	eq
 8000154:	2800      	cmpeq	r0, #0
 8000156:	bf1c      	itt	ne
 8000158:	f04f 31ff 	movne.w	r1, #4294967295
 800015c:	f04f 30ff 	movne.w	r0, #4294967295
 8000160:	f000 b96e 	b.w	8000440 <__aeabi_idiv0>
 8000164:	f1ad 0c08 	sub.w	ip, sp, #8
 8000168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800016c:	f000 f806 	bl	800017c <__udivmoddi4>
 8000170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000178:	b004      	add	sp, #16
 800017a:	4770      	bx	lr

0800017c <__udivmoddi4>:
 800017c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000180:	9e08      	ldr	r6, [sp, #32]
 8000182:	460d      	mov	r5, r1
 8000184:	4604      	mov	r4, r0
 8000186:	468e      	mov	lr, r1
 8000188:	2b00      	cmp	r3, #0
 800018a:	f040 8083 	bne.w	8000294 <__udivmoddi4+0x118>
 800018e:	428a      	cmp	r2, r1
 8000190:	4617      	mov	r7, r2
 8000192:	d947      	bls.n	8000224 <__udivmoddi4+0xa8>
 8000194:	fab2 f382 	clz	r3, r2
 8000198:	b14b      	cbz	r3, 80001ae <__udivmoddi4+0x32>
 800019a:	f1c3 0120 	rsb	r1, r3, #32
 800019e:	fa05 fe03 	lsl.w	lr, r5, r3
 80001a2:	fa20 f101 	lsr.w	r1, r0, r1
 80001a6:	409f      	lsls	r7, r3
 80001a8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001ac:	409c      	lsls	r4, r3
 80001ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001b2:	fbbe fcf8 	udiv	ip, lr, r8
 80001b6:	fa1f f987 	uxth.w	r9, r7
 80001ba:	fb08 e21c 	mls	r2, r8, ip, lr
 80001be:	fb0c f009 	mul.w	r0, ip, r9
 80001c2:	0c21      	lsrs	r1, r4, #16
 80001c4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001c8:	4290      	cmp	r0, r2
 80001ca:	d90a      	bls.n	80001e2 <__udivmoddi4+0x66>
 80001cc:	18ba      	adds	r2, r7, r2
 80001ce:	f10c 31ff 	add.w	r1, ip, #4294967295
 80001d2:	f080 8118 	bcs.w	8000406 <__udivmoddi4+0x28a>
 80001d6:	4290      	cmp	r0, r2
 80001d8:	f240 8115 	bls.w	8000406 <__udivmoddi4+0x28a>
 80001dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80001e0:	443a      	add	r2, r7
 80001e2:	1a12      	subs	r2, r2, r0
 80001e4:	fbb2 f0f8 	udiv	r0, r2, r8
 80001e8:	fb08 2210 	mls	r2, r8, r0, r2
 80001ec:	fb00 f109 	mul.w	r1, r0, r9
 80001f0:	b2a4      	uxth	r4, r4
 80001f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001f6:	42a1      	cmp	r1, r4
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x92>
 80001fa:	193c      	adds	r4, r7, r4
 80001fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000200:	f080 8103 	bcs.w	800040a <__udivmoddi4+0x28e>
 8000204:	42a1      	cmp	r1, r4
 8000206:	f240 8100 	bls.w	800040a <__udivmoddi4+0x28e>
 800020a:	3802      	subs	r0, #2
 800020c:	443c      	add	r4, r7
 800020e:	1a64      	subs	r4, r4, r1
 8000210:	2100      	movs	r1, #0
 8000212:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000216:	b11e      	cbz	r6, 8000220 <__udivmoddi4+0xa4>
 8000218:	2200      	movs	r2, #0
 800021a:	40dc      	lsrs	r4, r3
 800021c:	e9c6 4200 	strd	r4, r2, [r6]
 8000220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000224:	b902      	cbnz	r2, 8000228 <__udivmoddi4+0xac>
 8000226:	deff      	udf	#255	; 0xff
 8000228:	fab2 f382 	clz	r3, r2
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14f      	bne.n	80002d0 <__udivmoddi4+0x154>
 8000230:	1a8d      	subs	r5, r1, r2
 8000232:	2101      	movs	r1, #1
 8000234:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000238:	fa1f f882 	uxth.w	r8, r2
 800023c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000240:	fb0e 551c 	mls	r5, lr, ip, r5
 8000244:	fb08 f00c 	mul.w	r0, r8, ip
 8000248:	0c22      	lsrs	r2, r4, #16
 800024a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800024e:	42a8      	cmp	r0, r5
 8000250:	d907      	bls.n	8000262 <__udivmoddi4+0xe6>
 8000252:	197d      	adds	r5, r7, r5
 8000254:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000258:	d202      	bcs.n	8000260 <__udivmoddi4+0xe4>
 800025a:	42a8      	cmp	r0, r5
 800025c:	f200 80e9 	bhi.w	8000432 <__udivmoddi4+0x2b6>
 8000260:	4694      	mov	ip, r2
 8000262:	1a2d      	subs	r5, r5, r0
 8000264:	fbb5 f0fe 	udiv	r0, r5, lr
 8000268:	fb0e 5510 	mls	r5, lr, r0, r5
 800026c:	fb08 f800 	mul.w	r8, r8, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000276:	45a0      	cmp	r8, r4
 8000278:	d907      	bls.n	800028a <__udivmoddi4+0x10e>
 800027a:	193c      	adds	r4, r7, r4
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	d202      	bcs.n	8000288 <__udivmoddi4+0x10c>
 8000282:	45a0      	cmp	r8, r4
 8000284:	f200 80d9 	bhi.w	800043a <__udivmoddi4+0x2be>
 8000288:	4610      	mov	r0, r2
 800028a:	eba4 0408 	sub.w	r4, r4, r8
 800028e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000292:	e7c0      	b.n	8000216 <__udivmoddi4+0x9a>
 8000294:	428b      	cmp	r3, r1
 8000296:	d908      	bls.n	80002aa <__udivmoddi4+0x12e>
 8000298:	2e00      	cmp	r6, #0
 800029a:	f000 80b1 	beq.w	8000400 <__udivmoddi4+0x284>
 800029e:	2100      	movs	r1, #0
 80002a0:	e9c6 0500 	strd	r0, r5, [r6]
 80002a4:	4608      	mov	r0, r1
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	fab3 f183 	clz	r1, r3
 80002ae:	2900      	cmp	r1, #0
 80002b0:	d14b      	bne.n	800034a <__udivmoddi4+0x1ce>
 80002b2:	42ab      	cmp	r3, r5
 80002b4:	d302      	bcc.n	80002bc <__udivmoddi4+0x140>
 80002b6:	4282      	cmp	r2, r0
 80002b8:	f200 80b9 	bhi.w	800042e <__udivmoddi4+0x2b2>
 80002bc:	1a84      	subs	r4, r0, r2
 80002be:	eb65 0303 	sbc.w	r3, r5, r3
 80002c2:	2001      	movs	r0, #1
 80002c4:	469e      	mov	lr, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d0aa      	beq.n	8000220 <__udivmoddi4+0xa4>
 80002ca:	e9c6 4e00 	strd	r4, lr, [r6]
 80002ce:	e7a7      	b.n	8000220 <__udivmoddi4+0xa4>
 80002d0:	409f      	lsls	r7, r3
 80002d2:	f1c3 0220 	rsb	r2, r3, #32
 80002d6:	40d1      	lsrs	r1, r2
 80002d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e0:	fa1f f887 	uxth.w	r8, r7
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	fa24 f202 	lsr.w	r2, r4, r2
 80002ec:	409d      	lsls	r5, r3
 80002ee:	fb00 fc08 	mul.w	ip, r0, r8
 80002f2:	432a      	orrs	r2, r5
 80002f4:	0c15      	lsrs	r5, r2, #16
 80002f6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80002fa:	45ac      	cmp	ip, r5
 80002fc:	fa04 f403 	lsl.w	r4, r4, r3
 8000300:	d909      	bls.n	8000316 <__udivmoddi4+0x19a>
 8000302:	197d      	adds	r5, r7, r5
 8000304:	f100 31ff 	add.w	r1, r0, #4294967295
 8000308:	f080 808f 	bcs.w	800042a <__udivmoddi4+0x2ae>
 800030c:	45ac      	cmp	ip, r5
 800030e:	f240 808c 	bls.w	800042a <__udivmoddi4+0x2ae>
 8000312:	3802      	subs	r0, #2
 8000314:	443d      	add	r5, r7
 8000316:	eba5 050c 	sub.w	r5, r5, ip
 800031a:	fbb5 f1fe 	udiv	r1, r5, lr
 800031e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000322:	fb01 f908 	mul.w	r9, r1, r8
 8000326:	b295      	uxth	r5, r2
 8000328:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032c:	45a9      	cmp	r9, r5
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x1c4>
 8000330:	197d      	adds	r5, r7, r5
 8000332:	f101 32ff 	add.w	r2, r1, #4294967295
 8000336:	d274      	bcs.n	8000422 <__udivmoddi4+0x2a6>
 8000338:	45a9      	cmp	r9, r5
 800033a:	d972      	bls.n	8000422 <__udivmoddi4+0x2a6>
 800033c:	3902      	subs	r1, #2
 800033e:	443d      	add	r5, r7
 8000340:	eba5 0509 	sub.w	r5, r5, r9
 8000344:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000348:	e778      	b.n	800023c <__udivmoddi4+0xc0>
 800034a:	f1c1 0720 	rsb	r7, r1, #32
 800034e:	408b      	lsls	r3, r1
 8000350:	fa22 fc07 	lsr.w	ip, r2, r7
 8000354:	ea4c 0c03 	orr.w	ip, ip, r3
 8000358:	fa25 f407 	lsr.w	r4, r5, r7
 800035c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000360:	fbb4 f9fe 	udiv	r9, r4, lr
 8000364:	fa1f f88c 	uxth.w	r8, ip
 8000368:	fb0e 4419 	mls	r4, lr, r9, r4
 800036c:	fa20 f307 	lsr.w	r3, r0, r7
 8000370:	fb09 fa08 	mul.w	sl, r9, r8
 8000374:	408d      	lsls	r5, r1
 8000376:	431d      	orrs	r5, r3
 8000378:	0c2b      	lsrs	r3, r5, #16
 800037a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037e:	45a2      	cmp	sl, r4
 8000380:	fa02 f201 	lsl.w	r2, r2, r1
 8000384:	fa00 f301 	lsl.w	r3, r0, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x222>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000392:	d248      	bcs.n	8000426 <__udivmoddi4+0x2aa>
 8000394:	45a2      	cmp	sl, r4
 8000396:	d946      	bls.n	8000426 <__udivmoddi4+0x2aa>
 8000398:	f1a9 0902 	sub.w	r9, r9, #2
 800039c:	4464      	add	r4, ip
 800039e:	eba4 040a 	sub.w	r4, r4, sl
 80003a2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003a6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003aa:	fb00 fa08 	mul.w	sl, r0, r8
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b4:	45a2      	cmp	sl, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x24e>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80003c0:	d22d      	bcs.n	800041e <__udivmoddi4+0x2a2>
 80003c2:	45a2      	cmp	sl, r4
 80003c4:	d92b      	bls.n	800041e <__udivmoddi4+0x2a2>
 80003c6:	3802      	subs	r0, #2
 80003c8:	4464      	add	r4, ip
 80003ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ce:	fba0 8902 	umull	r8, r9, r0, r2
 80003d2:	eba4 040a 	sub.w	r4, r4, sl
 80003d6:	454c      	cmp	r4, r9
 80003d8:	46c6      	mov	lr, r8
 80003da:	464d      	mov	r5, r9
 80003dc:	d319      	bcc.n	8000412 <__udivmoddi4+0x296>
 80003de:	d016      	beq.n	800040e <__udivmoddi4+0x292>
 80003e0:	b15e      	cbz	r6, 80003fa <__udivmoddi4+0x27e>
 80003e2:	ebb3 020e 	subs.w	r2, r3, lr
 80003e6:	eb64 0405 	sbc.w	r4, r4, r5
 80003ea:	fa04 f707 	lsl.w	r7, r4, r7
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431f      	orrs	r7, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c6 7400 	strd	r7, r4, [r6]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000400:	4631      	mov	r1, r6
 8000402:	4630      	mov	r0, r6
 8000404:	e70c      	b.n	8000220 <__udivmoddi4+0xa4>
 8000406:	468c      	mov	ip, r1
 8000408:	e6eb      	b.n	80001e2 <__udivmoddi4+0x66>
 800040a:	4610      	mov	r0, r2
 800040c:	e6ff      	b.n	800020e <__udivmoddi4+0x92>
 800040e:	4543      	cmp	r3, r8
 8000410:	d2e6      	bcs.n	80003e0 <__udivmoddi4+0x264>
 8000412:	ebb8 0e02 	subs.w	lr, r8, r2
 8000416:	eb69 050c 	sbc.w	r5, r9, ip
 800041a:	3801      	subs	r0, #1
 800041c:	e7e0      	b.n	80003e0 <__udivmoddi4+0x264>
 800041e:	4628      	mov	r0, r5
 8000420:	e7d3      	b.n	80003ca <__udivmoddi4+0x24e>
 8000422:	4611      	mov	r1, r2
 8000424:	e78c      	b.n	8000340 <__udivmoddi4+0x1c4>
 8000426:	4681      	mov	r9, r0
 8000428:	e7b9      	b.n	800039e <__udivmoddi4+0x222>
 800042a:	4608      	mov	r0, r1
 800042c:	e773      	b.n	8000316 <__udivmoddi4+0x19a>
 800042e:	4608      	mov	r0, r1
 8000430:	e749      	b.n	80002c6 <__udivmoddi4+0x14a>
 8000432:	f1ac 0c02 	sub.w	ip, ip, #2
 8000436:	443d      	add	r5, r7
 8000438:	e713      	b.n	8000262 <__udivmoddi4+0xe6>
 800043a:	3802      	subs	r0, #2
 800043c:	443c      	add	r4, r7
 800043e:	e724      	b.n	800028a <__udivmoddi4+0x10e>

08000440 <__aeabi_idiv0>:
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop

08000444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <HAL_Init+0x28>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <HAL_Init+0x28>)
 800044e:	f043 0310 	orr.w	r3, r3, #16
 8000452:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000454:	2003      	movs	r0, #3
 8000456:	f000 fdef 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800045a:	2000      	movs	r0, #0
 800045c:	f000 f808 	bl	8000470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000460:	f00a fba2 	bl	800aba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40022000 	.word	0x40022000

08000470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <HAL_InitTick+0x54>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_InitTick+0x58>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000486:	fbb3 f3f1 	udiv	r3, r3, r1
 800048a:	fbb2 f3f3 	udiv	r3, r2, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fe07 	bl	80010a2 <HAL_SYSTICK_Config>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800049a:	2301      	movs	r3, #1
 800049c:	e00e      	b.n	80004bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b0f      	cmp	r3, #15
 80004a2:	d80a      	bhi.n	80004ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004a4:	2200      	movs	r2, #0
 80004a6:	6879      	ldr	r1, [r7, #4]
 80004a8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ac:	f000 fdcf 	bl	800104e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004b0:	4a06      	ldr	r2, [pc, #24]	; (80004cc <HAL_InitTick+0x5c>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004b6:	2300      	movs	r3, #0
 80004b8:	e000      	b.n	80004bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004ba:	2301      	movs	r3, #1
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000014 	.word	0x20000014
 80004c8:	20000004 	.word	0x20000004
 80004cc:	20000000 	.word	0x20000000

080004d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <HAL_IncTick+0x1c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <HAL_IncTick+0x20>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4413      	add	r3, r2
 80004e0:	4a03      	ldr	r2, [pc, #12]	; (80004f0 <HAL_IncTick+0x20>)
 80004e2:	6013      	str	r3, [r2, #0]
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	20000004 	.word	0x20000004
 80004f0:	200006c8 	.word	0x200006c8

080004f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return uwTick;
 80004f8:	4b02      	ldr	r3, [pc, #8]	; (8000504 <HAL_GetTick+0x10>)
 80004fa:	681b      	ldr	r3, [r3, #0]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	200006c8 	.word	0x200006c8

08000508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000510:	f7ff fff0 	bl	80004f4 <HAL_GetTick>
 8000514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000520:	d005      	beq.n	800052e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_Delay+0x44>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	461a      	mov	r2, r3
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800052e:	bf00      	nop
 8000530:	f7ff ffe0 	bl	80004f4 <HAL_GetTick>
 8000534:	4602      	mov	r2, r0
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	429a      	cmp	r2, r3
 800053e:	d8f7      	bhi.n	8000530 <HAL_Delay+0x28>
  {
  }
}
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000004 	.word	0x20000004

08000550 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000558:	2300      	movs	r3, #0
 800055a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d101      	bne.n	8000572 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
 8000570:	e0be      	b.n	80006f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800057c:	2b00      	cmp	r3, #0
 800057e:	d109      	bne.n	8000594 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f00a fb3c 	bl	800ac0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 fbb1 	bl	8000cfc <ADC_ConversionStop_Disable>
 800059a:	4603      	mov	r3, r0
 800059c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a2:	f003 0310 	and.w	r3, r3, #16
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	f040 8099 	bne.w	80006de <HAL_ADC_Init+0x18e>
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	f040 8095 	bne.w	80006de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005bc:	f023 0302 	bic.w	r3, r3, #2
 80005c0:	f043 0202 	orr.w	r2, r3, #2
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80005d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	4313      	orrs	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005e8:	d003      	beq.n	80005f2 <HAL_ADC_Init+0xa2>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d102      	bne.n	80005f8 <HAL_ADC_Init+0xa8>
 80005f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f6:	e000      	b.n	80005fa <HAL_ADC_Init+0xaa>
 80005f8:	2300      	movs	r3, #0
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d119      	bne.n	800063c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d109      	bne.n	8000624 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	3b01      	subs	r3, #1
 8000616:	035a      	lsls	r2, r3, #13
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	4313      	orrs	r3, r2
 800061c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	e00b      	b.n	800063c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000628:	f043 0220 	orr.w	r2, r3, #32
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000634:	f043 0201 	orr.w	r2, r3, #1
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	430a      	orrs	r2, r1
 800064e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <HAL_ADC_Init+0x1a8>)
 8000658:	4013      	ands	r3, r2
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	6812      	ldr	r2, [r2, #0]
 800065e:	68b9      	ldr	r1, [r7, #8]
 8000660:	430b      	orrs	r3, r1
 8000662:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800066c:	d003      	beq.n	8000676 <HAL_ADC_Init+0x126>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d104      	bne.n	8000680 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	691b      	ldr	r3, [r3, #16]
 800067a:	3b01      	subs	r3, #1
 800067c:	051b      	lsls	r3, r3, #20
 800067e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000686:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	430a      	orrs	r2, r1
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_ADC_Init+0x1ac>)
 800069c:	4013      	ands	r3, r2
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d10b      	bne.n	80006bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ae:	f023 0303 	bic.w	r3, r3, #3
 80006b2:	f043 0201 	orr.w	r2, r3, #1
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80006ba:	e018      	b.n	80006ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c0:	f023 0312 	bic.w	r3, r3, #18
 80006c4:	f043 0210 	orr.w	r2, r3, #16
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d0:	f043 0201 	orr.w	r2, r3, #1
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80006d8:	2301      	movs	r3, #1
 80006da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80006dc:	e007      	b.n	80006ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e2:	f043 0210 	orr.w	r2, r3, #16
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	ffe1f7fd 	.word	0xffe1f7fd
 80006fc:	ff1f0efe 	.word	0xff1f0efe

08000700 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000712:	2b01      	cmp	r3, #1
 8000714:	d101      	bne.n	800071a <HAL_ADC_Start+0x1a>
 8000716:	2302      	movs	r3, #2
 8000718:	e098      	b.n	800084c <HAL_ADC_Start+0x14c>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f000 fa98 	bl	8000c58 <ADC_Enable>
 8000728:	4603      	mov	r3, r0
 800072a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	2b00      	cmp	r3, #0
 8000730:	f040 8087 	bne.w	8000842 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800073c:	f023 0301 	bic.w	r3, r3, #1
 8000740:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a41      	ldr	r2, [pc, #260]	; (8000854 <HAL_ADC_Start+0x154>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d105      	bne.n	800075e <HAL_ADC_Start+0x5e>
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <HAL_ADC_Start+0x158>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800075a:	2b00      	cmp	r3, #0
 800075c:	d115      	bne.n	800078a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000762:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000774:	2b00      	cmp	r3, #0
 8000776:	d026      	beq.n	80007c6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800077c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000780:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000788:	e01d      	b.n	80007c6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800078e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <HAL_ADC_Start+0x158>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d004      	beq.n	80007aa <HAL_ADC_Start+0xaa>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a2b      	ldr	r2, [pc, #172]	; (8000854 <HAL_ADC_Start+0x154>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d10d      	bne.n	80007c6 <HAL_ADC_Start+0xc6>
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <HAL_ADC_Start+0x158>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d007      	beq.n	80007c6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d006      	beq.n	80007e0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d6:	f023 0206 	bic.w	r2, r3, #6
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007de:	e002      	b.n	80007e6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f06f 0202 	mvn.w	r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000802:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000806:	d113      	bne.n	8000830 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800080c:	4a11      	ldr	r2, [pc, #68]	; (8000854 <HAL_ADC_Start+0x154>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d105      	bne.n	800081e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_ADC_Start+0x158>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800081a:	2b00      	cmp	r3, #0
 800081c:	d108      	bne.n	8000830 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	e00c      	b.n	800084a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	e003      	b.n	800084a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2200      	movs	r2, #0
 8000846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40012800 	.word	0x40012800
 8000858:	40012400 	.word	0x40012400

0800085c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000872:	f7ff fe3f 	bl	80004f4 <HAL_GetTick>
 8000876:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00b      	beq.n	800089e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088a:	f043 0220 	orr.w	r2, r3, #32
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e0c8      	b.n	8000a30 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d12a      	bne.n	8000902 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d123      	bne.n	8000902 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80008ba:	e01a      	b.n	80008f2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c2:	d016      	beq.n	80008f2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d007      	beq.n	80008da <HAL_ADC_PollForConversion+0x7e>
 80008ca:	f7ff fe13 	bl	80004f4 <HAL_GetTick>
 80008ce:	4602      	mov	r2, r0
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	683a      	ldr	r2, [r7, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d20b      	bcs.n	80008f2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008de:	f043 0204 	orr.w	r2, r3, #4
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80008ee:	2303      	movs	r3, #3
 80008f0:	e09e      	b.n	8000a30 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0dd      	beq.n	80008bc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000900:	e06c      	b.n	80009dc <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000902:	4b4d      	ldr	r3, [pc, #308]	; (8000a38 <HAL_ADC_PollForConversion+0x1dc>)
 8000904:	681c      	ldr	r4, [r3, #0]
 8000906:	2002      	movs	r0, #2
 8000908:	f002 f96e 	bl	8002be8 <HAL_RCCEx_GetPeriphCLKFreq>
 800090c:	4603      	mov	r3, r0
 800090e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6919      	ldr	r1, [r3, #16]
 8000918:	4b48      	ldr	r3, [pc, #288]	; (8000a3c <HAL_ADC_PollForConversion+0x1e0>)
 800091a:	400b      	ands	r3, r1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d118      	bne.n	8000952 <HAL_ADC_PollForConversion+0xf6>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68d9      	ldr	r1, [r3, #12]
 8000926:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <HAL_ADC_PollForConversion+0x1e4>)
 8000928:	400b      	ands	r3, r1
 800092a:	2b00      	cmp	r3, #0
 800092c:	d111      	bne.n	8000952 <HAL_ADC_PollForConversion+0xf6>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6919      	ldr	r1, [r3, #16]
 8000934:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <HAL_ADC_PollForConversion+0x1e8>)
 8000936:	400b      	ands	r3, r1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d108      	bne.n	800094e <HAL_ADC_PollForConversion+0xf2>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68d9      	ldr	r1, [r3, #12]
 8000942:	4b41      	ldr	r3, [pc, #260]	; (8000a48 <HAL_ADC_PollForConversion+0x1ec>)
 8000944:	400b      	ands	r3, r1
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <HAL_ADC_PollForConversion+0xf2>
 800094a:	2314      	movs	r3, #20
 800094c:	e020      	b.n	8000990 <HAL_ADC_PollForConversion+0x134>
 800094e:	2329      	movs	r3, #41	; 0x29
 8000950:	e01e      	b.n	8000990 <HAL_ADC_PollForConversion+0x134>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6919      	ldr	r1, [r3, #16]
 8000958:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <HAL_ADC_PollForConversion+0x1e8>)
 800095a:	400b      	ands	r3, r1
 800095c:	2b00      	cmp	r3, #0
 800095e:	d106      	bne.n	800096e <HAL_ADC_PollForConversion+0x112>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	68d9      	ldr	r1, [r3, #12]
 8000966:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <HAL_ADC_PollForConversion+0x1ec>)
 8000968:	400b      	ands	r3, r1
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00d      	beq.n	800098a <HAL_ADC_PollForConversion+0x12e>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6919      	ldr	r1, [r3, #16]
 8000974:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <HAL_ADC_PollForConversion+0x1f0>)
 8000976:	400b      	ands	r3, r1
 8000978:	2b00      	cmp	r3, #0
 800097a:	d108      	bne.n	800098e <HAL_ADC_PollForConversion+0x132>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	68d9      	ldr	r1, [r3, #12]
 8000982:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <HAL_ADC_PollForConversion+0x1f0>)
 8000984:	400b      	ands	r3, r1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <HAL_ADC_PollForConversion+0x132>
 800098a:	2354      	movs	r3, #84	; 0x54
 800098c:	e000      	b.n	8000990 <HAL_ADC_PollForConversion+0x134>
 800098e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000990:	fb02 f303 	mul.w	r3, r2, r3
 8000994:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000996:	e01d      	b.n	80009d4 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800099e:	d016      	beq.n	80009ce <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d007      	beq.n	80009b6 <HAL_ADC_PollForConversion+0x15a>
 80009a6:	f7ff fda5 	bl	80004f4 <HAL_GetTick>
 80009aa:	4602      	mov	r2, r0
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d20b      	bcs.n	80009ce <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ba:	f043 0204 	orr.w	r2, r3, #4
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80009ca:	2303      	movs	r3, #3
 80009cc:	e030      	b.n	8000a30 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3301      	adds	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d8dd      	bhi.n	8000998 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f06f 0212 	mvn.w	r2, #18
 80009e4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80009fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a00:	d115      	bne.n	8000a2e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	68db      	ldr	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d111      	bne.n	8000a2e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d105      	bne.n	8000a2e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a26:	f043 0201 	orr.w	r2, r3, #1
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	20000014 	.word	0x20000014
 8000a3c:	24924924 	.word	0x24924924
 8000a40:	00924924 	.word	0x00924924
 8000a44:	12492492 	.word	0x12492492
 8000a48:	00492492 	.word	0x00492492
 8000a4c:	00249249 	.word	0x00249249

08000a50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d101      	bne.n	8000a88 <HAL_ADC_ConfigChannel+0x20>
 8000a84:	2302      	movs	r3, #2
 8000a86:	e0dc      	b.n	8000c42 <HAL_ADC_ConfigChannel+0x1da>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	2b06      	cmp	r3, #6
 8000a96:	d81c      	bhi.n	8000ad2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	3b05      	subs	r3, #5
 8000aaa:	221f      	movs	r2, #31
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	4019      	ands	r1, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	3b05      	subs	r3, #5
 8000ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	430a      	orrs	r2, r1
 8000ace:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad0:	e03c      	b.n	8000b4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b0c      	cmp	r3, #12
 8000ad8:	d81c      	bhi.n	8000b14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	3b23      	subs	r3, #35	; 0x23
 8000aec:	221f      	movs	r2, #31
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	4019      	ands	r1, r3
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	3b23      	subs	r3, #35	; 0x23
 8000b06:	fa00 f203 	lsl.w	r2, r0, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	631a      	str	r2, [r3, #48]	; 0x30
 8000b12:	e01b      	b.n	8000b4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	3b41      	subs	r3, #65	; 0x41
 8000b26:	221f      	movs	r2, #31
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4019      	ands	r1, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	3b41      	subs	r3, #65	; 0x41
 8000b40:	fa00 f203 	lsl.w	r2, r0, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	d91c      	bls.n	8000b8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68d9      	ldr	r1, [r3, #12]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	3b1e      	subs	r3, #30
 8000b66:	2207      	movs	r2, #7
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	4019      	ands	r1, r3
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	6898      	ldr	r0, [r3, #8]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	3b1e      	subs	r3, #30
 8000b80:	fa00 f203 	lsl.w	r2, r0, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	e019      	b.n	8000bc2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6919      	ldr	r1, [r3, #16]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4019      	ands	r1, r3
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	6898      	ldr	r0, [r3, #8]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b10      	cmp	r3, #16
 8000bc8:	d003      	beq.n	8000bd2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bce:	2b11      	cmp	r3, #17
 8000bd0:	d132      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <HAL_ADC_ConfigChannel+0x1e4>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d125      	bne.n	8000c28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d126      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000bf8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b10      	cmp	r3, #16
 8000c00:	d11a      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_ADC_ConfigChannel+0x1e8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <HAL_ADC_ConfigChannel+0x1ec>)
 8000c08:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0c:	0c9a      	lsrs	r2, r3, #18
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c18:	e002      	b.n	8000c20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f9      	bne.n	8000c1a <HAL_ADC_ConfigChannel+0x1b2>
 8000c26:	e007      	b.n	8000c38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	f043 0220 	orr.w	r2, r3, #32
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40012400 	.word	0x40012400
 8000c50:	20000014 	.word	0x20000014
 8000c54:	431bde83 	.word	0x431bde83

08000c58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d039      	beq.n	8000cea <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 0201 	orr.w	r2, r2, #1
 8000c84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <ADC_Enable+0x9c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <ADC_Enable+0xa0>)
 8000c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c90:	0c9b      	lsrs	r3, r3, #18
 8000c92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c94:	e002      	b.n	8000c9c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f9      	bne.n	8000c96 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ca2:	f7ff fc27 	bl	80004f4 <HAL_GetTick>
 8000ca6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ca8:	e018      	b.n	8000cdc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000caa:	f7ff fc23 	bl	80004f4 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d911      	bls.n	8000cdc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbc:	f043 0210 	orr.w	r2, r3, #16
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc8:	f043 0201 	orr.w	r2, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e007      	b.n	8000cec <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d1df      	bne.n	8000caa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000014 	.word	0x20000014
 8000cf8:	431bde83 	.word	0x431bde83

08000cfc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d127      	bne.n	8000d66 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0201 	bic.w	r2, r2, #1
 8000d24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d26:	f7ff fbe5 	bl	80004f4 <HAL_GetTick>
 8000d2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d2c:	e014      	b.n	8000d58 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d2e:	f7ff fbe1 	bl	80004f4 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d90d      	bls.n	8000d58 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	f043 0210 	orr.w	r2, r3, #16
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4c:	f043 0201 	orr.w	r2, r3, #1
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e007      	b.n	8000d68 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d0e3      	beq.n	8000d2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_ADCEx_Calibration_Start+0x1e>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e086      	b.n	8000e9c <HAL_ADCEx_Calibration_Start+0x12c>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffb0 	bl	8000cfc <ADC_ConversionStop_Disable>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000da0:	7dfb      	ldrb	r3, [r7, #23]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d175      	bne.n	8000e92 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000daa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dae:	f023 0302 	bic.w	r3, r3, #2
 8000db2:	f043 0202 	orr.w	r2, r3, #2
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000dba:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <HAL_ADCEx_Calibration_Start+0x134>)
 8000dbc:	681c      	ldr	r4, [r3, #0]
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f001 ff12 	bl	8002be8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000dca:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000dcc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000dce:	e002      	b.n	8000dd6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f9      	bne.n	8000dd0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff3b 	bl	8000c58 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 0208 	orr.w	r2, r2, #8
 8000df0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000df2:	f7ff fb7f 	bl	80004f4 <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000df8:	e014      	b.n	8000e24 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000dfa:	f7ff fb7b 	bl	80004f4 <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b0a      	cmp	r3, #10
 8000e06:	d90d      	bls.n	8000e24 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0c:	f023 0312 	bic.w	r3, r3, #18
 8000e10:	f043 0210 	orr.w	r2, r3, #16
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e03b      	b.n	8000e9c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1e3      	bne.n	8000dfa <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f042 0204 	orr.w	r2, r2, #4
 8000e40:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000e42:	f7ff fb57 	bl	80004f4 <HAL_GetTick>
 8000e46:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000e48:	e014      	b.n	8000e74 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000e4a:	f7ff fb53 	bl	80004f4 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b0a      	cmp	r3, #10
 8000e56:	d90d      	bls.n	8000e74 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f023 0312 	bic.w	r3, r3, #18
 8000e60:	f043 0210 	orr.w	r2, r3, #16
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e013      	b.n	8000e9c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1e3      	bne.n	8000e4a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e86:	f023 0303 	bic.w	r3, r3, #3
 8000e8a:	f043 0201 	orr.w	r2, r3, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	20000014 	.word	0x20000014

08000ea8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4906      	ldr	r1, [pc, #24]	; (8000f38 <NVIC_EnableIRQ+0x2c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	da0b      	bge.n	8000f68 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <NVIC_SetPriority+0x4c>)
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	3b04      	subs	r3, #4
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f66:	e009      	b.n	8000f7c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <NVIC_SetPriority+0x50>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001004:	d301      	bcc.n	800100a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <SysTick_Config+0x40>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001012:	210f      	movs	r1, #15
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f7ff ff90 	bl	8000f3c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <SysTick_Config+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SysTick_Config+0x40>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff31 	bl	8000ea8 <NVIC_SetPriorityGrouping>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001060:	f7ff ff46 	bl	8000ef0 <NVIC_GetPriorityGrouping>
 8001064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff ff90 	bl	8000f90 <NVIC_EncodePriority>
 8001070:	4602      	mov	r2, r0
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5f 	bl	8000f3c <NVIC_SetPriority>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff39 	bl	8000f0c <NVIC_EnableIRQ>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa2 	bl	8000ff4 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e043      	b.n	800115a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_DMA_Init+0xa8>)
 80010da:	4413      	add	r3, r2
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <HAL_DMA_Init+0xac>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	009a      	lsls	r2, r3, #2
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a1f      	ldr	r2, [pc, #124]	; (800116c <HAL_DMA_Init+0xb0>)
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2202      	movs	r2, #2
 80010f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001106:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800110a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800112c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	bffdfff8 	.word	0xbffdfff8
 8001168:	cccccccd 	.word	0xcccccccd
 800116c:	40020000 	.word	0x40020000

08001170 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001182:	2b02      	cmp	r3, #2
 8001184:	d005      	beq.n	8001192 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2204      	movs	r2, #4
 800118a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e051      	b.n	8001236 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 020e 	bic.w	r2, r2, #14
 80011a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0201 	bic.w	r2, r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a22      	ldr	r2, [pc, #136]	; (8001240 <HAL_DMA_Abort_IT+0xd0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d029      	beq.n	8001210 <HAL_DMA_Abort_IT+0xa0>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <HAL_DMA_Abort_IT+0xd4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d022      	beq.n	800120c <HAL_DMA_Abort_IT+0x9c>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <HAL_DMA_Abort_IT+0xd8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d01a      	beq.n	8001206 <HAL_DMA_Abort_IT+0x96>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a1d      	ldr	r2, [pc, #116]	; (800124c <HAL_DMA_Abort_IT+0xdc>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d012      	beq.n	8001200 <HAL_DMA_Abort_IT+0x90>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <HAL_DMA_Abort_IT+0xe0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d00a      	beq.n	80011fa <HAL_DMA_Abort_IT+0x8a>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a1a      	ldr	r2, [pc, #104]	; (8001254 <HAL_DMA_Abort_IT+0xe4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d102      	bne.n	80011f4 <HAL_DMA_Abort_IT+0x84>
 80011ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011f2:	e00e      	b.n	8001212 <HAL_DMA_Abort_IT+0xa2>
 80011f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011f8:	e00b      	b.n	8001212 <HAL_DMA_Abort_IT+0xa2>
 80011fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fe:	e008      	b.n	8001212 <HAL_DMA_Abort_IT+0xa2>
 8001200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001204:	e005      	b.n	8001212 <HAL_DMA_Abort_IT+0xa2>
 8001206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800120a:	e002      	b.n	8001212 <HAL_DMA_Abort_IT+0xa2>
 800120c:	2310      	movs	r3, #16
 800120e:	e000      	b.n	8001212 <HAL_DMA_Abort_IT+0xa2>
 8001210:	2301      	movs	r3, #1
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_DMA_Abort_IT+0xe8>)
 8001214:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	4798      	blx	r3
    } 
  }
  return status;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40020008 	.word	0x40020008
 8001244:	4002001c 	.word	0x4002001c
 8001248:	40020030 	.word	0x40020030
 800124c:	40020044 	.word	0x40020044
 8001250:	40020058 	.word	0x40020058
 8001254:	4002006c 	.word	0x4002006c
 8001258:	40020000 	.word	0x40020000

0800125c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	2204      	movs	r2, #4
 800127a:	409a      	lsls	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d04f      	beq.n	8001324 <HAL_DMA_IRQHandler+0xc8>
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d04a      	beq.n	8001324 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	2b00      	cmp	r3, #0
 800129a:	d107      	bne.n	80012ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0204 	bic.w	r2, r2, #4
 80012aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a66      	ldr	r2, [pc, #408]	; (800144c <HAL_DMA_IRQHandler+0x1f0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d029      	beq.n	800130a <HAL_DMA_IRQHandler+0xae>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a65      	ldr	r2, [pc, #404]	; (8001450 <HAL_DMA_IRQHandler+0x1f4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d022      	beq.n	8001306 <HAL_DMA_IRQHandler+0xaa>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a63      	ldr	r2, [pc, #396]	; (8001454 <HAL_DMA_IRQHandler+0x1f8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d01a      	beq.n	8001300 <HAL_DMA_IRQHandler+0xa4>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a62      	ldr	r2, [pc, #392]	; (8001458 <HAL_DMA_IRQHandler+0x1fc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d012      	beq.n	80012fa <HAL_DMA_IRQHandler+0x9e>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a60      	ldr	r2, [pc, #384]	; (800145c <HAL_DMA_IRQHandler+0x200>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00a      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x98>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a5f      	ldr	r2, [pc, #380]	; (8001460 <HAL_DMA_IRQHandler+0x204>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d102      	bne.n	80012ee <HAL_DMA_IRQHandler+0x92>
 80012e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ec:	e00e      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 80012ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012f2:	e00b      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 80012f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012f8:	e008      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 80012fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012fe:	e005      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 8001300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001304:	e002      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 8001306:	2340      	movs	r3, #64	; 0x40
 8001308:	e000      	b.n	800130c <HAL_DMA_IRQHandler+0xb0>
 800130a:	2304      	movs	r3, #4
 800130c:	4a55      	ldr	r2, [pc, #340]	; (8001464 <HAL_DMA_IRQHandler+0x208>)
 800130e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 8094 	beq.w	8001442 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001322:	e08e      	b.n	8001442 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	2202      	movs	r2, #2
 800132a:	409a      	lsls	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d056      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x186>
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d051      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10b      	bne.n	8001364 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 020a 	bic.w	r2, r2, #10
 800135a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <HAL_DMA_IRQHandler+0x1f0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d029      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x166>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a37      	ldr	r2, [pc, #220]	; (8001450 <HAL_DMA_IRQHandler+0x1f4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d022      	beq.n	80013be <HAL_DMA_IRQHandler+0x162>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a35      	ldr	r2, [pc, #212]	; (8001454 <HAL_DMA_IRQHandler+0x1f8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01a      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x15c>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a34      	ldr	r2, [pc, #208]	; (8001458 <HAL_DMA_IRQHandler+0x1fc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d012      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x156>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a32      	ldr	r2, [pc, #200]	; (800145c <HAL_DMA_IRQHandler+0x200>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00a      	beq.n	80013ac <HAL_DMA_IRQHandler+0x150>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a31      	ldr	r2, [pc, #196]	; (8001460 <HAL_DMA_IRQHandler+0x204>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d102      	bne.n	80013a6 <HAL_DMA_IRQHandler+0x14a>
 80013a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013a4:	e00e      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013aa:	e00b      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b0:	e008      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	e005      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013bc:	e002      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013be:	2320      	movs	r3, #32
 80013c0:	e000      	b.n	80013c4 <HAL_DMA_IRQHandler+0x168>
 80013c2:	2302      	movs	r3, #2
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_DMA_IRQHandler+0x208>)
 80013c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d034      	beq.n	8001442 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013e0:	e02f      	b.n	8001442 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	2208      	movs	r2, #8
 80013e8:	409a      	lsls	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d028      	beq.n	8001444 <HAL_DMA_IRQHandler+0x1e8>
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d023      	beq.n	8001444 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 020e 	bic.w	r2, r2, #14
 800140a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001414:	2101      	movs	r1, #1
 8001416:	fa01 f202 	lsl.w	r2, r1, r2
 800141a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	4798      	blx	r3
    }
  }
  return;
 8001442:	bf00      	nop
 8001444:	bf00      	nop
}
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40020008 	.word	0x40020008
 8001450:	4002001c 	.word	0x4002001c
 8001454:	40020030 	.word	0x40020030
 8001458:	40020044 	.word	0x40020044
 800145c:	40020058 	.word	0x40020058
 8001460:	4002006c 	.word	0x4002006c
 8001464:	40020000 	.word	0x40020000

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b08b      	sub	sp, #44	; 0x2c
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
 800148a:	e169      	b.n	8001760 <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800148c:	2201      	movs	r2, #1
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	f040 8158 	bne.w	800175a <HAL_GPIO_Init+0x2f2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4a9a      	ldr	r2, [pc, #616]	; (8001718 <HAL_GPIO_Init+0x2b0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d05e      	beq.n	8001572 <HAL_GPIO_Init+0x10a>
 80014b4:	4a98      	ldr	r2, [pc, #608]	; (8001718 <HAL_GPIO_Init+0x2b0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d875      	bhi.n	80015a6 <HAL_GPIO_Init+0x13e>
 80014ba:	4a98      	ldr	r2, [pc, #608]	; (800171c <HAL_GPIO_Init+0x2b4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d058      	beq.n	8001572 <HAL_GPIO_Init+0x10a>
 80014c0:	4a96      	ldr	r2, [pc, #600]	; (800171c <HAL_GPIO_Init+0x2b4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d86f      	bhi.n	80015a6 <HAL_GPIO_Init+0x13e>
 80014c6:	4a96      	ldr	r2, [pc, #600]	; (8001720 <HAL_GPIO_Init+0x2b8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d052      	beq.n	8001572 <HAL_GPIO_Init+0x10a>
 80014cc:	4a94      	ldr	r2, [pc, #592]	; (8001720 <HAL_GPIO_Init+0x2b8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d869      	bhi.n	80015a6 <HAL_GPIO_Init+0x13e>
 80014d2:	4a94      	ldr	r2, [pc, #592]	; (8001724 <HAL_GPIO_Init+0x2bc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d04c      	beq.n	8001572 <HAL_GPIO_Init+0x10a>
 80014d8:	4a92      	ldr	r2, [pc, #584]	; (8001724 <HAL_GPIO_Init+0x2bc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d863      	bhi.n	80015a6 <HAL_GPIO_Init+0x13e>
 80014de:	4a92      	ldr	r2, [pc, #584]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d046      	beq.n	8001572 <HAL_GPIO_Init+0x10a>
 80014e4:	4a90      	ldr	r2, [pc, #576]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d85d      	bhi.n	80015a6 <HAL_GPIO_Init+0x13e>
 80014ea:	2b12      	cmp	r3, #18
 80014ec:	d82a      	bhi.n	8001544 <HAL_GPIO_Init+0xdc>
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d859      	bhi.n	80015a6 <HAL_GPIO_Init+0x13e>
 80014f2:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <HAL_GPIO_Init+0x90>)
 80014f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f8:	08001573 	.word	0x08001573
 80014fc:	0800154d 	.word	0x0800154d
 8001500:	0800155f 	.word	0x0800155f
 8001504:	080015a1 	.word	0x080015a1
 8001508:	080015a7 	.word	0x080015a7
 800150c:	080015a7 	.word	0x080015a7
 8001510:	080015a7 	.word	0x080015a7
 8001514:	080015a7 	.word	0x080015a7
 8001518:	080015a7 	.word	0x080015a7
 800151c:	080015a7 	.word	0x080015a7
 8001520:	080015a7 	.word	0x080015a7
 8001524:	080015a7 	.word	0x080015a7
 8001528:	080015a7 	.word	0x080015a7
 800152c:	080015a7 	.word	0x080015a7
 8001530:	080015a7 	.word	0x080015a7
 8001534:	080015a7 	.word	0x080015a7
 8001538:	080015a7 	.word	0x080015a7
 800153c:	08001555 	.word	0x08001555
 8001540:	08001569 	.word	0x08001569
 8001544:	4a79      	ldr	r2, [pc, #484]	; (800172c <HAL_GPIO_Init+0x2c4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800154a:	e02c      	b.n	80015a6 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	623b      	str	r3, [r7, #32]
          break;
 8001552:	e029      	b.n	80015a8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	3304      	adds	r3, #4
 800155a:	623b      	str	r3, [r7, #32]
          break;
 800155c:	e024      	b.n	80015a8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	3308      	adds	r3, #8
 8001564:	623b      	str	r3, [r7, #32]
          break;
 8001566:	e01f      	b.n	80015a8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	330c      	adds	r3, #12
 800156e:	623b      	str	r3, [r7, #32]
          break;
 8001570:	e01a      	b.n	80015a8 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800157a:	2304      	movs	r3, #4
 800157c:	623b      	str	r3, [r7, #32]
          break;
 800157e:	e013      	b.n	80015a8 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001588:	2308      	movs	r3, #8
 800158a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	611a      	str	r2, [r3, #16]
          break;
 8001592:	e009      	b.n	80015a8 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001594:	2308      	movs	r3, #8
 8001596:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	615a      	str	r2, [r3, #20]
          break;
 800159e:	e003      	b.n	80015a8 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x140>
          break;
 80015a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2bff      	cmp	r3, #255	; 0xff
 80015ac:	d801      	bhi.n	80015b2 <HAL_GPIO_Init+0x14a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	e001      	b.n	80015b6 <HAL_GPIO_Init+0x14e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3304      	adds	r3, #4
 80015b6:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2bff      	cmp	r3, #255	; 0xff
 80015bc:	d802      	bhi.n	80015c4 <HAL_GPIO_Init+0x15c>
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	e002      	b.n	80015ca <HAL_GPIO_Init+0x162>
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	3b08      	subs	r3, #8
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	210f      	movs	r1, #15
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	401a      	ands	r2, r3
 80015dc:	6a39      	ldr	r1, [r7, #32]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	431a      	orrs	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 80b1 	beq.w	800175a <HAL_GPIO_Init+0x2f2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015f8:	4b4d      	ldr	r3, [pc, #308]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a4c      	ldr	r2, [pc, #304]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001610:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_GPIO_Init+0x2cc>)
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4013      	ands	r3, r2
 8001632:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a40      	ldr	r2, [pc, #256]	; (8001738 <HAL_GPIO_Init+0x2d0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d013      	beq.n	8001664 <HAL_GPIO_Init+0x1fc>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a3f      	ldr	r2, [pc, #252]	; (800173c <HAL_GPIO_Init+0x2d4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d00d      	beq.n	8001660 <HAL_GPIO_Init+0x1f8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <HAL_GPIO_Init+0x2d8>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d007      	beq.n	800165c <HAL_GPIO_Init+0x1f4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a3d      	ldr	r2, [pc, #244]	; (8001744 <HAL_GPIO_Init+0x2dc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d101      	bne.n	8001658 <HAL_GPIO_Init+0x1f0>
 8001654:	2303      	movs	r3, #3
 8001656:	e006      	b.n	8001666 <HAL_GPIO_Init+0x1fe>
 8001658:	2304      	movs	r3, #4
 800165a:	e004      	b.n	8001666 <HAL_GPIO_Init+0x1fe>
 800165c:	2302      	movs	r3, #2
 800165e:	e002      	b.n	8001666 <HAL_GPIO_Init+0x1fe>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_GPIO_Init+0x1fe>
 8001664:	2300      	movs	r3, #0
 8001666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001668:	f002 0203 	and.w	r2, r2, #3
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	4093      	lsls	r3, r2
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	4313      	orrs	r3, r2
 8001674:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001676:	492f      	ldr	r1, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x2cc>)
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	492c      	ldr	r1, [pc, #176]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x244>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4928      	ldr	r1, [pc, #160]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_GPIO_Init+0x25e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4922      	ldr	r1, [pc, #136]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x26c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	491e      	ldr	r1, [pc, #120]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <HAL_GPIO_Init+0x286>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	4918      	ldr	r1, [pc, #96]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	608b      	str	r3, [r1, #8]
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x294>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	4914      	ldr	r1, [pc, #80]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d021      	beq.n	800174c <HAL_GPIO_Init+0x2e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	60cb      	str	r3, [r1, #12]
 8001714:	e021      	b.n	800175a <HAL_GPIO_Init+0x2f2>
 8001716:	bf00      	nop
 8001718:	10320000 	.word	0x10320000
 800171c:	10310000 	.word	0x10310000
 8001720:	10220000 	.word	0x10220000
 8001724:	10210000 	.word	0x10210000
 8001728:	10120000 	.word	0x10120000
 800172c:	10110000 	.word	0x10110000
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000
 8001738:	40010800 	.word	0x40010800
 800173c:	40010c00 	.word	0x40010c00
 8001740:	40011000 	.word	0x40011000
 8001744:	40011400 	.word	0x40011400
 8001748:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_GPIO_Init+0x30c>)
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	43db      	mvns	r3, r3
 8001754:	4907      	ldr	r1, [pc, #28]	; (8001774 <HAL_GPIO_Init+0x30c>)
 8001756:	4013      	ands	r3, r2
 8001758:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	3301      	adds	r3, #1
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	2b0f      	cmp	r3, #15
 8001764:	f67f ae92 	bls.w	800148c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	372c      	adds	r7, #44	; 0x2c
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40010400 	.word	0x40010400

08001778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e001      	b.n	800179a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]
 80017b2:	4613      	mov	r3, r2
 80017b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b6:	787b      	ldrb	r3, [r7, #1]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017bc:	887a      	ldrh	r2, [r7, #2]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c2:	e003      	b.n	80017cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	041a      	lsls	r2, r3, #16
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	611a      	str	r2, [r3, #16]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0f3      	b.n	80019da <HAL_I2C_Init+0x202>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f009 fa68 	bl	800acdc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	; 0x24
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001824:	f001 f8e2 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8001828:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4a6d      	ldr	r2, [pc, #436]	; (80019e4 <HAL_I2C_Init+0x20c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d807      	bhi.n	8001844 <HAL_I2C_Init+0x6c>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4a6c      	ldr	r2, [pc, #432]	; (80019e8 <HAL_I2C_Init+0x210>)
 8001838:	4293      	cmp	r3, r2
 800183a:	bf94      	ite	ls
 800183c:	2301      	movls	r3, #1
 800183e:	2300      	movhi	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	e006      	b.n	8001852 <HAL_I2C_Init+0x7a>
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4a69      	ldr	r2, [pc, #420]	; (80019ec <HAL_I2C_Init+0x214>)
 8001848:	4293      	cmp	r3, r2
 800184a:	bf94      	ite	ls
 800184c:	2301      	movls	r3, #1
 800184e:	2300      	movhi	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e0bf      	b.n	80019da <HAL_I2C_Init+0x202>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	4a64      	ldr	r2, [pc, #400]	; (80019f0 <HAL_I2C_Init+0x218>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0c9b      	lsrs	r3, r3, #18
 8001864:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <HAL_I2C_Init+0x20c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d802      	bhi.n	800187e <HAL_I2C_Init+0xa6>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	e009      	b.n	8001892 <HAL_I2C_Init+0xba>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	4a5a      	ldr	r2, [pc, #360]	; (80019f4 <HAL_I2C_Init+0x21c>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	099b      	lsrs	r3, r3, #6
 8001890:	3301      	adds	r3, #1
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a51      	ldr	r2, [pc, #324]	; (80019e4 <HAL_I2C_Init+0x20c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d819      	bhi.n	80018d6 <HAL_I2C_Init+0xfe>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00a      	beq.n	80018d2 <HAL_I2C_Init+0xfa>
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1e5a      	subs	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d0:	e051      	b.n	8001976 <HAL_I2C_Init+0x19e>
 80018d2:	2304      	movs	r3, #4
 80018d4:	e04f      	b.n	8001976 <HAL_I2C_Init+0x19e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d111      	bne.n	8001902 <HAL_I2C_Init+0x12a>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1e59      	subs	r1, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf0c      	ite	eq
 80018fa:	2301      	moveq	r3, #1
 80018fc:	2300      	movne	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	e012      	b.n	8001928 <HAL_I2C_Init+0x150>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1e59      	subs	r1, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	009a      	lsls	r2, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	fbb1 f3f3 	udiv	r3, r1, r3
 8001918:	3301      	adds	r3, #1
 800191a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf0c      	ite	eq
 8001922:	2301      	moveq	r3, #1
 8001924:	2300      	movne	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_I2C_Init+0x158>
 800192c:	2301      	movs	r3, #1
 800192e:	e022      	b.n	8001976 <HAL_I2C_Init+0x19e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10e      	bne.n	8001956 <HAL_I2C_Init+0x17e>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	1e59      	subs	r1, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	fbb1 f3f3 	udiv	r3, r1, r3
 800194a:	3301      	adds	r3, #1
 800194c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001954:	e00f      	b.n	8001976 <HAL_I2C_Init+0x19e>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1e59      	subs	r1, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	009a      	lsls	r2, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	fbb1 f3f3 	udiv	r3, r1, r3
 800196c:	3301      	adds	r3, #1
 800196e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69d9      	ldr	r1, [r3, #28]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6919      	ldr	r1, [r3, #16]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6959      	ldr	r1, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699a      	ldr	r2, [r3, #24]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2220      	movs	r2, #32
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	000186a0 	.word	0x000186a0
 80019e8:	001e847f 	.word	0x001e847f
 80019ec:	003d08ff 	.word	0x003d08ff
 80019f0:	431bde83 	.word	0x431bde83
 80019f4:	10624dd3 	.word	0x10624dd3

080019f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	461a      	mov	r2, r3
 8001a04:	460b      	mov	r3, r1
 8001a06:	817b      	strh	r3, [r7, #10]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a10:	f7fe fd70 	bl	80004f4 <HAL_GetTick>
 8001a14:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	f040 80ee 	bne.w	8001c00 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2319      	movs	r3, #25
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4977      	ldr	r1, [pc, #476]	; (8001c0c <HAL_I2C_Master_Transmit+0x214>)
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 faa2 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e0e1      	b.n	8001c02 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_I2C_Master_Transmit+0x54>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e0da      	b.n	8001c02 <HAL_I2C_Master_Transmit+0x20a>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d007      	beq.n	8001a72 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a80:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2221      	movs	r2, #33	; 0x21
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	893a      	ldrh	r2, [r7, #8]
 8001aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a5a      	ldr	r2, [pc, #360]	; (8001c10 <HAL_I2C_Master_Transmit+0x218>)
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ab4:	8979      	ldrh	r1, [r7, #10]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	6a3a      	ldr	r2, [r7, #32]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f9da 	bl	8001e74 <I2C_MasterRequestWrite>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00f      	beq.n	8001ae6 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d105      	bne.n	8001ada <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e093      	b.n	8001c02 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e08d      	b.n	8001c02 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001afc:	e066      	b.n	8001bcc <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	6a39      	ldr	r1, [r7, #32]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 faf7 	bl	80020f6 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00f      	beq.n	8001b2e <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d109      	bne.n	8001b2a <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b24:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e06b      	b.n	8001c02 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e069      	b.n	8001c02 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	1c59      	adds	r1, r3, #1
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	6251      	str	r1, [r2, #36]	; 0x24
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d119      	bne.n	8001b9c <HAL_I2C_Master_Transmit+0x1a4>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d015      	beq.n	8001b9c <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	1c59      	adds	r1, r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	6251      	str	r1, [r2, #36]	; 0x24
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	6a39      	ldr	r1, [r7, #32]
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 fae5 	bl	8002170 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00f      	beq.n	8001bcc <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d109      	bne.n	8001bc8 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc2:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e01c      	b.n	8001c02 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e01a      	b.n	8001c02 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d194      	bne.n	8001afe <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2220      	movs	r2, #32
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001c00:	2302      	movs	r3, #2
  }
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	00100002 	.word	0x00100002
 8001c10:	ffff0000 	.word	0xffff0000

08001c14 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08c      	sub	sp, #48	; 0x30
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	460b      	mov	r3, r1
 8001c22:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	2301      	movs	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c38:	f7fe fc5c 	bl	80004f4 <HAL_GetTick>
 8001c3c:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	f040 810b 	bne.w	8001e62 <HAL_I2C_IsDeviceReady+0x24e>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2319      	movs	r3, #25
 8001c52:	2201      	movs	r2, #1
 8001c54:	4985      	ldr	r1, [pc, #532]	; (8001e6c <HAL_I2C_IsDeviceReady+0x258>)
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f98e 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 8001c62:	2302      	movs	r3, #2
 8001c64:	e0fe      	b.n	8001e64 <HAL_I2C_IsDeviceReady+0x250>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_I2C_IsDeviceReady+0x60>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e0f7      	b.n	8001e64 <HAL_I2C_IsDeviceReady+0x250>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d007      	beq.n	8001c9a <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2224      	movs	r2, #36	; 0x24
 8001cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a6d      	ldr	r2, [pc, #436]	; (8001e70 <HAL_I2C_IsDeviceReady+0x25c>)
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f94c 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0bc      	b.n	8001e64 <HAL_I2C_IsDeviceReady+0x250>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cf8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7fe fbfb 	bl	80004f4 <HAL_GetTick>
 8001cfe:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	bf0c      	ite	eq
 8001d0e:	2301      	moveq	r3, #1
 8001d10:	2300      	movne	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d24:	bf0c      	ite	eq
 8001d26:	2301      	moveq	r3, #1
 8001d28:	2300      	movne	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001d38:	e02a      	b.n	8001d90 <HAL_I2C_IsDeviceReady+0x17c>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_I2C_IsDeviceReady+0x13c>
 8001d40:	f7fe fbd8 	bl	80004f4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d203      	bcs.n	8001d58 <HAL_I2C_IsDeviceReady+0x144>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	22a0      	movs	r2, #160	; 0xa0
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	bf0c      	ite	eq
 8001d66:	2301      	moveq	r3, #1
 8001d68:	2300      	movne	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d105      	bne.n	8001da2 <HAL_I2C_IsDeviceReady+0x18e>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <HAL_I2C_IsDeviceReady+0x18e>
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2ba0      	cmp	r3, #160	; 0xa0
 8001da0:	d1cb      	bne.n	8001d3a <HAL_I2C_IsDeviceReady+0x126>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d129      	bne.n	8001e0c <HAL_I2C_IsDeviceReady+0x1f8>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2319      	movs	r3, #25
 8001de4:	2201      	movs	r2, #1
 8001de6:	4921      	ldr	r1, [pc, #132]	; (8001e6c <HAL_I2C_IsDeviceReady+0x258>)
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f8c5 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_I2C_IsDeviceReady+0x1e4>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e035      	b.n	8001e64 <HAL_I2C_IsDeviceReady+0x250>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e02b      	b.n	8001e64 <HAL_I2C_IsDeviceReady+0x250>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e24:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2319      	movs	r3, #25
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	490f      	ldr	r1, [pc, #60]	; (8001e6c <HAL_I2C_IsDeviceReady+0x258>)
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f8a1 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_I2C_IsDeviceReady+0x22c>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e011      	b.n	8001e64 <HAL_I2C_IsDeviceReady+0x250>
        }
      }
    }while(I2C_Trials++ < Trials);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	617a      	str	r2, [r7, #20]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	f63f af38 	bhi.w	8001cbe <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_I2C_IsDeviceReady+0x250>
  }
  else
  {
    return HAL_BUSY;
 8001e62:	2302      	movs	r3, #2
  }
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	00100002 	.word	0x00100002
 8001e70:	ffff0000 	.word	0xffff0000

08001e74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	460b      	mov	r3, r1
 8001e82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d006      	beq.n	8001e9e <I2C_MasterRequestWrite+0x2a>
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d003      	beq.n	8001e9e <I2C_MasterRequestWrite+0x2a>
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e9c:	d108      	bne.n	8001eb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e00b      	b.n	8001ec8 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	2b12      	cmp	r3, #18
 8001eb6:	d107      	bne.n	8001ec8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec6:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f84f 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e041      	b.n	8001f68 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eec:	d108      	bne.n	8001f00 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eee:	897b      	ldrh	r3, [r7, #10]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	e021      	b.n	8001f44 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f00:	897b      	ldrh	r3, [r7, #10]
 8001f02:	11db      	asrs	r3, r3, #7
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f003 0306 	and.w	r3, r3, #6
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f063 030f 	orn	r3, r3, #15
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4914      	ldr	r1, [pc, #80]	; (8001f70 <I2C_MasterRequestWrite+0xfc>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f87b 	bl	800201a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d101      	bne.n	8001f36 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e018      	b.n	8001f68 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e016      	b.n	8001f68 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f3a:	897b      	ldrh	r3, [r7, #10]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	490a      	ldr	r1, [pc, #40]	; (8001f74 <I2C_MasterRequestWrite+0x100>)
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f865 	bl	800201a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d101      	bne.n	8001f62 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e002      	b.n	8001f68 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e000      	b.n	8001f68 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	00010008 	.word	0x00010008
 8001f74:	00010002 	.word	0x00010002

08001f78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001f88:	e01f      	b.n	8001fca <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f90:	d01b      	beq.n	8001fca <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f98:	f7fe faac 	bl	80004f4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d210      	bcs.n	8001fca <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e023      	b.n	8002012 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	0c1b      	lsrs	r3, r3, #16
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d10d      	bne.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0x78>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bf0c      	ite	eq
 8001fe6:	2301      	moveq	r3, #1
 8001fe8:	2300      	movne	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	e00c      	b.n	800200a <I2C_WaitOnFlagUntilTimeout+0x92>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bf0c      	ite	eq
 8002002:	2301      	moveq	r3, #1
 8002004:	2300      	movne	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	429a      	cmp	r2, r3
 800200e:	d0bc      	beq.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002028:	e040      	b.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002038:	d11c      	bne.n	8002074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002048:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002052:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2204      	movs	r2, #4
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e03c      	b.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207a:	d017      	beq.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8002082:	f7fe fa37 	bl	80004f4 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	d20c      	bcs.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e020      	b.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10c      	bne.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	43da      	mvns	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4013      	ands	r3, r2
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e00b      	b.n	80020e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4013      	ands	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d19e      	bne.n	800202a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002102:	e029      	b.n	8002158 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f870 	bl	80021ea <I2C_IsAcknowledgeFailed>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e029      	b.n	8002168 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211a:	d01d      	beq.n	8002158 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002122:	f7fe f9e7 	bl	80004f4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	429a      	cmp	r2, r3
 8002130:	d212      	bcs.n	8002158 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f043 0220 	orr.w	r2, r3, #32
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e007      	b.n	8002168 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	2b80      	cmp	r3, #128	; 0x80
 8002164:	d1ce      	bne.n	8002104 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800217c:	e029      	b.n	80021d2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f833 	bl	80021ea <I2C_IsAcknowledgeFailed>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e029      	b.n	80021e2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d01d      	beq.n	80021d2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800219c:	f7fe f9aa 	bl	80004f4 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d212      	bcs.n	80021d2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2220      	movs	r2, #32
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e007      	b.n	80021e2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d1ce      	bne.n	800217e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002200:	d114      	bne.n	800222c <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800220a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2204      	movs	r2, #4
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8087 	beq.w	8002360 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002252:	4b92      	ldr	r3, [pc, #584]	; (800249c <HAL_RCC_OscConfig+0x264>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b04      	cmp	r3, #4
 800225c:	d00c      	beq.n	8002278 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800225e:	4b8f      	ldr	r3, [pc, #572]	; (800249c <HAL_RCC_OscConfig+0x264>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d112      	bne.n	8002290 <HAL_RCC_OscConfig+0x58>
 800226a:	4b8c      	ldr	r3, [pc, #560]	; (800249c <HAL_RCC_OscConfig+0x264>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002276:	d10b      	bne.n	8002290 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	4b88      	ldr	r3, [pc, #544]	; (800249c <HAL_RCC_OscConfig+0x264>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d06c      	beq.n	800235e <HAL_RCC_OscConfig+0x126>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d168      	bne.n	800235e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e22d      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002298:	d106      	bne.n	80022a8 <HAL_RCC_OscConfig+0x70>
 800229a:	4b80      	ldr	r3, [pc, #512]	; (800249c <HAL_RCC_OscConfig+0x264>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7f      	ldr	r2, [pc, #508]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e02e      	b.n	8002306 <HAL_RCC_OscConfig+0xce>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x92>
 80022b0:	4b7a      	ldr	r3, [pc, #488]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a79      	ldr	r2, [pc, #484]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b77      	ldr	r3, [pc, #476]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a76      	ldr	r2, [pc, #472]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e01d      	b.n	8002306 <HAL_RCC_OscConfig+0xce>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d2:	d10c      	bne.n	80022ee <HAL_RCC_OscConfig+0xb6>
 80022d4:	4b71      	ldr	r3, [pc, #452]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a70      	ldr	r2, [pc, #448]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b6e      	ldr	r3, [pc, #440]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6d      	ldr	r2, [pc, #436]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e00b      	b.n	8002306 <HAL_RCC_OscConfig+0xce>
 80022ee:	4b6b      	ldr	r3, [pc, #428]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a6a      	ldr	r2, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b68      	ldr	r3, [pc, #416]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a67      	ldr	r2, [pc, #412]	; (800249c <HAL_RCC_OscConfig+0x264>)
 8002300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d013      	beq.n	8002336 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe f8f1 	bl	80004f4 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002316:	f7fe f8ed 	bl	80004f4 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b64      	cmp	r3, #100	; 0x64
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e1e1      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002328:	4b5c      	ldr	r3, [pc, #368]	; (800249c <HAL_RCC_OscConfig+0x264>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0xde>
 8002334:	e014      	b.n	8002360 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe f8dd 	bl	80004f4 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233e:	f7fe f8d9 	bl	80004f4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b64      	cmp	r3, #100	; 0x64
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e1cd      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002350:	4b52      	ldr	r3, [pc, #328]	; (800249c <HAL_RCC_OscConfig+0x264>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x106>
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d063      	beq.n	8002434 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <HAL_RCC_OscConfig+0x264>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00b      	beq.n	8002390 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002378:	4b48      	ldr	r3, [pc, #288]	; (800249c <HAL_RCC_OscConfig+0x264>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d11c      	bne.n	80023be <HAL_RCC_OscConfig+0x186>
 8002384:	4b45      	ldr	r3, [pc, #276]	; (800249c <HAL_RCC_OscConfig+0x264>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d116      	bne.n	80023be <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <HAL_RCC_OscConfig+0x264>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_OscConfig+0x170>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e1a1      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b3c      	ldr	r3, [pc, #240]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4939      	ldr	r1, [pc, #228]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023bc:	e03a      	b.n	8002434 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d020      	beq.n	8002408 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c6:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <HAL_RCC_OscConfig+0x268>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7fe f892 	bl	80004f4 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d4:	f7fe f88e 	bl	80004f4 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e182      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	4b2a      	ldr	r3, [pc, #168]	; (800249c <HAL_RCC_OscConfig+0x264>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4926      	ldr	r1, [pc, #152]	; (800249c <HAL_RCC_OscConfig+0x264>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
 8002406:	e015      	b.n	8002434 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_RCC_OscConfig+0x268>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe f871 	bl	80004f4 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002416:	f7fe f86d 	bl	80004f4 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e161      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <HAL_RCC_OscConfig+0x264>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d039      	beq.n	80024b4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d019      	beq.n	800247c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7fe f851 	bl	80004f4 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002456:	f7fe f84d 	bl	80004f4 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e141      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <HAL_RCC_OscConfig+0x264>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002474:	2001      	movs	r0, #1
 8002476:	f000 fae1 	bl	8002a3c <RCC_Delay>
 800247a:	e01b      	b.n	80024b4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7fe f837 	bl	80004f4 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	e00e      	b.n	80024a8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800248a:	f7fe f833 	bl	80004f4 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d907      	bls.n	80024a8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e127      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
 800249c:	40021000 	.word	0x40021000
 80024a0:	42420000 	.word	0x42420000
 80024a4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	4b92      	ldr	r3, [pc, #584]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ea      	bne.n	800248a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80a6 	beq.w	800260e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c6:	4b8b      	ldr	r3, [pc, #556]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10d      	bne.n	80024ee <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a87      	ldr	r2, [pc, #540]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	61d3      	str	r3, [r2, #28]
 80024de:	4b85      	ldr	r3, [pc, #532]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024ea:	2301      	movs	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	4b82      	ldr	r3, [pc, #520]	; (80026f8 <HAL_RCC_OscConfig+0x4c0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fa:	4b7f      	ldr	r3, [pc, #508]	; (80026f8 <HAL_RCC_OscConfig+0x4c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7e      	ldr	r2, [pc, #504]	; (80026f8 <HAL_RCC_OscConfig+0x4c0>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002506:	f7fd fff5 	bl	80004f4 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fd fff1 	bl	80004f4 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b64      	cmp	r3, #100	; 0x64
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e0e5      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	4b75      	ldr	r3, [pc, #468]	; (80026f8 <HAL_RCC_OscConfig+0x4c0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x30a>
 8002534:	4b6f      	ldr	r3, [pc, #444]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a6e      	ldr	r2, [pc, #440]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	e02d      	b.n	800259e <HAL_RCC_OscConfig+0x366>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x32c>
 800254a:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4a69      	ldr	r2, [pc, #420]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6213      	str	r3, [r2, #32]
 8002556:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a66      	ldr	r2, [pc, #408]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	e01c      	b.n	800259e <HAL_RCC_OscConfig+0x366>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b05      	cmp	r3, #5
 800256a:	d10c      	bne.n	8002586 <HAL_RCC_OscConfig+0x34e>
 800256c:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4a60      	ldr	r2, [pc, #384]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	6213      	str	r3, [r2, #32]
 8002578:	4b5e      	ldr	r3, [pc, #376]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a5d      	ldr	r2, [pc, #372]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6213      	str	r3, [r2, #32]
 8002584:	e00b      	b.n	800259e <HAL_RCC_OscConfig+0x366>
 8002586:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a5a      	ldr	r2, [pc, #360]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6213      	str	r3, [r2, #32]
 8002592:	4b58      	ldr	r3, [pc, #352]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a57      	ldr	r2, [pc, #348]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d015      	beq.n	80025d2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7fd ffa5 	bl	80004f4 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fd ffa1 	bl	80004f4 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e093      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	4b4b      	ldr	r3, [pc, #300]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ee      	beq.n	80025ae <HAL_RCC_OscConfig+0x376>
 80025d0:	e014      	b.n	80025fc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d2:	f7fd ff8f 	bl	80004f4 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fd ff8b 	bl	80004f4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e07d      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	4b40      	ldr	r3, [pc, #256]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ee      	bne.n	80025da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d105      	bne.n	800260e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002602:	4b3c      	ldr	r3, [pc, #240]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d069      	beq.n	80026ea <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002616:	4b37      	ldr	r3, [pc, #220]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d061      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d146      	bne.n	80026b8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_RCC_OscConfig+0x4c4>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fd ff60 	bl	80004f4 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7fd ff5c 	bl	80004f4 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e050      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265e:	d108      	bne.n	8002672 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4921      	ldr	r1, [pc, #132]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a19      	ldr	r1, [r3, #32]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	430b      	orrs	r3, r1
 8002684:	491b      	ldr	r1, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_RCC_OscConfig+0x4c4>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fd ff30 	bl	80004f4 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002698:	f7fd ff2c 	bl	80004f4 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e020      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x460>
 80026b6:	e018      	b.n	80026ea <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fd ff19 	bl	80004f4 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c6:	f7fd ff15 	bl	80004f4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e009      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x48e>
 80026e4:	e001      	b.n	80026ea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40007000 	.word	0x40007000
 80026fc:	42420060 	.word	0x42420060

08002700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800270e:	4b7e      	ldr	r3, [pc, #504]	; (8002908 <HAL_RCC_ClockConfig+0x208>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d910      	bls.n	800273e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271c:	4b7a      	ldr	r3, [pc, #488]	; (8002908 <HAL_RCC_ClockConfig+0x208>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 0207 	bic.w	r2, r3, #7
 8002724:	4978      	ldr	r1, [pc, #480]	; (8002908 <HAL_RCC_ClockConfig+0x208>)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800272c:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_RCC_ClockConfig+0x208>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d001      	beq.n	800273e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e0e0      	b.n	8002900 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d020      	beq.n	800278c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002756:	4b6d      	ldr	r3, [pc, #436]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a6c      	ldr	r2, [pc, #432]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 800275c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002760:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800276e:	4b67      	ldr	r3, [pc, #412]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4a66      	ldr	r2, [pc, #408]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 8002774:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002778:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277a:	4b64      	ldr	r3, [pc, #400]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4961      	ldr	r1, [pc, #388]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d06a      	beq.n	800286e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a0:	4b5a      	ldr	r3, [pc, #360]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d115      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0a7      	b.n	8002900 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b8:	4b54      	ldr	r3, [pc, #336]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e09b      	b.n	8002900 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c8:	4b50      	ldr	r3, [pc, #320]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e093      	b.n	8002900 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d8:	4b4c      	ldr	r3, [pc, #304]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f023 0203 	bic.w	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4949      	ldr	r1, [pc, #292]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ea:	f7fd fe83 	bl	80004f4 <HAL_GetTick>
 80027ee:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d112      	bne.n	800281e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fa:	f7fd fe7b 	bl	80004f4 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e077      	b.n	8002900 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002810:	4b3e      	ldr	r3, [pc, #248]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b04      	cmp	r3, #4
 800281a:	d1ee      	bne.n	80027fa <HAL_RCC_ClockConfig+0xfa>
 800281c:	e027      	b.n	800286e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d11d      	bne.n	8002862 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002826:	e00a      	b.n	800283e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002828:	f7fd fe64 	bl	80004f4 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e060      	b.n	8002900 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800283e:	4b33      	ldr	r3, [pc, #204]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b08      	cmp	r3, #8
 8002848:	d1ee      	bne.n	8002828 <HAL_RCC_ClockConfig+0x128>
 800284a:	e010      	b.n	800286e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284c:	f7fd fe52 	bl	80004f4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e04e      	b.n	8002900 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002862:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ee      	bne.n	800284c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800286e:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_RCC_ClockConfig+0x208>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d210      	bcs.n	800289e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <HAL_RCC_ClockConfig+0x208>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 0207 	bic.w	r2, r3, #7
 8002884:	4920      	ldr	r1, [pc, #128]	; (8002908 <HAL_RCC_ClockConfig+0x208>)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <HAL_RCC_ClockConfig+0x208>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d001      	beq.n	800289e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e030      	b.n	8002900 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4915      	ldr	r1, [pc, #84]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	490d      	ldr	r1, [pc, #52]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028dc:	f000 f81c 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_RCC_ClockConfig+0x20c>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	4908      	ldr	r1, [pc, #32]	; (8002910 <HAL_RCC_ClockConfig+0x210>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <HAL_RCC_ClockConfig+0x214>)
 80028f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7fd fdb9 	bl	8000470 <HAL_InitTick>
  
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40022000 	.word	0x40022000
 800290c:	40021000 	.word	0x40021000
 8002910:	0800c6f8 	.word	0x0800c6f8
 8002914:	20000014 	.word	0x20000014

08002918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b490      	push	{r4, r7}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002920:	1d3c      	adds	r4, r7, #4
 8002922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002928:	f240 2301 	movw	r3, #513	; 0x201
 800292c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	2300      	movs	r3, #0
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002942:	4b22      	ldr	r3, [pc, #136]	; (80029cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d002      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x40>
 8002952:	2b08      	cmp	r3, #8
 8002954:	d003      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0x46>
 8002956:	e02d      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800295a:	623b      	str	r3, [r7, #32]
      break;
 800295c:	e02d      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	0c9b      	lsrs	r3, r3, #18
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800296a:	4413      	add	r3, r2
 800296c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002970:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	0c5b      	lsrs	r3, r3, #17
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800298a:	4413      	add	r3, r2
 800298c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002990:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002996:	fb02 f203 	mul.w	r2, r2, r3
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	e004      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029a8:	fb02 f303 	mul.w	r3, r2, r3
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	623b      	str	r3, [r7, #32]
      break;
 80029b2:	e002      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b6:	623b      	str	r3, [r7, #32]
      break;
 80029b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3728      	adds	r7, #40	; 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc90      	pop	{r4, r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	0800b1c8 	.word	0x0800b1c8
 80029cc:	40021000 	.word	0x40021000
 80029d0:	007a1200 	.word	0x007a1200
 80029d4:	003d0900 	.word	0x003d0900

080029d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029dc:	4b02      	ldr	r3, [pc, #8]	; (80029e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	20000014 	.word	0x20000014

080029ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029f0:	f7ff fff2 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	4903      	ldr	r1, [pc, #12]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a02:	5ccb      	ldrb	r3, [r1, r3]
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	0800c708 	.word	0x0800c708

08002a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a18:	f7ff ffde 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	0adb      	lsrs	r3, r3, #11
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4903      	ldr	r1, [pc, #12]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	0800c708 	.word	0x0800c708

08002a3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <RCC_Delay+0x38>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <RCC_Delay+0x3c>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0a5b      	lsrs	r3, r3, #9
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002a58:	bf00      	nop
}
 8002a5a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e5a      	subs	r2, r3, #1
 8002a60:	60fa      	str	r2, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f8      	bne.n	8002a58 <RCC_Delay+0x1c>
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000014 	.word	0x20000014
 8002a78:	10624dd3 	.word	0x10624dd3

08002a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d07d      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9c:	4b4f      	ldr	r3, [pc, #316]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b4c      	ldr	r3, [pc, #304]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	4a4b      	ldr	r2, [pc, #300]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	61d3      	str	r3, [r2, #28]
 8002ab4:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d118      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad0:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a42      	ldr	r2, [pc, #264]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ada:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002adc:	f7fd fd0a 	bl	80004f4 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae2:	e008      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae4:	f7fd fd06 	bl	80004f4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e06d      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b3a      	ldr	r3, [pc, #232]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b02:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d02e      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d027      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b20:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b2a:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b30:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b36:	4a29      	ldr	r2, [pc, #164]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d014      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7fd fcd5 	bl	80004f4 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4e:	f7fd fcd1 	bl	80004f4 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e036      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0ee      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4917      	ldr	r1, [pc, #92]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b88:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	490b      	ldr	r1, [pc, #44]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bbe:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4904      	ldr	r1, [pc, #16]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40007000 	.word	0x40007000
 8002be4:	42420440 	.word	0x42420440

08002be8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b08d      	sub	sp, #52	; 0x34
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bf0:	4b5a      	ldr	r3, [pc, #360]	; (8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002bf2:	f107 040c 	add.w	r4, r7, #12
 8002bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bfc:	f240 2301 	movw	r3, #513	; 0x201
 8002c00:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	2300      	movs	r3, #0
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	2300      	movs	r3, #0
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	f200 8094 	bhi.w	8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d04c      	beq.n	8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d07f      	beq.n	8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 8002c30:	e08c      	b.n	8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      temp_reg = RCC->CFGR;
 8002c32:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8002c38:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8085 	beq.w	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	0c9b      	lsrs	r3, r3, #18
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c52:	4413      	add	r3, r2
 8002c54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c58:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d018      	beq.n	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c64:	4b3e      	ldr	r3, [pc, #248]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	0c5b      	lsrs	r3, r3, #17
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c72:	4413      	add	r3, r2
 8002c74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00d      	beq.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c84:	4a37      	ldr	r2, [pc, #220]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c94:	e004      	b.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	4a33      	ldr	r2, [pc, #204]	; (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ca0:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cac:	d102      	bne.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002cb2:	e04d      	b.n	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (pllclk * 2) / 3;
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002cc2:	e045      	b.n	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      temp_reg = RCC->BDCR;
 8002cc4:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd4:	d108      	bne.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce6:	e022      	b.n	8002d2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf2:	d109      	bne.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002d00:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d06:	e012      	b.n	8002d2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d12:	d109      	bne.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = HSE_VALUE / 128U;
 8002d20:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d26:	e002      	b.n	8002d2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d2c:	e011      	b.n	8002d52 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8002d2e:	e010      	b.n	8002d52 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d30:	f7ff fe70 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	0b9b      	lsrs	r3, r3, #14
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	3301      	adds	r3, #1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
      break;
 8002d4c:	bf00      	nop
 8002d4e:	e000      	b.n	8002d52 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
      break;
 8002d50:	bf00      	nop
    }
  }
  return(frequency);
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3734      	adds	r7, #52	; 0x34
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}
 8002d5c:	0800b1d8 	.word	0x0800b1d8
 8002d60:	40021000 	.word	0x40021000
 8002d64:	007a1200 	.word	0x007a1200
 8002d68:	003d0900 	.word	0x003d0900
 8002d6c:	aaaaaaab 	.word	0xaaaaaaab

08002d70 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_SPI_Transmit+0x26>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e125      	b.n	8002fe2 <HAL_SPI_Transmit+0x272>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d9e:	f7fd fba9 	bl	80004f4 <HAL_GetTick>
 8002da2:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d002      	beq.n	8002db6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
 8002db2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002db4:	e10c      	b.n	8002fd0 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0U))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_SPI_Transmit+0x52>
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dc6:	e103      	b.n	8002fd0 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2203      	movs	r2, #3
 8002dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	88fa      	ldrh	r2, [r7, #6]
 8002de0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	88fa      	ldrh	r2, [r7, #6]
 8002de6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e0e:	d107      	bne.n	8002e20 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d007      	beq.n	8002e3e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e46:	d147      	bne.n	8002ed8 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d004      	beq.n	8002e5a <HAL_SPI_Transmit+0xea>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d138      	bne.n	8002ecc <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	3302      	adds	r3, #2
 8002e68:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e78:	e028      	b.n	8002ecc <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d10f      	bne.n	8002ea8 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	881a      	ldrh	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	3302      	adds	r3, #2
 8002e96:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ea6:	e011      	b.n	8002ecc <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_SPI_Transmit+0x156>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d00a      	beq.n	8002ecc <HAL_SPI_Transmit+0x15c>
 8002eb6:	f7fd fb1d 	bl	80004f4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d802      	bhi.n	8002ecc <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002eca:	e081      	b.n	8002fd0 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1d1      	bne.n	8002e7a <HAL_SPI_Transmit+0x10a>
 8002ed6:	e048      	b.n	8002f6a <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <HAL_SPI_Transmit+0x17a>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d13a      	bne.n	8002f60 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	330c      	adds	r3, #12
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f0a:	e029      	b.n	8002f60 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d110      	bne.n	8002f3c <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	7812      	ldrb	r2, [r2, #0]
 8002f24:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f3a:	e011      	b.n	8002f60 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_SPI_Transmit+0x1ea>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d00a      	beq.n	8002f60 <HAL_SPI_Transmit+0x1f0>
 8002f4a:	f7fd fad3 	bl	80004f4 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d802      	bhi.n	8002f60 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f5e:	e037      	b.n	8002fd0 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1d0      	bne.n	8002f0c <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2201      	movs	r2, #1
 8002f72:	2102      	movs	r1, #2
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f9e5 	bl	8003344 <SPI_WaitFlagStateUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f84:	e024      	b.n	8002fd0 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 fa43 	bl	8003416 <SPI_CheckFlag_BSY>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fa0:	e016      	b.n	8002fd0 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10a      	bne.n	8002fc0 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e000      	b.n	8002fd0 <HAL_SPI_Transmit+0x260>
  }

error:
 8002fce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fe0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b08c      	sub	sp, #48	; 0x30
 8002fee:	af02      	add	r7, sp, #8
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8003004:	2301      	movs	r3, #1
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_SPI_TransmitReceive+0x32>
 8003018:	2302      	movs	r3, #2
 800301a:	e182      	b.n	8003322 <HAL_SPI_TransmitReceive+0x338>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003024:	f7fd fa66 	bl	80004f4 <HAL_GetTick>
 8003028:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003030:	b2db      	uxtb	r3, r3
 8003032:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d00e      	beq.n	800305e <HAL_SPI_TransmitReceive+0x74>
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003046:	d106      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x6c>
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d003      	beq.n	800305e <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8003056:	2302      	movs	r3, #2
 8003058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800305c:	e157      	b.n	800330e <HAL_SPI_TransmitReceive+0x324>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x86>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x86>
 800306a:	887b      	ldrh	r3, [r7, #2]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d103      	bne.n	8003078 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003076:	e14a      	b.n	800330e <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d103      	bne.n	800308c <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2205      	movs	r2, #5
 8003088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	887a      	ldrh	r2, [r7, #2]
 80030a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	887a      	ldrh	r2, [r7, #2]
 80030ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d007      	beq.n	80030e0 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e8:	d171      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <HAL_SPI_TransmitReceive+0x112>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d15d      	bne.n	80031b8 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	881a      	ldrh	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3302      	adds	r3, #2
 800310a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800311a:	e04d      	b.n	80031b8 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01c      	beq.n	800315c <HAL_SPI_TransmitReceive+0x172>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d017      	beq.n	800315c <HAL_SPI_TransmitReceive+0x172>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d110      	bne.n	800315c <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	881a      	ldrh	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3302      	adds	r3, #2
 8003148:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d018      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x1ae>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b01      	cmp	r3, #1
 8003172:	d111      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	b29a      	uxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3302      	adds	r3, #2
 8003184:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8003194:	2301      	movs	r3, #1
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d00b      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x1ce>
 80031a0:	f7fd f9a8 	bl	80004f4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d803      	bhi.n	80031b8 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80031b6:	e0aa      	b.n	800330e <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ac      	bne.n	800311c <HAL_SPI_TransmitReceive+0x132>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1a7      	bne.n	800311c <HAL_SPI_TransmitReceive+0x132>
 80031cc:	e070      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x2c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <HAL_SPI_TransmitReceive+0x1f6>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d15d      	bne.n	800329c <HAL_SPI_TransmitReceive+0x2b2>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	330c      	adds	r3, #12
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	7812      	ldrb	r2, [r2, #0]
 80031ea:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3301      	adds	r3, #1
 80031f0:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003200:	e04c      	b.n	800329c <HAL_SPI_TransmitReceive+0x2b2>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01c      	beq.n	8003242 <HAL_SPI_TransmitReceive+0x258>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d017      	beq.n	8003242 <HAL_SPI_TransmitReceive+0x258>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b02      	cmp	r3, #2
 800321e:	d110      	bne.n	8003242 <HAL_SPI_TransmitReceive+0x258>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	60ba      	str	r2, [r7, #8]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	320c      	adds	r2, #12
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d017      	beq.n	800327c <HAL_SPI_TransmitReceive+0x292>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d110      	bne.n	800327c <HAL_SPI_TransmitReceive+0x292>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68d9      	ldr	r1, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	b2ca      	uxtb	r2, r1
 8003268:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8003278:	2301      	movs	r3, #1
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d00b      	beq.n	800329c <HAL_SPI_TransmitReceive+0x2b2>
 8003284:	f7fd f936 	bl	80004f4 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003290:	429a      	cmp	r2, r3
 8003292:	d803      	bhi.n	800329c <HAL_SPI_TransmitReceive+0x2b2>
      {
        errorcode = HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800329a:	e038      	b.n	800330e <HAL_SPI_TransmitReceive+0x324>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1ad      	bne.n	8003202 <HAL_SPI_TransmitReceive+0x218>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1a8      	bne.n	8003202 <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	2201      	movs	r2, #1
 80032b8:	2102      	movs	r1, #2
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f842 	bl	8003344 <SPI_WaitFlagStateUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_SPI_TransmitReceive+0x2e4>
  {
    errorcode = HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032cc:	e01f      	b.n	800330e <HAL_SPI_TransmitReceive+0x324>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f89f 	bl	8003416 <SPI_CheckFlag_BSY>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <HAL_SPI_TransmitReceive+0x302>
  {
    errorcode = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80032ea:	e010      	b.n	800330e <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	e000      	b.n	800330e <HAL_SPI_TransmitReceive+0x324>
  }
  
error :
 800330c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800331e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003322:	4618      	mov	r0, r3
 8003324:	3728      	adds	r7, #40	; 0x28
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003338:	b2db      	uxtb	r3, r3
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003352:	e04d      	b.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d049      	beq.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003362:	f7fd f8c7 	bl	80004f4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d83e      	bhi.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003380:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800338a:	d111      	bne.n	80033b0 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003394:	d004      	beq.n	80033a0 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d107      	bne.n	80033b0 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b8:	d110      	bne.n	80033dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80033c8:	400b      	ands	r3, r1
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033da:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e00e      	b.n	800340e <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d101      	bne.n	8003404 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8003400:	2201      	movs	r2, #1
 8003402:	e000      	b.n	8003406 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8003404:	2200      	movs	r2, #0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d1a3      	bne.n	8003354 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af02      	add	r7, sp, #8
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	2180      	movs	r1, #128	; 0x80
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7ff ff89 	bl	8003344 <SPI_WaitFlagStateUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e000      	b.n	800344a <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e057      	b.n	8003514 <HAL_SPI_Init+0xc2>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f007 fc6e 	bl	800ad58 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	ea42 0103 	orr.w	r1, r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	0c1b      	lsrs	r3, r3, #16
 80034da:	f003 0104 	and.w	r1, r3, #4
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034f2:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003502:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e03f      	b.n	80035ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f007 fc52 	bl	800adec <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	; 0x24
 800354c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fbe5 	bl	8003d30 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003584:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003594:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b088      	sub	sp, #32
 80035ba:	af02      	add	r7, sp, #8
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	f040 8083 	bne.w	80036de <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_UART_Transmit+0x2e>
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e07b      	b.n	80036e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Transmit+0x40>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e074      	b.n	80036e0 <HAL_UART_Transmit+0x12a>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2221      	movs	r2, #33	; 0x21
 8003608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800360c:	f7fc ff72 	bl	80004f4 <HAL_GetTick>
 8003610:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	88fa      	ldrh	r2, [r7, #6]
 8003616:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800361e:	e042      	b.n	80036a6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	d122      	bne.n	800367e <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2200      	movs	r2, #0
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fa0b 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e046      	b.n	80036e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003664:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d103      	bne.n	8003676 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3302      	adds	r3, #2
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	e017      	b.n	80036a6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3301      	adds	r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	e013      	b.n	80036a6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	2180      	movs	r1, #128	; 0x80
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f9e8 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e023      	b.n	80036e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	60ba      	str	r2, [r7, #8]
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1b7      	bne.n	8003620 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2140      	movs	r1, #64	; 0x40
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f9cf 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e00a      	b.n	80036e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e000      	b.n	80036e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80036de:	2302      	movs	r3, #2
  }
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b20      	cmp	r3, #32
 8003706:	f040 8090 	bne.w	800382a <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_UART_Receive+0x2e>
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e088      	b.n	800382c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_UART_Receive+0x40>
 8003724:	2302      	movs	r3, #2
 8003726:	e081      	b.n	800382c <HAL_UART_Receive+0x144>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2222      	movs	r2, #34	; 0x22
 800373a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800373e:	f7fc fed9 	bl	80004f4 <HAL_GetTick>
 8003742:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	88fa      	ldrh	r2, [r7, #6]
 8003748:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8003750:	e05c      	b.n	800380c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003768:	d12b      	bne.n	80037c2 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2200      	movs	r2, #0
 8003772:	2120      	movs	r1, #32
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f972 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e053      	b.n	800382c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10c      	bne.n	80037aa <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379c:	b29a      	uxth	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3302      	adds	r3, #2
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	e030      	b.n	800380c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	3301      	adds	r3, #1
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	e024      	b.n	800380c <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2120      	movs	r1, #32
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f946 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e027      	b.n	800382c <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d108      	bne.n	80037f6 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	60ba      	str	r2, [r7, #8]
 80037f0:	b2ca      	uxtb	r2, r1
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	e00a      	b.n	800380c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	1c59      	adds	r1, r3, #1
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d19d      	bne.n	8003752 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_UART_IRQHandler+0x52>
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f9d5 	bl	8003c2e <UART_Receive_IT>
      return;
 8003884:	e0cb      	b.n	8003a1e <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80ab 	beq.w	80039e4 <HAL_UART_IRQHandler+0x1b0>
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d105      	bne.n	80038a4 <HAL_UART_IRQHandler+0x70>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80a0 	beq.w	80039e4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_UART_IRQHandler+0x90>
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	f043 0201 	orr.w	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_UART_IRQHandler+0xb0>
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	f043 0202 	orr.w	r2, r3, #2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_UART_IRQHandler+0xd0>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	f043 0204 	orr.w	r2, r3, #4
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_UART_IRQHandler+0xf0>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	f043 0208 	orr.w	r2, r3, #8
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d077      	beq.n	8003a1c <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_UART_IRQHandler+0x112>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f974 	bl	8003c2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <HAL_UART_IRQHandler+0x13a>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d031      	beq.n	80039d2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f8bf 	bl	8003af2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d023      	beq.n	80039ca <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003990:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003996:	2b00      	cmp	r3, #0
 8003998:	d013      	beq.n	80039c2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399e:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <HAL_UART_IRQHandler+0x1f0>)
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd fbe2 	bl	8001170 <HAL_DMA_Abort_IT>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039bc:	4610      	mov	r0, r2
 80039be:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	e00e      	b.n	80039e0 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f842 	bl	8003a4c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	e00a      	b.n	80039e0 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f83e 	bl	8003a4c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	e006      	b.n	80039e0 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f83a 	bl	8003a4c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80039de:	e01d      	b.n	8003a1c <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	bf00      	nop
    return;
 80039e2:	e01b      	b.n	8003a1c <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_UART_IRQHandler+0x1cc>
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f8ab 	bl	8003b54 <UART_Transmit_IT>
    return;
 80039fe:	e00e      	b.n	8003a1e <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_UART_IRQHandler+0x1ea>
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f8f2 	bl	8003bfe <UART_EndTransmit_IT>
    return;
 8003a1a:	e000      	b.n	8003a1e <HAL_UART_IRQHandler+0x1ea>
    return;
 8003a1c:	bf00      	nop
  }
}
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	08003b2d 	.word	0x08003b2d

08003a28 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003a6e:	e02c      	b.n	8003aca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d028      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a7e:	f7fc fd39 	bl	80004f4 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d21d      	bcs.n	8003aca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a9c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e00f      	b.n	8003aea <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d0c3      	beq.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b08:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff ff80 	bl	8003a4c <HAL_UART_ErrorCallback>
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b21      	cmp	r3, #33	; 0x21
 8003b66:	d144      	bne.n	8003bf2 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b70:	d11a      	bne.n	8003ba8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b86:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	1c9a      	adds	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	621a      	str	r2, [r3, #32]
 8003b9a:	e00e      	b.n	8003bba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	621a      	str	r2, [r3, #32]
 8003ba6:	e008      	b.n	8003bba <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	1c59      	adds	r1, r3, #1
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6211      	str	r1, [r2, #32]
 8003bb2:	781a      	ldrb	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10f      	bne.n	8003bee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e000      	b.n	8003bf4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
  }
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c14:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff ff02 	bl	8003a28 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b22      	cmp	r3, #34	; 0x22
 8003c40:	d171      	bne.n	8003d26 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4a:	d123      	bne.n	8003c94 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10e      	bne.n	8003c78 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	1c9a      	adds	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28
 8003c76:	e029      	b.n	8003ccc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	629a      	str	r2, [r3, #40]	; 0x28
 8003c92:	e01b      	b.n	8003ccc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6858      	ldr	r0, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	1c59      	adds	r1, r3, #1
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6291      	str	r1, [r2, #40]	; 0x28
 8003cac:	b2c2      	uxtb	r2, r0
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e00c      	b.n	8003ccc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	1c58      	adds	r0, r3, #1
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	6288      	str	r0, [r1, #40]	; 0x28
 8003cc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d120      	bne.n	8003d22 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0220 	bic.w	r2, r2, #32
 8003cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cfe:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fe8e 	bl	8003a3a <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e002      	b.n	8003d28 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e000      	b.n	8003d28 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
  }
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d30:	b5b0      	push	{r4, r5, r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d72:	f023 030c 	bic.w	r3, r3, #12
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6f      	ldr	r2, [pc, #444]	; (8003f58 <UART_SetConfig+0x228>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d16b      	bne.n	8003e78 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003da0:	f7fe fe38 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003da4:	4602      	mov	r2, r0
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009a      	lsls	r2, r3, #2
 8003dae:	441a      	add	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dba:	4a68      	ldr	r2, [pc, #416]	; (8003f5c <UART_SetConfig+0x22c>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	011c      	lsls	r4, r3, #4
 8003dc4:	f7fe fe26 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009a      	lsls	r2, r3, #2
 8003dd2:	441a      	add	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	fbb2 f5f3 	udiv	r5, r2, r3
 8003dde:	f7fe fe19 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003de2:	4602      	mov	r2, r0
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009a      	lsls	r2, r3, #2
 8003dec:	441a      	add	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	4a58      	ldr	r2, [pc, #352]	; (8003f5c <UART_SetConfig+0x22c>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2264      	movs	r2, #100	; 0x64
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	1aeb      	subs	r3, r5, r3
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	3332      	adds	r3, #50	; 0x32
 8003e0c:	4a53      	ldr	r2, [pc, #332]	; (8003f5c <UART_SetConfig+0x22c>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e18:	441c      	add	r4, r3
 8003e1a:	f7fe fdfb 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e34:	f7fe fdee 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009a      	lsls	r2, r3, #2
 8003e42:	441a      	add	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	4a43      	ldr	r2, [pc, #268]	; (8003f5c <UART_SetConfig+0x22c>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	2264      	movs	r2, #100	; 0x64
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	1aeb      	subs	r3, r5, r3
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	3332      	adds	r3, #50	; 0x32
 8003e62:	4a3e      	ldr	r2, [pc, #248]	; (8003f5c <UART_SetConfig+0x22c>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	f003 020f 	and.w	r2, r3, #15
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4422      	add	r2, r4
 8003e74:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003e76:	e06a      	b.n	8003f4e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003e78:	f7fe fdb8 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009a      	lsls	r2, r3, #2
 8003e86:	441a      	add	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	4a32      	ldr	r2, [pc, #200]	; (8003f5c <UART_SetConfig+0x22c>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	011c      	lsls	r4, r3, #4
 8003e9c:	f7fe fda6 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009a      	lsls	r2, r3, #2
 8003eaa:	441a      	add	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8003eb6:	f7fe fd99 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009a      	lsls	r2, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <UART_SetConfig+0x22c>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	2264      	movs	r2, #100	; 0x64
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	1aeb      	subs	r3, r5, r3
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	3332      	adds	r3, #50	; 0x32
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <UART_SetConfig+0x22c>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef0:	441c      	add	r4, r3
 8003ef2:	f7fe fd7b 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009a      	lsls	r2, r3, #2
 8003f00:	441a      	add	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f0c:	f7fe fd6e 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	009a      	lsls	r2, r3, #2
 8003f1a:	441a      	add	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <UART_SetConfig+0x22c>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	2264      	movs	r2, #100	; 0x64
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	1aeb      	subs	r3, r5, r3
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	3332      	adds	r3, #50	; 0x32
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <UART_SetConfig+0x22c>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	f003 020f 	and.w	r2, r3, #15
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4422      	add	r2, r4
 8003f4c:	609a      	str	r2, [r3, #8]
}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bdb0      	pop	{r4, r5, r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40013800 	.word	0x40013800
 8003f5c:	51eb851f 	.word	0x51eb851f

08003f60 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <disk_status+0x30>)
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	79fa      	ldrb	r2, [r7, #7]
 8003f78:	4905      	ldr	r1, [pc, #20]	; (8003f90 <disk_status+0x30>)
 8003f7a:	440a      	add	r2, r1
 8003f7c:	7a12      	ldrb	r2, [r2, #8]
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4798      	blx	r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	2000026c 	.word	0x2000026c

08003f94 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <disk_initialize+0x48>)
 8003fa6:	5cd3      	ldrb	r3, [r2, r3]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d111      	bne.n	8003fd0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	4a0b      	ldr	r2, [pc, #44]	; (8003fdc <disk_initialize+0x48>)
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <disk_initialize+0x48>)
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	79fa      	ldrb	r2, [r7, #7]
 8003fc2:	4906      	ldr	r1, [pc, #24]	; (8003fdc <disk_initialize+0x48>)
 8003fc4:	440a      	add	r2, r1
 8003fc6:	7a12      	ldrb	r2, [r2, #8]
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4798      	blx	r3
 8003fcc:	4603      	mov	r3, r0
 8003fce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	2000026c 	.word	0x2000026c

08003fe0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	4603      	mov	r3, r0
 8003fee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <disk_read+0x3c>)
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	689c      	ldr	r4, [r3, #8]
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	4a07      	ldr	r2, [pc, #28]	; (800401c <disk_read+0x3c>)
 8004000:	4413      	add	r3, r2
 8004002:	7a18      	ldrb	r0, [r3, #8]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	47a0      	blx	r4
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004010:	7dfb      	ldrb	r3, [r7, #23]
}
 8004012:	4618      	mov	r0, r3
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	bd90      	pop	{r4, r7, pc}
 800401a:	bf00      	nop
 800401c:	2000026c 	.word	0x2000026c

08004020 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	4603      	mov	r3, r0
 800402e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	4a0a      	ldr	r2, [pc, #40]	; (800405c <disk_write+0x3c>)
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	68dc      	ldr	r4, [r3, #12]
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	4a07      	ldr	r2, [pc, #28]	; (800405c <disk_write+0x3c>)
 8004040:	4413      	add	r3, r2
 8004042:	7a18      	ldrb	r0, [r3, #8]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	47a0      	blx	r4
 800404c:	4603      	mov	r3, r0
 800404e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004050:	7dfb      	ldrb	r3, [r7, #23]
}
 8004052:	4618      	mov	r0, r3
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd90      	pop	{r4, r7, pc}
 800405a:	bf00      	nop
 800405c:	2000026c 	.word	0x2000026c

08004060 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	603a      	str	r2, [r7, #0]
 800406a:	71fb      	strb	r3, [r7, #7]
 800406c:	460b      	mov	r3, r1
 800406e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <disk_ioctl+0x38>)
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	79fa      	ldrb	r2, [r7, #7]
 800407e:	4906      	ldr	r1, [pc, #24]	; (8004098 <disk_ioctl+0x38>)
 8004080:	440a      	add	r2, r1
 8004082:	7a10      	ldrb	r0, [r2, #8]
 8004084:	79b9      	ldrb	r1, [r7, #6]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	4798      	blx	r3
 800408a:	4603      	mov	r3, r0
 800408c:	73fb      	strb	r3, [r7, #15]
  return res;
 800408e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	2000026c 	.word	0x2000026c

0800409c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80040b0:	e007      	b.n	80040c2 <mem_cpy+0x26>
		*d++ = *s++;
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	1c53      	adds	r3, r2, #1
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	1c59      	adds	r1, r3, #1
 80040bc:	6179      	str	r1, [r7, #20]
 80040be:	7812      	ldrb	r2, [r2, #0]
 80040c0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	1e5a      	subs	r2, r3, #1
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f2      	bne.n	80040b2 <mem_cpy+0x16>
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80040e8:	e005      	b.n	80040f6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	617a      	str	r2, [r7, #20]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	1e5a      	subs	r2, r3, #1
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f4      	bne.n	80040ea <mem_set+0x12>
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800410c:	b480      	push	{r7}
 800410e:	b089      	sub	sp, #36	; 0x24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004124:	bf00      	nop
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	1e5a      	subs	r2, r3, #1
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00d      	beq.n	800414c <mem_cmp+0x40>
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	61fa      	str	r2, [r7, #28]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	4619      	mov	r1, r3
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	61ba      	str	r2, [r7, #24]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	1acb      	subs	r3, r1, r3
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ec      	beq.n	8004126 <mem_cmp+0x1a>
	return r;
 800414c:	697b      	ldr	r3, [r7, #20]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3724      	adds	r7, #36	; 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004162:	e002      	b.n	800416a <chk_chr+0x12>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3301      	adds	r3, #1
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <chk_chr+0x26>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	4293      	cmp	r3, r2
 800417c:	d1f2      	bne.n	8004164 <chk_chr+0xc>
	return *str;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	781b      	ldrb	r3, [r3, #0]
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004196:	2300      	movs	r3, #0
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	e03d      	b.n	800421c <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 80041a0:	4932      	ldr	r1, [pc, #200]	; (800426c <chk_lock+0xe0>)
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4613      	mov	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d02e      	beq.n	8004212 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80041b4:	492d      	ldr	r1, [pc, #180]	; (800426c <chk_lock+0xe0>)
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4613      	mov	r3, r2
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d122      	bne.n	8004216 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 80041d0:	4926      	ldr	r1, [pc, #152]	; (800426c <chk_lock+0xe0>)
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3304      	adds	r3, #4
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e8:	3308      	adds	r3, #8
 80041ea:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d112      	bne.n	8004216 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 80041f0:	491e      	ldr	r1, [pc, #120]	; (800426c <chk_lock+0xe0>)
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4613      	mov	r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	3308      	adds	r3, #8
 8004200:	881a      	ldrh	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004208:	3306      	adds	r3, #6
 800420a:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 800420c:	429a      	cmp	r2, r3
 800420e:	d102      	bne.n	8004216 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8004210:	e007      	b.n	8004222 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8004212:	2301      	movs	r3, #1
 8004214:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3301      	adds	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d9be      	bls.n	80041a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d109      	bne.n	800423c <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <chk_lock+0xa8>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d101      	bne.n	8004238 <chk_lock+0xac>
 8004234:	2300      	movs	r3, #0
 8004236:	e013      	b.n	8004260 <chk_lock+0xd4>
 8004238:	2312      	movs	r3, #18
 800423a:	e011      	b.n	8004260 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <chk_lock+0xce>
 8004242:	490a      	ldr	r1, [pc, #40]	; (800426c <chk_lock+0xe0>)
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	330a      	adds	r3, #10
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004258:	d101      	bne.n	800425e <chk_lock+0xd2>
 800425a:	2310      	movs	r3, #16
 800425c:	e000      	b.n	8004260 <chk_lock+0xd4>
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000054 	.word	0x20000054

08004270 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	e002      	b.n	8004282 <enq_lock+0x12>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3301      	adds	r3, #1
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d809      	bhi.n	800429c <enq_lock+0x2c>
 8004288:	490a      	ldr	r1, [pc, #40]	; (80042b4 <enq_lock+0x44>)
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ef      	bne.n	800427c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	bf14      	ite	ne
 80042a2:	2301      	movne	r3, #1
 80042a4:	2300      	moveq	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000054 	.word	0x20000054

080042b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e030      	b.n	800432a <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 80042c8:	495a      	ldr	r1, [pc, #360]	; (8004434 <inc_lock+0x17c>)
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4613      	mov	r3, r2
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d11f      	bne.n	8004324 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 80042e4:	4953      	ldr	r1, [pc, #332]	; (8004434 <inc_lock+0x17c>)
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4613      	mov	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	3304      	adds	r3, #4
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fc:	3308      	adds	r3, #8
 80042fe:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8004300:	429a      	cmp	r2, r3
 8004302:	d10f      	bne.n	8004324 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8004304:	494b      	ldr	r1, [pc, #300]	; (8004434 <inc_lock+0x17c>)
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4613      	mov	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	3308      	adds	r3, #8
 8004314:	881a      	ldrh	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431c:	3306      	adds	r3, #6
 800431e:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8004320:	429a      	cmp	r2, r3
 8004322:	d006      	beq.n	8004332 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3301      	adds	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d9cb      	bls.n	80042c8 <inc_lock+0x10>
 8004330:	e000      	b.n	8004334 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8004332:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d14a      	bne.n	80043d0 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e002      	b.n	8004346 <inc_lock+0x8e>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3301      	adds	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d809      	bhi.n	8004360 <inc_lock+0xa8>
 800434c:	4939      	ldr	r1, [pc, #228]	; (8004434 <inc_lock+0x17c>)
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4613      	mov	r3, r2
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ef      	bne.n	8004340 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d101      	bne.n	800436a <inc_lock+0xb2>
 8004366:	2300      	movs	r3, #0
 8004368:	e05f      	b.n	800442a <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004370:	6819      	ldr	r1, [r3, #0]
 8004372:	4830      	ldr	r0, [pc, #192]	; (8004434 <inc_lock+0x17c>)
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4613      	mov	r3, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4403      	add	r3, r0
 8004380:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004388:	3308      	adds	r3, #8
 800438a:	6819      	ldr	r1, [r3, #0]
 800438c:	4829      	ldr	r0, [pc, #164]	; (8004434 <inc_lock+0x17c>)
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4403      	add	r3, r0
 800439a:	3304      	adds	r3, #4
 800439c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a4:	3306      	adds	r3, #6
 80043a6:	8818      	ldrh	r0, [r3, #0]
 80043a8:	4922      	ldr	r1, [pc, #136]	; (8004434 <inc_lock+0x17c>)
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4613      	mov	r3, r2
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	3308      	adds	r3, #8
 80043b8:	4602      	mov	r2, r0
 80043ba:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80043bc:	491d      	ldr	r1, [pc, #116]	; (8004434 <inc_lock+0x17c>)
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4613      	mov	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	330a      	adds	r3, #10
 80043cc:	2200      	movs	r2, #0
 80043ce:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00c      	beq.n	80043f0 <inc_lock+0x138>
 80043d6:	4917      	ldr	r1, [pc, #92]	; (8004434 <inc_lock+0x17c>)
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4613      	mov	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	330a      	adds	r3, #10
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <inc_lock+0x138>
 80043ec:	2300      	movs	r3, #0
 80043ee:	e01c      	b.n	800442a <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <inc_lock+0x156>
 80043f6:	490f      	ldr	r1, [pc, #60]	; (8004434 <inc_lock+0x17c>)
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	330a      	adds	r3, #10
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	b299      	uxth	r1, r3
 800440c:	e001      	b.n	8004412 <inc_lock+0x15a>
 800440e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004412:	4808      	ldr	r0, [pc, #32]	; (8004434 <inc_lock+0x17c>)
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4403      	add	r3, r0
 8004420:	330a      	adds	r3, #10
 8004422:	460a      	mov	r2, r1
 8004424:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr
 8004434:	20000054 	.word	0x20000054

08004438 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3b01      	subs	r3, #1
 8004444:	607b      	str	r3, [r7, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d82e      	bhi.n	80044aa <dec_lock+0x72>
		n = Files[i].ctr;
 800444c:	491b      	ldr	r1, [pc, #108]	; (80044bc <dec_lock+0x84>)
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	330a      	adds	r3, #10
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004460:	89fb      	ldrh	r3, [r7, #14]
 8004462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004466:	d101      	bne.n	800446c <dec_lock+0x34>
 8004468:	2300      	movs	r3, #0
 800446a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800446c:	89fb      	ldrh	r3, [r7, #14]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <dec_lock+0x40>
 8004472:	89fb      	ldrh	r3, [r7, #14]
 8004474:	3b01      	subs	r3, #1
 8004476:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004478:	4910      	ldr	r1, [pc, #64]	; (80044bc <dec_lock+0x84>)
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	330a      	adds	r3, #10
 8004488:	89fa      	ldrh	r2, [r7, #14]
 800448a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800448c:	89fb      	ldrh	r3, [r7, #14]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d108      	bne.n	80044a4 <dec_lock+0x6c>
 8004492:	490a      	ldr	r1, [pc, #40]	; (80044bc <dec_lock+0x84>)
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	737b      	strb	r3, [r7, #13]
 80044a8:	e001      	b.n	80044ae <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80044aa:	2302      	movs	r3, #2
 80044ac:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80044ae:	7b7b      	ldrb	r3, [r7, #13]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	20000054 	.word	0x20000054

080044c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e016      	b.n	80044fc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80044ce:	4910      	ldr	r1, [pc, #64]	; (8004510 <clear_lock+0x50>)
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d108      	bne.n	80044f6 <clear_lock+0x36>
 80044e4:	490a      	ldr	r1, [pc, #40]	; (8004510 <clear_lock+0x50>)
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3301      	adds	r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d9e5      	bls.n	80044ce <clear_lock+0xe>
	}
}
 8004502:	bf00      	nop
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000054 	.word	0x20000054

08004514 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004526:	3304      	adds	r3, #4
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d047      	beq.n	80045be <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004534:	330c      	adds	r3, #12
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004540:	3301      	adds	r3, #1
 8004542:	7818      	ldrb	r0, [r3, #0]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	2301      	movs	r3, #1
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	f7ff fd69 	bl	8004020 <disk_write>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <sync_window+0x46>
			res = FR_DISK_ERR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
 8004558:	e031      	b.n	80045be <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004560:	3304      	adds	r3, #4
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	1ad2      	subs	r2, r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004578:	3318      	adds	r3, #24
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d21e      	bcs.n	80045be <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004586:	3303      	adds	r3, #3
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	e014      	b.n	80045b8 <sync_window+0xa4>
					wsect += fs->fsize;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004594:	3318      	adds	r3, #24
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4413      	add	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a4:	3301      	adds	r3, #1
 80045a6:	7818      	ldrb	r0, [r3, #0]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	2301      	movs	r3, #1
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	f7ff fd37 	bl	8004020 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d8e7      	bhi.n	800458e <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 80045be:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80045dc:	330c      	adds	r3, #12
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d01f      	beq.n	8004626 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff ff94 	bl	8004514 <sync_window>
 80045ec:	4603      	mov	r3, r0
 80045ee:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d117      	bne.n	8004626 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fc:	3301      	adds	r3, #1
 80045fe:	7818      	ldrb	r0, [r3, #0]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	2301      	movs	r3, #1
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	f7ff fceb 	bl	8003fe0 <disk_read>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d004      	beq.n	800461a <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004610:	f04f 33ff 	mov.w	r3, #4294967295
 8004614:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004620:	330c      	adds	r3, #12
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff ff6b 	bl	8004514 <sync_window>
 800463e:	4603      	mov	r3, r0
 8004640:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b00      	cmp	r3, #0
 8004646:	f040 80bd 	bne.w	80047c4 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b03      	cmp	r3, #3
 8004654:	f040 80a7 	bne.w	80047a6 <sync_fs+0x176>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465e:	3305      	adds	r3, #5
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	f040 809f 	bne.w	80047a6 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004670:	330a      	adds	r3, #10
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	2100      	movs	r1, #0
 8004678:	f7ff fd2e 	bl	80040d8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2255      	movs	r2, #85	; 0x55
 8004680:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	22aa      	movs	r2, #170	; 0xaa
 8004688:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2252      	movs	r2, #82	; 0x52
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2252      	movs	r2, #82	; 0x52
 8004696:	705a      	strb	r2, [r3, #1]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2261      	movs	r2, #97	; 0x61
 800469c:	709a      	strb	r2, [r3, #2]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2241      	movs	r2, #65	; 0x41
 80046a2:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2272      	movs	r2, #114	; 0x72
 80046a8:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2272      	movs	r2, #114	; 0x72
 80046b0:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2241      	movs	r2, #65	; 0x41
 80046b8:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2261      	movs	r2, #97	; 0x61
 80046c0:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ca:	3310      	adds	r3, #16
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046dc:	3310      	adds	r3, #16
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f4:	3310      	adds	r3, #16
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004708:	3310      	adds	r3, #16
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	0e1b      	lsrs	r3, r3, #24
 800470e:	b2da      	uxtb	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471c:	330c      	adds	r3, #12
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472e:	330c      	adds	r3, #12
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	0a1b      	lsrs	r3, r3, #8
 8004736:	b29b      	uxth	r3, r3
 8004738:	b2da      	uxtb	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004746:	330c      	adds	r3, #12
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	0c1b      	lsrs	r3, r3, #16
 800474c:	b2da      	uxtb	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475a:	330c      	adds	r3, #12
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	0e1b      	lsrs	r3, r3, #24
 8004760:	b2da      	uxtb	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476e:	331c      	adds	r3, #28
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800477a:	330c      	adds	r3, #12
 800477c:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004784:	3301      	adds	r3, #1
 8004786:	7818      	ldrb	r0, [r3, #0]
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004790:	330c      	adds	r3, #12
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	2301      	movs	r3, #1
 8004796:	f7ff fc43 	bl	8004020 <disk_write>
			fs->fsi_flag = 0;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a0:	3305      	adds	r3, #5
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ac:	3301      	adds	r3, #1
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2100      	movs	r1, #0
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fc53 	bl	8004060 <disk_ioctl>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <sync_fs+0x194>
			res = FR_DISK_ERR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	3b02      	subs	r3, #2
 80047dc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e4:	3314      	adds	r3, #20
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3b02      	subs	r3, #2
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d301      	bcc.n	80047f4 <clust2sect+0x26>
 80047f0:	2300      	movs	r3, #0
 80047f2:	e00e      	b.n	8004812 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fa:	3302      	adds	r3, #2
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	fb03 f202 	mul.w	r2, r3, r2
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800480c:	3308      	adds	r3, #8
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4413      	add	r3, r2
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d907      	bls.n	800483c <get_fat+0x20>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004832:	3314      	adds	r3, #20
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <get_fat+0x26>
		val = 1;	/* Internal error */
 800483c:	2301      	movs	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	e0ec      	b.n	8004a1c <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004842:	f04f 33ff 	mov.w	r3, #4294967295
 8004846:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b03      	cmp	r3, #3
 8004852:	f000 809e 	beq.w	8004992 <get_fat+0x176>
 8004856:	2b03      	cmp	r3, #3
 8004858:	f300 80d6 	bgt.w	8004a08 <get_fat+0x1ec>
 800485c:	2b01      	cmp	r3, #1
 800485e:	d002      	beq.n	8004866 <get_fat+0x4a>
 8004860:	2b02      	cmp	r3, #2
 8004862:	d063      	beq.n	800492c <get_fat+0x110>
 8004864:	e0d0      	b.n	8004a08 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004882:	330a      	adds	r3, #10
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	4619      	mov	r1, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	fbb3 f3f1 	udiv	r3, r3, r1
 800488e:	4413      	add	r3, r2
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fe98 	bl	80045c8 <move_window>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 80b7 	bne.w	8004a0e <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	60fa      	str	r2, [r7, #12]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048ac:	320a      	adds	r2, #10
 80048ae:	8812      	ldrh	r2, [r2, #0]
 80048b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80048b4:	fb02 f201 	mul.w	r2, r2, r1
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	5cd3      	ldrb	r3, [r2, r3]
 80048be:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ce:	330a      	adds	r3, #10
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	4619      	mov	r1, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80048da:	4413      	add	r3, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fe72 	bl	80045c8 <move_window>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f040 8093 	bne.w	8004a12 <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f2:	330a      	adds	r3, #10
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80048fe:	fb02 f201 	mul.w	r2, r2, r1
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	5cd3      	ldrb	r3, [r2, r3]
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	461a      	mov	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <get_fat+0x106>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	e002      	b.n	8004928 <get_fat+0x10c>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	617b      	str	r3, [r7, #20]
			break;
 800492a:	e077      	b.n	8004a1c <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493a:	330a      	adds	r3, #10
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	b29b      	uxth	r3, r3
 8004942:	4619      	mov	r1, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	fbb3 f3f1 	udiv	r3, r3, r1
 800494a:	4413      	add	r3, r2
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fe3a 	bl	80045c8 <move_window>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d15d      	bne.n	8004a16 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	005a      	lsls	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004964:	330a      	adds	r3, #10
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	fbb2 f1f3 	udiv	r1, r2, r3
 800496c:	fb03 f301 	mul.w	r3, r3, r1
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	3301      	adds	r3, #1
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	b21a      	sxth	r2, r3
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	b21b      	sxth	r3, r3
 8004988:	4313      	orrs	r3, r2
 800498a:	b21b      	sxth	r3, r3
 800498c:	b29b      	uxth	r3, r3
 800498e:	617b      	str	r3, [r7, #20]
			break;
 8004990:	e044      	b.n	8004a1c <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a0:	330a      	adds	r3, #10
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	089b      	lsrs	r3, r3, #2
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	4619      	mov	r1, r3
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80049b0:	4413      	add	r3, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff fe07 	bl	80045c8 <move_window>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d12c      	bne.n	8004a1a <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	009a      	lsls	r2, r3, #2
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ca:	330a      	adds	r3, #10
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	fbb2 f1f3 	udiv	r1, r2, r3
 80049d2:	fb03 f301 	mul.w	r3, r3, r1
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	3303      	adds	r3, #3
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	061a      	lsls	r2, r3, #24
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	3302      	adds	r3, #2
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	4313      	orrs	r3, r2
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	3201      	adds	r2, #1
 80049f4:	7812      	ldrb	r2, [r2, #0]
 80049f6:	0212      	lsls	r2, r2, #8
 80049f8:	4313      	orrs	r3, r2
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	7812      	ldrb	r2, [r2, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a04:	617b      	str	r3, [r7, #20]
			break;
 8004a06:	e009      	b.n	8004a1c <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 8004a08:	2301      	movs	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e006      	b.n	8004a1c <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a0e:	bf00      	nop
 8004a10:	e004      	b.n	8004a1c <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a12:	bf00      	nop
 8004a14:	e002      	b.n	8004a1c <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a16:	bf00      	nop
 8004a18:	e000      	b.n	8004a1c <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a1a:	bf00      	nop
		}
	}

	return val;
 8004a1c:	697b      	ldr	r3, [r7, #20]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b088      	sub	sp, #32
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d907      	bls.n	8004a48 <put_fat+0x22>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a3e:	3314      	adds	r3, #20
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d302      	bcc.n	8004a4e <put_fat+0x28>
		res = FR_INT_ERR;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e146      	b.n	8004cdc <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	f000 80d9 	beq.w	8004c0e <put_fat+0x1e8>
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	f300 8133 	bgt.w	8004cc8 <put_fat+0x2a2>
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d003      	beq.n	8004a6e <put_fat+0x48>
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	f000 8095 	beq.w	8004b96 <put_fat+0x170>
 8004a6c:	e12c      	b.n	8004cc8 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4413      	add	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8a:	330a      	adds	r3, #10
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a96:	4413      	add	r3, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f7ff fd94 	bl	80045c8 <move_window>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004aa4:	7ffb      	ldrb	r3, [r7, #31]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 8111 	bne.w	8004cce <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	617a      	str	r2, [r7, #20]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ab8:	320a      	adds	r2, #10
 8004aba:	8812      	ldrh	r2, [r2, #0]
 8004abc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ac0:	fb02 f201 	mul.w	r2, r2, r1
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <put_fat+0xcc>
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	b25a      	sxtb	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	b25b      	sxtb	r3, r3
 8004aea:	4313      	orrs	r3, r2
 8004aec:	b25b      	sxtb	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	e001      	b.n	8004af6 <put_fat+0xd0>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b00:	3304      	adds	r3, #4
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b14:	330a      	adds	r3, #10
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b20:	4413      	add	r3, r2
 8004b22:	4619      	mov	r1, r3
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f7ff fd4f 	bl	80045c8 <move_window>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b2e:	7ffb      	ldrb	r3, [r7, #31]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f040 80ce 	bne.w	8004cd2 <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3c:	330a      	adds	r3, #10
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b48:	fb02 f201 	mul.w	r2, r2, r1
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <put_fat+0x140>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e00e      	b.n	8004b84 <put_fat+0x15e>
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	b25b      	sxtb	r3, r3
 8004b6c:	f023 030f 	bic.w	r3, r3, #15
 8004b70:	b25a      	sxtb	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	b25b      	sxtb	r3, r3
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	b25b      	sxtb	r3, r3
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b8e:	3304      	adds	r3, #4
 8004b90:	2201      	movs	r2, #1
 8004b92:	701a      	strb	r2, [r3, #0]
			break;
 8004b94:	e0a2      	b.n	8004cdc <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba4:	330a      	adds	r3, #10
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	085b      	lsrs	r3, r3, #1
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	4619      	mov	r1, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bb4:	4413      	add	r3, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff fd05 	bl	80045c8 <move_window>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bc2:	7ffb      	ldrb	r3, [r7, #31]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f040 8086 	bne.w	8004cd6 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	005a      	lsls	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd4:	330a      	adds	r3, #10
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004bdc:	fb03 f301 	mul.w	r3, r3, r1
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c06:	3304      	adds	r3, #4
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
			break;
 8004c0c:	e066      	b.n	8004cdc <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	330a      	adds	r3, #10
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	089b      	lsrs	r3, r3, #2
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	4619      	mov	r1, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff fcc9 	bl	80045c8 <move_window>
 8004c36:	4603      	mov	r3, r0
 8004c38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c3a:	7ffb      	ldrb	r3, [r7, #31]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d14c      	bne.n	8004cda <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	009a      	lsls	r2, r3, #2
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4a:	330a      	adds	r3, #10
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004c52:	fb03 f301 	mul.w	r3, r3, r1
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	3303      	adds	r3, #3
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	061a      	lsls	r2, r3, #24
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	3302      	adds	r3, #2
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	3201      	adds	r2, #1
 8004c74:	7812      	ldrb	r2, [r2, #0]
 8004c76:	0212      	lsls	r2, r2, #8
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	7812      	ldrb	r2, [r2, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	0c1a      	lsrs	r2, r3, #16
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	3302      	adds	r3, #2
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	0e1a      	lsrs	r2, r3, #24
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	3303      	adds	r3, #3
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
			break;
 8004cc6:	e009      	b.n	8004cdc <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e006      	b.n	8004cdc <put_fat+0x2b6>
			if (res != FR_OK) break;
 8004cce:	bf00      	nop
 8004cd0:	e004      	b.n	8004cdc <put_fat+0x2b6>
			if (res != FR_OK) break;
 8004cd2:	bf00      	nop
 8004cd4:	e002      	b.n	8004cdc <put_fat+0x2b6>
			if (res != FR_OK) break;
 8004cd6:	bf00      	nop
 8004cd8:	e000      	b.n	8004cdc <put_fat+0x2b6>
			if (res != FR_OK) break;
 8004cda:	bf00      	nop
		}
	}

	return res;
 8004cdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d907      	bls.n	8004d06 <remove_chain+0x20>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfc:	3314      	adds	r3, #20
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d302      	bcc.n	8004d0c <remove_chain+0x26>
		res = FR_INT_ERR;
 8004d06:	2302      	movs	r3, #2
 8004d08:	73fb      	strb	r3, [r7, #15]
 8004d0a:	e04f      	b.n	8004dac <remove_chain+0xc6>

	} else {
		res = FR_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004d10:	e040      	b.n	8004d94 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004d12:	6839      	ldr	r1, [r7, #0]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff fd81 	bl	800481c <get_fat>
 8004d1a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d041      	beq.n	8004da6 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d102      	bne.n	8004d2e <remove_chain+0x48>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	73fb      	strb	r3, [r7, #15]
 8004d2c:	e03e      	b.n	8004dac <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d102      	bne.n	8004d3c <remove_chain+0x56>
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
 8004d3a:	e037      	b.n	8004dac <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	6839      	ldr	r1, [r7, #0]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff fe70 	bl	8004a26 <put_fat>
 8004d46:	4603      	mov	r3, r0
 8004d48:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d12c      	bne.n	8004daa <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d56:	3310      	adds	r3, #16
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d017      	beq.n	8004d90 <remove_chain+0xaa>
				fs->free_clust++;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d66:	3310      	adds	r3, #16
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d72:	3310      	adds	r3, #16
 8004d74:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d7c:	3305      	adds	r3, #5
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d8c:	3305      	adds	r3, #5
 8004d8e:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9a:	3314      	adds	r3, #20
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d3b6      	bcc.n	8004d12 <remove_chain+0x2c>
 8004da4:	e002      	b.n	8004dac <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8004da6:	bf00      	nop
 8004da8:	e000      	b.n	8004dac <remove_chain+0xc6>
			if (res != FR_OK) break;
 8004daa:	bf00      	nop
		}
	}

	return res;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b086      	sub	sp, #24
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d113      	bne.n	8004dee <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dcc:	330c      	adds	r3, #12
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <create_chain+0x32>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dde:	3314      	adds	r3, #20
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d31e      	bcc.n	8004e26 <create_chain+0x70>
 8004de8:	2301      	movs	r3, #1
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	e01b      	b.n	8004e26 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff fd13 	bl	800481c <get_fat>
 8004df6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d801      	bhi.n	8004e02 <create_chain+0x4c>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e086      	b.n	8004f10 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d101      	bne.n	8004e0e <create_chain+0x58>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	e080      	b.n	8004f10 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e14:	3314      	adds	r3, #20
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d201      	bcs.n	8004e22 <create_chain+0x6c>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	e076      	b.n	8004f10 <create_chain+0x15a>
		scl = clst;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e36:	3314      	adds	r3, #20
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d307      	bcc.n	8004e50 <create_chain+0x9a>
			ncl = 2;
 8004e40:	2302      	movs	r3, #2
 8004e42:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d901      	bls.n	8004e50 <create_chain+0x9a>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e05f      	b.n	8004f10 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004e50:	6979      	ldr	r1, [r7, #20]
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fce2 	bl	800481c <get_fat>
 8004e58:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00e      	beq.n	8004e7e <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e66:	d002      	beq.n	8004e6e <create_chain+0xb8>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <create_chain+0xbc>
			return cs;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	e04e      	b.n	8004f10 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d1d7      	bne.n	8004e2a <create_chain+0x74>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e048      	b.n	8004f10 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8004e7e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004e80:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004e84:	6979      	ldr	r1, [r7, #20]
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fdcd 	bl	8004a26 <put_fat>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <create_chain+0xf4>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d006      	beq.n	8004eaa <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff fdc0 	bl	8004a26 <put_fat>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d126      	bne.n	8004efe <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec2:	3310      	adds	r3, #16
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eca:	d020      	beq.n	8004f0e <create_chain+0x158>
			fs->free_clust--;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed2:	3310      	adds	r3, #16
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	1e5a      	subs	r2, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ede:	3310      	adds	r3, #16
 8004ee0:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee8:	3305      	adds	r3, #5
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef8:	3305      	adds	r3, #5
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e007      	b.n	8004f0e <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d102      	bne.n	8004f0a <create_chain+0x154>
 8004f04:	f04f 33ff 	mov.w	r3, #4294967295
 8004f08:	e000      	b.n	8004f0c <create_chain+0x156>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004f0e:	697b      	ldr	r3, [r7, #20]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004f28:	3304      	adds	r3, #4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3c:	330a      	adds	r3, #10
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f54:	3302      	adds	r3, #2
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1d1a      	adds	r2, r3, #4
 8004f62:	613a      	str	r2, [r7, #16]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <clmt_clust+0x5a>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e010      	b.n	8004f94 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d307      	bcc.n	8004f8a <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3304      	adds	r3, #4
 8004f86:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004f88:	e7e9      	b.n	8004f5e <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8004f8a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	4413      	add	r3, r2
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b086      	sub	sp, #24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb2:	3306      	adds	r3, #6
 8004fb4:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d00a      	beq.n	8004fde <dir_sdi+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d301      	bcc.n	8004fe2 <dir_sdi+0x44>
		return FR_INT_ERR;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0b4      	b.n	800514c <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d111      	bne.n	800500c <dir_sdi+0x6e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d108      	bne.n	800500c <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005006:	3304      	adds	r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d117      	bne.n	8005042 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501e:	3308      	adds	r3, #8
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	4293      	cmp	r3, r2
 8005028:	d301      	bcc.n	800502e <dir_sdi+0x90>
			return FR_INT_ERR;
 800502a:	2302      	movs	r3, #2
 800502c:	e08e      	b.n	800514c <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800503a:	3304      	adds	r3, #4
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	e046      	b.n	80050d0 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504e:	330a      	adds	r3, #10
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	b29b      	uxth	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005064:	3302      	adds	r3, #2
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	fb03 f302 	mul.w	r3, r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800506e:	e022      	b.n	80050b6 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6979      	ldr	r1, [r7, #20]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fbce 	bl	800481c <get_fat>
 8005080:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005088:	d101      	bne.n	800508e <dir_sdi+0xf0>
 800508a:	2301      	movs	r3, #1
 800508c:	e05e      	b.n	800514c <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d90a      	bls.n	80050aa <dir_sdi+0x10c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a0:	3314      	adds	r3, #20
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d301      	bcc.n	80050ae <dir_sdi+0x110>
				return FR_INT_ERR;
 80050aa:	2302      	movs	r3, #2
 80050ac:	e04e      	b.n	800514c <dir_sdi+0x1ae>
			idx -= ic;
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d2d8      	bcs.n	8005070 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6979      	ldr	r1, [r7, #20]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fb80 	bl	80047ce <clust2sect>
 80050ce:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d6:	330c      	adds	r3, #12
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <dir_sdi+0x148>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e032      	b.n	800514c <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f2:	330a      	adds	r3, #10
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	441a      	add	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510c:	3310      	adds	r3, #16
 800510e:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005126:	330a      	adds	r3, #10
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	b29b      	uxth	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	fbb3 f1f2 	udiv	r1, r3, r2
 8005136:	fb02 f201 	mul.w	r2, r2, r1
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	015b      	lsls	r3, r3, #5
 800513e:	18c2      	adds	r2, r0, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005146:	3314      	adds	r3, #20
 8005148:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005154:	b590      	push	{r4, r7, lr}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005164:	3306      	adds	r3, #6
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d006      	beq.n	8005182 <dir_next+0x2e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517a:	3310      	adds	r3, #16
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <dir_next+0x32>
		return FR_NO_FILE;
 8005182:	2304      	movs	r3, #4
 8005184:	e144      	b.n	8005410 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005192:	330a      	adds	r3, #10
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	b29b      	uxth	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	fbb3 f1f2 	udiv	r1, r3, r2
 80051a2:	fb02 f201 	mul.w	r2, r2, r1
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f040 810c 	bne.w	80053c6 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b4:	3310      	adds	r3, #16
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c0:	3310      	adds	r3, #16
 80051c2:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ca:	330c      	adds	r3, #12
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10e      	bne.n	80051f0 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051de:	3308      	adds	r3, #8
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4293      	cmp	r3, r2
 80051e8:	f0c0 80ed 	bcc.w	80053c6 <dir_next+0x272>
				return FR_NO_FILE;
 80051ec:	2304      	movs	r3, #4
 80051ee:	e10f      	b.n	8005410 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fc:	330a      	adds	r3, #10
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	b29b      	uxth	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	fbb3 f2f2 	udiv	r2, r3, r2
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005218:	3302      	adds	r3, #2
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	3b01      	subs	r3, #1
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 80d0 	bne.w	80053c6 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005234:	330c      	adds	r3, #12
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f7ff faee 	bl	800481c <get_fat>
 8005240:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d801      	bhi.n	800524c <dir_next+0xf8>
 8005248:	2302      	movs	r3, #2
 800524a:	e0e1      	b.n	8005410 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d101      	bne.n	8005258 <dir_next+0x104>
 8005254:	2301      	movs	r3, #1
 8005256:	e0db      	b.n	8005410 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005264:	3314      	adds	r3, #20
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	429a      	cmp	r2, r3
 800526c:	f0c0 8097 	bcc.w	800539e <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <dir_next+0x126>
 8005276:	2304      	movs	r3, #4
 8005278:	e0ca      	b.n	8005410 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005288:	330c      	adds	r3, #12
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f7ff fd91 	bl	8004db6 <create_chain>
 8005294:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <dir_next+0x14c>
 800529c:	2307      	movs	r3, #7
 800529e:	e0b7      	b.n	8005410 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <dir_next+0x156>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e0b2      	b.n	8005410 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d101      	bne.n	80052b6 <dir_next+0x162>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0ac      	b.n	8005410 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff f928 	bl	8004514 <sync_window>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <dir_next+0x17a>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0a0      	b.n	8005410 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e4:	330a      	adds	r3, #10
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	2100      	movs	r1, #0
 80052ec:	f7fe fef4 	bl	80040d8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052fe:	681c      	ldr	r4, [r3, #0]
 8005300:	6979      	ldr	r1, [r7, #20]
 8005302:	4610      	mov	r0, r2
 8005304:	f7ff fa63 	bl	80047ce <clust2sect>
 8005308:	4602      	mov	r2, r0
 800530a:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800530e:	330c      	adds	r3, #12
 8005310:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005312:	2300      	movs	r3, #0
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	e024      	b.n	8005362 <dir_next+0x20e>
						dp->fs->wflag = 1;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005324:	3304      	adds	r3, #4
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff f8ee 	bl	8004514 <sync_window>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <dir_next+0x1ee>
 800533e:	2301      	movs	r3, #1
 8005340:	e066      	b.n	8005410 <dir_next+0x2bc>
						dp->fs->winsect++;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800534e:	330c      	adds	r3, #12
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	1c59      	adds	r1, r3, #1
 8005354:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8005358:	330c      	adds	r3, #12
 800535a:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	3301      	adds	r3, #1
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800536e:	3302      	adds	r3, #2
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4293      	cmp	r3, r2
 8005378:	d3ce      	bcc.n	8005318 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005386:	330c      	adds	r3, #12
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	1a8a      	subs	r2, r1, r2
 8005396:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800539a:	330c      	adds	r3, #12
 800539c:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a4:	330c      	adds	r3, #12
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff fa0a 	bl	80047ce <clust2sect>
 80053ba:	4602      	mov	r2, r0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c2:	3310      	adds	r3, #16
 80053c4:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d0:	3306      	adds	r3, #6
 80053d2:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ea:	330a      	adds	r3, #10
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80053fa:	fb02 f201 	mul.w	r2, r2, r1
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	015b      	lsls	r3, r3, #5
 8005402:	18c2      	adds	r2, r0, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540a:	3314      	adds	r3, #20
 800540c:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	bd90      	pop	{r4, r7, pc}

08005418 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005422:	2100      	movs	r1, #0
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7ff fdba 	bl	8004f9e <dir_sdi>
 800542a:	4603      	mov	r3, r0
 800542c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d138      	bne.n	80054a6 <dir_alloc+0x8e>
		n = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005446:	3310      	adds	r3, #16
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f7ff f8bb 	bl	80045c8 <move_window>
 8005452:	4603      	mov	r3, r0
 8005454:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d123      	bne.n	80054a4 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005462:	3314      	adds	r3, #20
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2be5      	cmp	r3, #229	; 0xe5
 800546a:	d007      	beq.n	800547c <dir_alloc+0x64>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005472:	3314      	adds	r3, #20
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d107      	bne.n	800548c <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	3301      	adds	r3, #1
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d102      	bne.n	8005490 <dir_alloc+0x78>
 800548a:	e00c      	b.n	80054a6 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005490:	2101      	movs	r1, #1
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff fe5e 	bl	8005154 <dir_next>
 8005498:	4603      	mov	r3, r0
 800549a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0ca      	beq.n	8005438 <dir_alloc+0x20>
 80054a2:	e000      	b.n	80054a6 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 80054a4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d101      	bne.n	80054b0 <dir_alloc+0x98>
 80054ac:	2307      	movs	r3, #7
 80054ae:	73fb      	strb	r3, [r7, #15]
	return res;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	331b      	adds	r3, #27
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	b21a      	sxth	r2, r3
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	331a      	adds	r3, #26
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b21b      	sxth	r3, r3
 80054d6:	4313      	orrs	r3, r2
 80054d8:	b21b      	sxth	r3, r3
 80054da:	b29b      	uxth	r3, r3
 80054dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d10f      	bne.n	800550a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	3315      	adds	r3, #21
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	b21a      	sxth	r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	3314      	adds	r3, #20
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	b21b      	sxth	r3, r3
 80054fc:	4313      	orrs	r3, r2
 80054fe:	b21b      	sxth	r3, r3
 8005500:	b29b      	uxth	r3, r3
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

	return cl;
 800550a:	68fb      	ldr	r3, [r7, #12]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	331a      	adds	r3, #26
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	b29a      	uxth	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	331b      	adds	r3, #27
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	0c1a      	lsrs	r2, r3, #16
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3314      	adds	r3, #20
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	0c1b      	lsrs	r3, r3, #16
 800554a:	b29b      	uxth	r3, r3
 800554c:	0a1b      	lsrs	r3, r3, #8
 800554e:	b29a      	uxth	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3315      	adds	r3, #21
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	bc80      	pop	{r7}
 8005560:	4770      	bx	lr
	...

08005564 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005576:	1e5a      	subs	r2, r3, #1
 8005578:	4613      	mov	r3, r2
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	2301      	movs	r3, #1
 800558a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800558c:	4a2b      	ldr	r2, [pc, #172]	; (800563c <cmp_lfn+0xd8>)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4413      	add	r3, r2
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	4413      	add	r3, r2
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	b21a      	sxth	r2, r3
 80055a0:	4926      	ldr	r1, [pc, #152]	; (800563c <cmp_lfn+0xd8>)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	440b      	add	r3, r1
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	4619      	mov	r1, r3
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	440b      	add	r3, r1
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	b21b      	sxth	r3, r3
 80055b2:	4313      	orrs	r3, r2
 80055b4:	b21b      	sxth	r3, r3
 80055b6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80055b8:	89fb      	ldrh	r3, [r7, #14]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d019      	beq.n	80055f2 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80055be:	89bb      	ldrh	r3, [r7, #12]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f002 fc0f 	bl	8007de4 <ff_wtoupper>
 80055c6:	4603      	mov	r3, r0
 80055c8:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2bfe      	cmp	r3, #254	; 0xfe
 80055ce:	d80e      	bhi.n	80055ee <cmp_lfn+0x8a>
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	617a      	str	r2, [r7, #20]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	4413      	add	r3, r2
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f002 fc00 	bl	8007de4 <ff_wtoupper>
 80055e4:	4603      	mov	r3, r0
 80055e6:	461a      	mov	r2, r3
 80055e8:	89fb      	ldrh	r3, [r7, #14]
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d008      	beq.n	8005600 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80055ee:	2300      	movs	r3, #0
 80055f0:	e01f      	b.n	8005632 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80055f2:	89bb      	ldrh	r3, [r7, #12]
 80055f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d001      	beq.n	8005600 <cmp_lfn+0x9c>
 80055fc:	2300      	movs	r3, #0
 80055fe:	e018      	b.n	8005632 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3301      	adds	r3, #1
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b0c      	cmp	r3, #12
 800560a:	d9bf      	bls.n	800558c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00b      	beq.n	8005630 <cmp_lfn+0xcc>
 8005618:	89fb      	ldrh	r3, [r7, #14]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d008      	beq.n	8005630 <cmp_lfn+0xcc>
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <cmp_lfn+0xcc>
		return 0;
 800562c:	2300      	movs	r3, #0
 800562e:	e000      	b.n	8005632 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8005630:	2301      	movs	r3, #1
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	0800b4b0 	.word	0x0800b4b0

08005640 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005652:	1e5a      	subs	r2, r3, #1
 8005654:	4613      	mov	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 8005660:	2300      	movs	r3, #0
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	2301      	movs	r3, #1
 8005666:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8005668:	4a26      	ldr	r2, [pc, #152]	; (8005704 <pick_lfn+0xc4>)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4413      	add	r3, r2
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	3301      	adds	r3, #1
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	4413      	add	r3, r2
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	b21a      	sxth	r2, r3
 800567c:	4921      	ldr	r1, [pc, #132]	; (8005704 <pick_lfn+0xc4>)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	440b      	add	r3, r1
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	4619      	mov	r1, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	440b      	add	r3, r1
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b21b      	sxth	r3, r3
 800568e:	4313      	orrs	r3, r2
 8005690:	b21b      	sxth	r3, r3
 8005692:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8005694:	89fb      	ldrh	r3, [r7, #14]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00f      	beq.n	80056ba <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2bfe      	cmp	r3, #254	; 0xfe
 800569e:	d901      	bls.n	80056a4 <pick_lfn+0x64>
 80056a0:	2300      	movs	r3, #0
 80056a2:	e029      	b.n	80056f8 <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80056a4:	89bb      	ldrh	r3, [r7, #12]
 80056a6:	81fb      	strh	r3, [r7, #14]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	617a      	str	r2, [r7, #20]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	4413      	add	r3, r2
 80056b4:	89fa      	ldrh	r2, [r7, #14]
 80056b6:	801a      	strh	r2, [r3, #0]
 80056b8:	e006      	b.n	80056c8 <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80056ba:	89bb      	ldrh	r3, [r7, #12]
 80056bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d001      	beq.n	80056c8 <pick_lfn+0x88>
 80056c4:	2300      	movs	r3, #0
 80056c6:	e017      	b.n	80056f8 <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	3301      	adds	r3, #1
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b0c      	cmp	r3, #12
 80056d2:	d9c9      	bls.n	8005668 <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2bfe      	cmp	r3, #254	; 0xfe
 80056e4:	d901      	bls.n	80056ea <pick_lfn+0xaa>
 80056e6:	2300      	movs	r3, #0
 80056e8:	e006      	b.n	80056f8 <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	4413      	add	r3, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 80056f6:	2301      	movs	r3, #1
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	0800b4b0 	.word	0x0800b4b0

08005708 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005708:	b480      	push	{r7}
 800570a:	b089      	sub	sp, #36	; 0x24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	4611      	mov	r1, r2
 8005714:	461a      	mov	r2, r3
 8005716:	460b      	mov	r3, r1
 8005718:	71fb      	strb	r3, [r7, #7]
 800571a:	4613      	mov	r3, r2
 800571c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	330d      	adds	r3, #13
 8005722:	79ba      	ldrb	r2, [r7, #6]
 8005724:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	330b      	adds	r3, #11
 800572a:	220f      	movs	r2, #15
 800572c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	330c      	adds	r3, #12
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	331a      	adds	r3, #26
 800573a:	2200      	movs	r2, #0
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	331b      	adds	r3, #27
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	1e5a      	subs	r2, r3, #1
 800574a:	4613      	mov	r3, r2
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	82fb      	strh	r3, [r7, #22]
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800575e:	8afb      	ldrh	r3, [r7, #22]
 8005760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <fit_lfn+0x70>
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	61fa      	str	r2, [r7, #28]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005778:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <fit_lfn+0xe4>)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	4413      	add	r3, r2
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	4413      	add	r3, r2
 8005786:	8afa      	ldrh	r2, [r7, #22]
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	8afb      	ldrh	r3, [r7, #22]
 800578e:	0a1b      	lsrs	r3, r3, #8
 8005790:	b299      	uxth	r1, r3
 8005792:	4a16      	ldr	r2, [pc, #88]	; (80057ec <fit_lfn+0xe4>)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	4413      	add	r3, r2
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	3301      	adds	r3, #1
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	4413      	add	r3, r2
 80057a0:	b2ca      	uxtb	r2, r1
 80057a2:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80057a4:	8afb      	ldrh	r3, [r7, #22]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d102      	bne.n	80057b0 <fit_lfn+0xa8>
 80057aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057ae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	3301      	adds	r3, #1
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	d9d0      	bls.n	800575e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80057bc:	8afb      	ldrh	r3, [r7, #22]
 80057be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d006      	beq.n	80057d4 <fit_lfn+0xcc>
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <fit_lfn+0xd4>
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057da:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	79fa      	ldrb	r2, [r7, #7]
 80057e0:	701a      	strb	r2, [r3, #0]
}
 80057e2:	bf00      	nop
 80057e4:	3724      	adds	r7, #36	; 0x24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr
 80057ec:	0800b4b0 	.word	0x0800b4b0

080057f0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08c      	sub	sp, #48	; 0x30
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80057fe:	220b      	movs	r2, #11
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7fe fc4a 	bl	800409c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b05      	cmp	r3, #5
 800580c:	d92b      	bls.n	8005866 <gen_numname+0x76>
		sr = seq;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005812:	e022      	b.n	800585a <gen_numname+0x6a>
			wc = *lfn++;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	1c9a      	adds	r2, r3, #2
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800581e:	2300      	movs	r3, #0
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
 8005822:	e017      	b.n	8005854 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005a      	lsls	r2, r3, #1
 8005828:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	4413      	add	r3, r2
 8005830:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <gen_numname+0x5e>
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005848:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800584c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	3301      	adds	r3, #1
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	2b0f      	cmp	r3, #15
 8005858:	d9e4      	bls.n	8005824 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1d8      	bne.n	8005814 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005866:	2307      	movs	r3, #7
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	b2db      	uxtb	r3, r3
 8005874:	3330      	adds	r3, #48	; 0x30
 8005876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800587a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800587e:	2b39      	cmp	r3, #57	; 0x39
 8005880:	d904      	bls.n	800588c <gen_numname+0x9c>
 8005882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005886:	3307      	adds	r3, #7
 8005888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	1e5a      	subs	r2, r3, #1
 8005890:	62ba      	str	r2, [r7, #40]	; 0x28
 8005892:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005896:	4413      	add	r3, r2
 8005898:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800589c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	091b      	lsrs	r3, r3, #4
 80058a4:	603b      	str	r3, [r7, #0]
	} while (seq);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1de      	bne.n	800586a <gen_numname+0x7a>
	ns[i] = '~';
 80058ac:	f107 0214 	add.w	r2, r7, #20
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	4413      	add	r3, r2
 80058b4:	227e      	movs	r2, #126	; 0x7e
 80058b6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80058b8:	2300      	movs	r3, #0
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
 80058bc:	e002      	b.n	80058c4 <gen_numname+0xd4>
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	3301      	adds	r3, #1
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
 80058c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d205      	bcs.n	80058d8 <gen_numname+0xe8>
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	4413      	add	r3, r2
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	d1f2      	bne.n	80058be <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	2b07      	cmp	r3, #7
 80058dc:	d808      	bhi.n	80058f0 <gen_numname+0x100>
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80058e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80058e8:	4413      	add	r3, r2
 80058ea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80058ee:	e000      	b.n	80058f2 <gen_numname+0x102>
 80058f0:	2120      	movs	r1, #32
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	627a      	str	r2, [r7, #36]	; 0x24
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	460a      	mov	r2, r1
 80058fe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	2b07      	cmp	r3, #7
 8005904:	d9e8      	bls.n	80058d8 <gen_numname+0xe8>
}
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	3730      	adds	r7, #48	; 0x30
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800591c:	230b      	movs	r3, #11
 800591e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	b2da      	uxtb	r2, r3
 8005924:	0852      	lsrs	r2, r2, #1
 8005926:	01db      	lsls	r3, r3, #7
 8005928:	4313      	orrs	r3, r2
 800592a:	b2da      	uxtb	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	1c59      	adds	r1, r3, #1
 8005930:	6079      	str	r1, [r7, #4]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	4413      	add	r3, r2
 8005936:	73fb      	strb	r3, [r7, #15]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	3b01      	subs	r3, #1
 800593c:	60bb      	str	r3, [r7, #8]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1ed      	bne.n	8005920 <sum_sfn+0x10>
	return sum;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr

08005950 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005958:	2100      	movs	r1, #0
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fb1f 	bl	8004f9e <dir_sdi>
 8005960:	4603      	mov	r3, r0
 8005962:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <dir_find+0x1e>
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	e0c1      	b.n	8005af2 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800596e:	23ff      	movs	r3, #255	; 0xff
 8005970:	753b      	strb	r3, [r7, #20]
 8005972:	7d3b      	ldrb	r3, [r7, #20]
 8005974:	757b      	strb	r3, [r7, #21]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800597c:	3304      	adds	r3, #4
 800597e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005982:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005992:	3310      	adds	r3, #16
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f7fe fe15 	bl	80045c8 <move_window>
 800599e:	4603      	mov	r3, r0
 80059a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f040 809e 	bne.w	8005ae6 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b0:	3314      	adds	r3, #20
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80059bc:	7dbb      	ldrb	r3, [r7, #22]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <dir_find+0x78>
 80059c2:	2304      	movs	r3, #4
 80059c4:	75fb      	strb	r3, [r7, #23]
 80059c6:	e093      	b.n	8005af0 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	330b      	adds	r3, #11
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059d2:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80059d4:	7dbb      	ldrb	r3, [r7, #22]
 80059d6:	2be5      	cmp	r3, #229	; 0xe5
 80059d8:	d007      	beq.n	80059ea <dir_find+0x9a>
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00c      	beq.n	80059fe <dir_find+0xae>
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b0f      	cmp	r3, #15
 80059e8:	d009      	beq.n	80059fe <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80059ea:	23ff      	movs	r3, #255	; 0xff
 80059ec:	757b      	strb	r3, [r7, #21]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80059f4:	3304      	adds	r3, #4
 80059f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e068      	b.n	8005ad0 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	2b0f      	cmp	r3, #15
 8005a02:	d139      	bne.n	8005a78 <dir_find+0x128>
				if (dp->lfn) {
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d05f      	beq.n	8005ad0 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005a10:	7dbb      	ldrb	r3, [r7, #22]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d012      	beq.n	8005a40 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	7b5b      	ldrb	r3, [r3, #13]
 8005a1e:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8005a20:	7dbb      	ldrb	r3, [r7, #22]
 8005a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a26:	75bb      	strb	r3, [r7, #22]
 8005a28:	7dbb      	ldrb	r3, [r7, #22]
 8005a2a:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a32:	3306      	adds	r3, #6
 8005a34:	881a      	ldrh	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8005a40:	7dba      	ldrb	r2, [r7, #22]
 8005a42:	7d7b      	ldrb	r3, [r7, #21]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d114      	bne.n	8005a72 <dir_find+0x122>
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	330d      	adds	r3, #13
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	7d3a      	ldrb	r2, [r7, #20]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d10e      	bne.n	8005a72 <dir_find+0x122>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6939      	ldr	r1, [r7, #16]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fd80 	bl	8005564 <cmp_lfn>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <dir_find+0x122>
 8005a6a:	7d7b      	ldrb	r3, [r7, #21]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	e000      	b.n	8005a74 <dir_find+0x124>
 8005a72:	23ff      	movs	r3, #255	; 0xff
 8005a74:	757b      	strb	r3, [r7, #21]
 8005a76:	e02b      	b.n	8005ad0 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005a78:	7d7b      	ldrb	r3, [r7, #21]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d107      	bne.n	8005a8e <dir_find+0x13e>
 8005a7e:	6938      	ldr	r0, [r7, #16]
 8005a80:	f7ff ff46 	bl	8005910 <sum_sfn>
 8005a84:	4603      	mov	r3, r0
 8005a86:	461a      	mov	r2, r3
 8005a88:	7d3b      	ldrb	r3, [r7, #20]
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d02d      	beq.n	8005aea <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a94:	3318      	adds	r3, #24
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330b      	adds	r3, #11
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10c      	bne.n	8005abe <dir_find+0x16e>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aaa:	3318      	adds	r3, #24
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	220b      	movs	r2, #11
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6938      	ldr	r0, [r7, #16]
 8005ab4:	f7fe fb2a 	bl	800410c <mem_cmp>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d017      	beq.n	8005aee <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005abe:	23ff      	movs	r3, #255	; 0xff
 8005ac0:	757b      	strb	r3, [r7, #21]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005ac8:	3304      	adds	r3, #4
 8005aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ace:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff fb3e 	bl	8005154 <dir_next>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f43f af50 	beq.w	8005984 <dir_find+0x34>
 8005ae4:	e004      	b.n	8005af0 <dir_find+0x1a0>
		if (res != FR_OK) break;
 8005ae6:	bf00      	nop
 8005ae8:	e002      	b.n	8005af0 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005aea:	bf00      	nop
 8005aec:	e000      	b.n	8005af0 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005aee:	bf00      	nop

	return res;
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b086      	sub	sp, #24
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 8005b04:	23ff      	movs	r3, #255	; 0xff
 8005b06:	757b      	strb	r3, [r7, #21]
 8005b08:	23ff      	movs	r3, #255	; 0xff
 8005b0a:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8005b10:	e08f      	b.n	8005c32 <dir_read+0x138>
		res = move_window(dp->fs, dp->sect);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b20:	3310      	adds	r3, #16
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4619      	mov	r1, r3
 8005b26:	4610      	mov	r0, r2
 8005b28:	f7fe fd4e 	bl	80045c8 <move_window>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 8086 	bne.w	8005c44 <dir_read+0x14a>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3e:	3314      	adds	r3, #20
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005b4a:	7dbb      	ldrb	r3, [r7, #22]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <dir_read+0x5c>
 8005b50:	2304      	movs	r3, #4
 8005b52:	75fb      	strb	r3, [r7, #23]
 8005b54:	e07b      	b.n	8005c4e <dir_read+0x154>
		a = dir[DIR_Attr] & AM_MASK;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	330b      	adds	r3, #11
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b60:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005b62:	7dbb      	ldrb	r3, [r7, #22]
 8005b64:	2be5      	cmp	r3, #229	; 0xe5
 8005b66:	d00e      	beq.n	8005b86 <dir_read+0x8c>
 8005b68:	7dbb      	ldrb	r3, [r7, #22]
 8005b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8005b6c:	d00b      	beq.n	8005b86 <dir_read+0x8c>
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	f023 0320 	bic.w	r3, r3, #32
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	bf0c      	ite	eq
 8005b78:	2301      	moveq	r3, #1
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d002      	beq.n	8005b8c <dir_read+0x92>
			ord = 0xFF;
 8005b86:	23ff      	movs	r3, #255	; 0xff
 8005b88:	757b      	strb	r3, [r7, #21]
 8005b8a:	e049      	b.n	8005c20 <dir_read+0x126>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b0f      	cmp	r3, #15
 8005b90:	d133      	bne.n	8005bfa <dir_read+0x100>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 8005b92:	7dbb      	ldrb	r3, [r7, #22]
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d012      	beq.n	8005bc2 <dir_read+0xc8>
					sum = dir[LDIR_Chksum];
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	7b5b      	ldrb	r3, [r3, #13]
 8005ba0:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 8005ba2:	7dbb      	ldrb	r3, [r7, #22]
 8005ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba8:	75bb      	strb	r3, [r7, #22]
 8005baa:	7dbb      	ldrb	r3, [r7, #22]
 8005bac:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb4:	3306      	adds	r3, #6
 8005bb6:	881a      	ldrh	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	801a      	strh	r2, [r3, #0]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8005bc2:	7dba      	ldrb	r2, [r7, #22]
 8005bc4:	7d7b      	ldrb	r3, [r7, #21]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d114      	bne.n	8005bf4 <dir_read+0xfa>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	330d      	adds	r3, #13
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	7d3a      	ldrb	r2, [r7, #20]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d10e      	bne.n	8005bf4 <dir_read+0xfa>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6939      	ldr	r1, [r7, #16]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff fd2d 	bl	8005640 <pick_lfn>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <dir_read+0xfa>
 8005bec:	7d7b      	ldrb	r3, [r7, #21]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	e000      	b.n	8005bf6 <dir_read+0xfc>
 8005bf4:	23ff      	movs	r3, #255	; 0xff
 8005bf6:	757b      	strb	r3, [r7, #21]
 8005bf8:	e012      	b.n	8005c20 <dir_read+0x126>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 8005bfa:	7d7b      	ldrb	r3, [r7, #21]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d107      	bne.n	8005c10 <dir_read+0x116>
 8005c00:	6938      	ldr	r0, [r7, #16]
 8005c02:	f7ff fe85 	bl	8005910 <sum_sfn>
 8005c06:	4603      	mov	r3, r0
 8005c08:	461a      	mov	r2, r3
 8005c0a:	7d3b      	ldrb	r3, [r7, #20]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d01b      	beq.n	8005c48 <dir_read+0x14e>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005c16:	3304      	adds	r3, #4
 8005c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c1c:	801a      	strh	r2, [r3, #0]
				break;
 8005c1e:	e013      	b.n	8005c48 <dir_read+0x14e>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8005c20:	2100      	movs	r1, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fa96 	bl	8005154 <dir_next>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10c      	bne.n	8005c4c <dir_read+0x152>
	while (dp->sect) {
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c38:	3310      	adds	r3, #16
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f47f af68 	bne.w	8005b12 <dir_read+0x18>
 8005c42:	e004      	b.n	8005c4e <dir_read+0x154>
		if (res != FR_OK) break;
 8005c44:	bf00      	nop
 8005c46:	e002      	b.n	8005c4e <dir_read+0x154>
				break;
 8005c48:	bf00      	nop
 8005c4a:	e000      	b.n	8005c4e <dir_read+0x154>
		if (res != FR_OK) break;
 8005c4c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <dir_read+0x166>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c5a:	3310      	adds	r3, #16
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]

	return res;
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08c      	sub	sp, #48	; 0x30
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7a:	3318      	adds	r3, #24
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	623b      	str	r3, [r7, #32]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8005c8a:	f107 030c 	add.w	r3, r7, #12
 8005c8e:	220c      	movs	r2, #12
 8005c90:	6a39      	ldr	r1, [r7, #32]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe fa02 	bl	800409c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d039      	beq.n	8005d16 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	330b      	adds	r3, #11
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb8:	e013      	b.n	8005ce2 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005cba:	f107 010c 	add.w	r1, r7, #12
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	6a38      	ldr	r0, [r7, #32]
 8005cc4:	f7ff fd94 	bl	80057f0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff fe41 	bl	8005950 <dir_find>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	3301      	adds	r3, #1
 8005ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	2b63      	cmp	r3, #99	; 0x63
 8005ce6:	d9e8      	bls.n	8005cba <dir_register+0x4e>
 8005ce8:	e000      	b.n	8005cec <dir_register+0x80>
			if (res != FR_OK) break;
 8005cea:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	2b64      	cmp	r3, #100	; 0x64
 8005cf0:	d101      	bne.n	8005cf6 <dir_register+0x8a>
 8005cf2:	2307      	movs	r3, #7
 8005cf4:	e0e3      	b.n	8005ebe <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d002      	beq.n	8005d04 <dir_register+0x98>
 8005cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d02:	e0dc      	b.n	8005ebe <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	330b      	adds	r3, #11
 8005d08:	7dfa      	ldrb	r2, [r7, #23]
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d014      	beq.n	8005d4a <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 8005d20:	2300      	movs	r3, #0
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d24:	e002      	b.n	8005d2c <dir_register+0xc0>
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	3301      	adds	r3, #1
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f5      	bne.n	8005d26 <dir_register+0xba>
		nent = (n + 25) / 13;
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	3319      	adds	r3, #25
 8005d3e:	4a62      	ldr	r2, [pc, #392]	; (8005ec8 <dir_register+0x25c>)
 8005d40:	fba2 2303 	umull	r2, r3, r2, r3
 8005d44:	089b      	lsrs	r3, r3, #2
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
 8005d48:	e001      	b.n	8005d4e <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005d4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff fb61 	bl	8005418 <dir_alloc>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d160      	bne.n	8005e26 <dir_register+0x1ba>
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	3b01      	subs	r3, #1
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d05a      	beq.n	8005e26 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d76:	3306      	adds	r3, #6
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff f90b 	bl	8004f9e <dir_sdi>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d147      	bne.n	8005e26 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9c:	3318      	adds	r3, #24
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fdb5 	bl	8005910 <sum_sfn>
 8005da6:	4603      	mov	r3, r0
 8005da8:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db8:	3310      	adds	r3, #16
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f7fe fc02 	bl	80045c8 <move_window>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d128      	bne.n	8005e24 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de0:	3314      	adds	r3, #20
 8005de2:	6819      	ldr	r1, [r3, #0]
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	7efb      	ldrb	r3, [r7, #27]
 8005dea:	f7ff fc8d 	bl	8005708 <fit_lfn>
				dp->fs->wflag = 1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8005e00:	2100      	movs	r1, #0
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff f9a6 	bl	8005154 <dir_next>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d107      	bne.n	8005e26 <dir_register+0x1ba>
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1c3      	bne.n	8005daa <dir_register+0x13e>
 8005e22:	e000      	b.n	8005e26 <dir_register+0x1ba>
				if (res != FR_OK) break;
 8005e24:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d145      	bne.n	8005eba <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e3c:	3310      	adds	r3, #16
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f7fe fbc0 	bl	80045c8 <move_window>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d131      	bne.n	8005eba <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e5c:	3314      	adds	r3, #20
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2220      	movs	r2, #32
 8005e62:	2100      	movs	r1, #0
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe f937 	bl	80040d8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e70:	3314      	adds	r3, #20
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e7a:	3318      	adds	r3, #24
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	220b      	movs	r2, #11
 8005e80:	4619      	mov	r1, r3
 8005e82:	f7fe f90b 	bl	800409c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8c:	3318      	adds	r3, #24
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	330b      	adds	r3, #11
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9a:	3314      	adds	r3, #20
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	f002 0218 	and.w	r2, r2, #24
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 8005eba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3730      	adds	r7, #48	; 0x30
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	4ec4ec4f 	.word	0x4ec4ec4f

08005ecc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	3309      	adds	r3, #9
 8005eda:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee2:	3310      	adds	r3, #16
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d072      	beq.n	8005fd0 <get_fileinfo+0x104>
		dir = dp->dir;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef0:	3314      	adds	r3, #20
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60fb      	str	r3, [r7, #12]
		i = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 8005efa:	e032      	b.n	8005f62 <get_fileinfo+0x96>
			c = (TCHAR)dir[i++];
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	61fa      	str	r2, [r7, #28]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	75fb      	strb	r3, [r7, #23]
			if (c == ' ') continue;				/* Skip padding spaces */
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	d100      	bne.n	8005f12 <get_fileinfo+0x46>
 8005f10:	e027      	b.n	8005f62 <get_fileinfo+0x96>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
 8005f14:	2b05      	cmp	r3, #5
 8005f16:	d101      	bne.n	8005f1c <get_fileinfo+0x50>
 8005f18:	23e5      	movs	r3, #229	; 0xe5
 8005f1a:	75fb      	strb	r3, [r7, #23]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	2b09      	cmp	r3, #9
 8005f20:	d104      	bne.n	8005f2c <get_fileinfo+0x60>
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	61ba      	str	r2, [r7, #24]
 8005f28:	222e      	movs	r2, #46	; 0x2e
 8005f2a:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	2b40      	cmp	r3, #64	; 0x40
 8005f30:	d912      	bls.n	8005f58 <get_fileinfo+0x8c>
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
 8005f34:	2b5a      	cmp	r3, #90	; 0x5a
 8005f36:	d80f      	bhi.n	8005f58 <get_fileinfo+0x8c>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d901      	bls.n	8005f4a <get_fileinfo+0x7e>
 8005f46:	2310      	movs	r3, #16
 8005f48:	e000      	b.n	8005f4c <get_fileinfo+0x80>
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <get_fileinfo+0x8c>
				c += 0x20;			/* To lower */
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
 8005f54:	3320      	adds	r3, #32
 8005f56:	75fb      	strb	r3, [r7, #23]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	61ba      	str	r2, [r7, #24]
 8005f5e:	7dfa      	ldrb	r2, [r7, #23]
 8005f60:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	2b0a      	cmp	r3, #10
 8005f66:	d9c9      	bls.n	8005efc <get_fileinfo+0x30>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	7ada      	ldrb	r2, [r3, #11]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	331f      	adds	r3, #31
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	061a      	lsls	r2, r3, #24
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	331e      	adds	r3, #30
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	4313      	orrs	r3, r2
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	321d      	adds	r2, #29
 8005f86:	7812      	ldrb	r2, [r2, #0]
 8005f88:	0212      	lsls	r2, r2, #8
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	321c      	adds	r2, #28
 8005f90:	7812      	ldrb	r2, [r2, #0]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3319      	adds	r3, #25
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	b21a      	sxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3318      	adds	r3, #24
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	4313      	orrs	r3, r2
 8005fac:	b21b      	sxth	r3, r3
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3317      	adds	r3, #23
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	021b      	lsls	r3, r3, #8
 8005fbc:	b21a      	sxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3316      	adds	r3, #22
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b21b      	sxth	r3, r3
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	b21b      	sxth	r3, r3
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d049      	beq.n	8006072 <get_fileinfo+0x1a6>
		i = 0; p = fno->lfname;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fee:	3310      	adds	r3, #16
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d038      	beq.n	8006068 <get_fileinfo+0x19c>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d034      	beq.n	8006068 <get_fileinfo+0x19c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006004:	3304      	adds	r3, #4
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800600c:	4293      	cmp	r3, r2
 800600e:	d02b      	beq.n	8006068 <get_fileinfo+0x19c>
			lfn = dp->lfn;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800601a:	e01d      	b.n	8006058 <get_fileinfo+0x18c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800601c:	897b      	ldrh	r3, [r7, #10]
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f001 fea5 	bl	8007d70 <ff_convert>
 8006026:	4603      	mov	r3, r0
 8006028:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 800602a:	897b      	ldrh	r3, [r7, #10]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <get_fileinfo+0x16a>
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
 8006034:	e018      	b.n	8006068 <get_fileinfo+0x19c>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	3b01      	subs	r3, #1
 800603c:	69fa      	ldr	r2, [r7, #28]
 800603e:	429a      	cmp	r2, r3
 8006040:	d302      	bcc.n	8006048 <get_fileinfo+0x17c>
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
 8006046:	e00f      	b.n	8006068 <get_fileinfo+0x19c>
				p[i++] = (TCHAR)w;
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	61fa      	str	r2, [r7, #28]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	4413      	add	r3, r2
 8006052:	897a      	ldrh	r2, [r7, #10]
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	613a      	str	r2, [r7, #16]
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	817b      	strh	r3, [r7, #10]
 8006062:	897b      	ldrh	r3, [r7, #10]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1d9      	bne.n	800601c <get_fileinfo+0x150>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 8006072:	bf00      	nop
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	; 0x28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	e002      	b.n	8006094 <create_name+0x18>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	3301      	adds	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b2f      	cmp	r3, #47	; 0x2f
 800609a:	d0f8      	beq.n	800608e <create_name+0x12>
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b5c      	cmp	r3, #92	; 0x5c
 80060a2:	d0f4      	beq.n	800608e <create_name+0x12>
	lfn = dp->lfn;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	61ba      	str	r2, [r7, #24]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4413      	add	r3, r2
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80060c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060c6:	2b1f      	cmp	r3, #31
 80060c8:	d92f      	bls.n	800612a <create_name+0xae>
 80060ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060cc:	2b2f      	cmp	r3, #47	; 0x2f
 80060ce:	d02c      	beq.n	800612a <create_name+0xae>
 80060d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060d2:	2b5c      	cmp	r3, #92	; 0x5c
 80060d4:	d029      	beq.n	800612a <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2bfe      	cmp	r3, #254	; 0xfe
 80060da:	d901      	bls.n	80060e0 <create_name+0x64>
			return FR_INVALID_NAME;
 80060dc:	2306      	movs	r3, #6
 80060de:	e18b      	b.n	80063f8 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80060e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80060e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060e8:	2101      	movs	r1, #1
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fe40 	bl	8007d70 <ff_convert>
 80060f0:	4603      	mov	r3, r0
 80060f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80060f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <create_name+0x82>
 80060fa:	2306      	movs	r3, #6
 80060fc:	e17c      	b.n	80063f8 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80060fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006100:	2b7f      	cmp	r3, #127	; 0x7f
 8006102:	d809      	bhi.n	8006118 <create_name+0x9c>
 8006104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006106:	4619      	mov	r1, r3
 8006108:	488f      	ldr	r0, [pc, #572]	; (8006348 <create_name+0x2cc>)
 800610a:	f7fe f825 	bl	8004158 <chk_chr>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <create_name+0x9c>
			return FR_INVALID_NAME;
 8006114:	2306      	movs	r3, #6
 8006116:	e16f      	b.n	80063f8 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	617a      	str	r2, [r7, #20]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006126:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006128:	e7c5      	b.n	80060b6 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	441a      	add	r2, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006136:	2b1f      	cmp	r3, #31
 8006138:	d801      	bhi.n	800613e <create_name+0xc2>
 800613a:	2304      	movs	r3, #4
 800613c:	e000      	b.n	8006140 <create_name+0xc4>
 800613e:	2300      	movs	r3, #0
 8006140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006144:	e011      	b.n	800616a <create_name+0xee>
		w = lfn[di - 1];
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800614c:	3b01      	subs	r3, #1
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800615a:	2b20      	cmp	r3, #32
 800615c:	d002      	beq.n	8006164 <create_name+0xe8>
 800615e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006160:	2b2e      	cmp	r3, #46	; 0x2e
 8006162:	d106      	bne.n	8006172 <create_name+0xf6>
		di--;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	3b01      	subs	r3, #1
 8006168:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1ea      	bne.n	8006146 <create_name+0xca>
 8006170:	e000      	b.n	8006174 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8006172:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <create_name+0x102>
 800617a:	2306      	movs	r3, #6
 800617c:	e13c      	b.n	80063f8 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	2200      	movs	r2, #0
 8006188:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006190:	3318      	adds	r3, #24
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	220b      	movs	r2, #11
 8006196:	2120      	movs	r1, #32
 8006198:	4618      	mov	r0, r3
 800619a:	f7fd ff9d 	bl	80040d8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800619e:	2300      	movs	r3, #0
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	e002      	b.n	80061aa <create_name+0x12e>
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	d0f5      	beq.n	80061a4 <create_name+0x128>
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	2b2e      	cmp	r3, #46	; 0x2e
 80061c4:	d0ee      	beq.n	80061a4 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d009      	beq.n	80061e0 <create_name+0x164>
 80061cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061d0:	f043 0303 	orr.w	r3, r3, #3
 80061d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80061d8:	e002      	b.n	80061e0 <create_name+0x164>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	3b01      	subs	r3, #1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <create_name+0x17e>
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80061ec:	3b01      	subs	r3, #1
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	2b2e      	cmp	r3, #46	; 0x2e
 80061f8:	d1ef      	bne.n	80061da <create_name+0x15e>

	b = i = 0; ni = 8;
 80061fa:	2300      	movs	r3, #0
 80061fc:	623b      	str	r3, [r7, #32]
 80061fe:	2300      	movs	r3, #0
 8006200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006204:	2308      	movs	r3, #8
 8006206:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	61ba      	str	r2, [r7, #24]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006218:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 8092 	beq.w	8006344 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006222:	2b20      	cmp	r3, #32
 8006224:	d006      	beq.n	8006234 <create_name+0x1b8>
 8006226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006228:	2b2e      	cmp	r3, #46	; 0x2e
 800622a:	d10a      	bne.n	8006242 <create_name+0x1c6>
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	429a      	cmp	r2, r3
 8006232:	d006      	beq.n	8006242 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 8006234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006238:	f043 0303 	orr.w	r3, r3, #3
 800623c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006240:	e07f      	b.n	8006342 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	429a      	cmp	r2, r3
 8006248:	d203      	bcs.n	8006252 <create_name+0x1d6>
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	429a      	cmp	r2, r3
 8006250:	d123      	bne.n	800629a <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	2b0b      	cmp	r3, #11
 8006256:	d106      	bne.n	8006266 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 8006258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800625c:	f043 0303 	orr.w	r3, r3, #3
 8006260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006264:	e077      	b.n	8006356 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	429a      	cmp	r2, r3
 800626c:	d005      	beq.n	800627a <create_name+0x1fe>
 800626e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006272:	f043 0303 	orr.w	r3, r3, #3
 8006276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	429a      	cmp	r2, r3
 8006280:	d868      	bhi.n	8006354 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	2308      	movs	r3, #8
 8006288:	623b      	str	r3, [r7, #32]
 800628a:	230b      	movs	r3, #11
 800628c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800628e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006298:	e053      	b.n	8006342 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800629a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800629c:	2b7f      	cmp	r3, #127	; 0x7f
 800629e:	d914      	bls.n	80062ca <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80062a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 fd63 	bl	8007d70 <ff_convert>
 80062aa:	4603      	mov	r3, r0
 80062ac:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80062ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d004      	beq.n	80062be <create_name+0x242>
 80062b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062b6:	3b80      	subs	r3, #128	; 0x80
 80062b8:	4a24      	ldr	r2, [pc, #144]	; (800634c <create_name+0x2d0>)
 80062ba:	5cd3      	ldrb	r3, [r2, r3]
 80062bc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80062be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062c2:	f043 0302 	orr.w	r3, r3, #2
 80062c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80062ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <create_name+0x264>
 80062d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062d2:	4619      	mov	r1, r3
 80062d4:	481e      	ldr	r0, [pc, #120]	; (8006350 <create_name+0x2d4>)
 80062d6:	f7fd ff3f 	bl	8004158 <chk_chr>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80062e0:	235f      	movs	r3, #95	; 0x5f
 80062e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062e8:	f043 0303 	orr.w	r3, r3, #3
 80062ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062f0:	e01b      	b.n	800632a <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80062f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d909      	bls.n	800630c <create_name+0x290>
 80062f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062fa:	2b5a      	cmp	r3, #90	; 0x5a
 80062fc:	d806      	bhi.n	800630c <create_name+0x290>
					b |= 2;
 80062fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006302:	f043 0302 	orr.w	r3, r3, #2
 8006306:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800630a:	e00e      	b.n	800632a <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800630c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800630e:	2b60      	cmp	r3, #96	; 0x60
 8006310:	d90b      	bls.n	800632a <create_name+0x2ae>
 8006312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006314:	2b7a      	cmp	r3, #122	; 0x7a
 8006316:	d808      	bhi.n	800632a <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8006318:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800631c:	f043 0301 	orr.w	r3, r3, #1
 8006320:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006326:	3b20      	subs	r3, #32
 8006328:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006330:	3318      	adds	r3, #24
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	1c59      	adds	r1, r3, #1
 8006338:	6239      	str	r1, [r7, #32]
 800633a:	4413      	add	r3, r2
 800633c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006342:	e761      	b.n	8006208 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8006344:	bf00      	nop
 8006346:	e006      	b.n	8006356 <create_name+0x2da>
 8006348:	0800b1e8 	.word	0x0800b1e8
 800634c:	0800b430 	.word	0x0800b430
 8006350:	0800b1f4 	.word	0x0800b1f4
			if (si > di) break;			/* No extension */
 8006354:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635c:	3318      	adds	r3, #24
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2be5      	cmp	r3, #229	; 0xe5
 8006364:	d106      	bne.n	8006374 <create_name+0x2f8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636c:	3318      	adds	r3, #24
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2205      	movs	r2, #5
 8006372:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	2b08      	cmp	r3, #8
 8006378:	d104      	bne.n	8006384 <create_name+0x308>
 800637a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006384:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006388:	f003 030c 	and.w	r3, r3, #12
 800638c:	2b0c      	cmp	r3, #12
 800638e:	d005      	beq.n	800639c <create_name+0x320>
 8006390:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	2b03      	cmp	r3, #3
 800639a:	d105      	bne.n	80063a8 <create_name+0x32c>
		cf |= NS_LFN;
 800639c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063a0:	f043 0302 	orr.w	r3, r3, #2
 80063a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80063a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d117      	bne.n	80063e4 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80063b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d105      	bne.n	80063cc <create_name+0x350>
 80063c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063c4:	f043 0310 	orr.w	r3, r3, #16
 80063c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80063cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063d0:	f003 030c 	and.w	r3, r3, #12
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	d105      	bne.n	80063e4 <create_name+0x368>
 80063d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063dc:	f043 0308 	orr.w	r3, r3, #8
 80063e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ea:	3318      	adds	r3, #24
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330b      	adds	r3, #11
 80063f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80063f4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80063f6:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3728      	adds	r7, #40	; 0x28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b2f      	cmp	r3, #47	; 0x2f
 8006410:	d003      	beq.n	800641a <follow_path+0x1a>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b5c      	cmp	r3, #92	; 0x5c
 8006418:	d102      	bne.n	8006420 <follow_path+0x20>
		path++;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	3301      	adds	r3, #1
 800641e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006426:	3308      	adds	r3, #8
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b1f      	cmp	r3, #31
 8006432:	d80c      	bhi.n	800644e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006434:	2100      	movs	r1, #0
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fe fdb1 	bl	8004f9e <dir_sdi>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006446:	3314      	adds	r3, #20
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e04c      	b.n	80064e8 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800644e:	463b      	mov	r3, r7
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff fe12 	bl	800607c <create_name>
 8006458:	4603      	mov	r3, r0
 800645a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d13d      	bne.n	80064de <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff fa74 	bl	8005950 <dir_find>
 8006468:	4603      	mov	r3, r0
 800646a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006472:	3318      	adds	r3, #24
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	7adb      	ldrb	r3, [r3, #11]
 8006478:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b04      	cmp	r3, #4
 8006484:	d12d      	bne.n	80064e2 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006486:	7bbb      	ldrb	r3, [r7, #14]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d128      	bne.n	80064e2 <follow_path+0xe2>
 8006490:	2305      	movs	r3, #5
 8006492:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006494:	e025      	b.n	80064e2 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d122      	bne.n	80064e6 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a6:	3314      	adds	r3, #20
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	330b      	adds	r3, #11
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d102      	bne.n	80064c0 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 80064ba:	2305      	movs	r3, #5
 80064bc:	73fb      	strb	r3, [r7, #15]
 80064be:	e013      	b.n	80064e8 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68b9      	ldr	r1, [r7, #8]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fff5 	bl	80054ba <ld_clust>
 80064d0:	4602      	mov	r2, r0
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d8:	3308      	adds	r3, #8
 80064da:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80064dc:	e7b7      	b.n	800644e <follow_path+0x4e>
			if (res != FR_OK) break;
 80064de:	bf00      	nop
 80064e0:	e002      	b.n	80064e8 <follow_path+0xe8>
				break;
 80064e2:	bf00      	nop
 80064e4:	e000      	b.n	80064e8 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80064e6:	bf00      	nop
		}
	}

	return res;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b087      	sub	sp, #28
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80064fa:	f04f 33ff 	mov.w	r3, #4294967295
 80064fe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d031      	beq.n	800656c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e002      	b.n	8006516 <get_ldnumber+0x24>
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	3301      	adds	r3, #1
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b1f      	cmp	r3, #31
 800651c:	d903      	bls.n	8006526 <get_ldnumber+0x34>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b3a      	cmp	r3, #58	; 0x3a
 8006524:	d1f4      	bne.n	8006510 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b3a      	cmp	r3, #58	; 0x3a
 800652c:	d11c      	bne.n	8006568 <get_ldnumber+0x76>
			tp = *path;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	60fa      	str	r2, [r7, #12]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	3b30      	subs	r3, #48	; 0x30
 800653e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b09      	cmp	r3, #9
 8006544:	d80e      	bhi.n	8006564 <get_ldnumber+0x72>
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	429a      	cmp	r2, r3
 800654c:	d10a      	bne.n	8006564 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d107      	bne.n	8006564 <get_ldnumber+0x72>
					vol = (int)i;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	3301      	adds	r3, #1
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	e002      	b.n	800656e <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006568:	2300      	movs	r3, #0
 800656a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800656c:	693b      	ldr	r3, [r7, #16]
}
 800656e:	4618      	mov	r0, r3
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr

08006578 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006588:	3304      	adds	r3, #4
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006594:	330c      	adds	r3, #12
 8006596:	f04f 32ff 	mov.w	r2, #4294967295
 800659a:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fe f812 	bl	80045c8 <move_window>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <check_fs+0x36>
		return 3;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e04a      	b.n	8006644 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065b4:	3301      	adds	r3, #1
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	b21a      	sxth	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80065c2:	b21b      	sxth	r3, r3
 80065c4:	4313      	orrs	r3, r2
 80065c6:	b21b      	sxth	r3, r3
 80065c8:	4a20      	ldr	r2, [pc, #128]	; (800664c <check_fs+0xd4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d001      	beq.n	80065d2 <check_fs+0x5a>
		return 2;
 80065ce:	2302      	movs	r3, #2
 80065d0:	e038      	b.n	8006644 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3336      	adds	r3, #54	; 0x36
 80065d6:	3303      	adds	r3, #3
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	061a      	lsls	r2, r3, #24
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3336      	adds	r3, #54	; 0x36
 80065e0:	3302      	adds	r3, #2
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	4313      	orrs	r3, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	3236      	adds	r2, #54	; 0x36
 80065ec:	3201      	adds	r2, #1
 80065ee:	7812      	ldrb	r2, [r2, #0]
 80065f0:	0212      	lsls	r2, r2, #8
 80065f2:	4313      	orrs	r3, r2
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006600:	4a13      	ldr	r2, [pc, #76]	; (8006650 <check_fs+0xd8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d101      	bne.n	800660a <check_fs+0x92>
		return 0;
 8006606:	2300      	movs	r3, #0
 8006608:	e01c      	b.n	8006644 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3352      	adds	r3, #82	; 0x52
 800660e:	3303      	adds	r3, #3
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	061a      	lsls	r2, r3, #24
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3352      	adds	r3, #82	; 0x52
 8006618:	3302      	adds	r3, #2
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	4313      	orrs	r3, r2
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	3252      	adds	r2, #82	; 0x52
 8006624:	3201      	adds	r2, #1
 8006626:	7812      	ldrb	r2, [r2, #0]
 8006628:	0212      	lsls	r2, r2, #8
 800662a:	4313      	orrs	r3, r2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006632:	4313      	orrs	r3, r2
 8006634:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006638:	4a05      	ldr	r2, [pc, #20]	; (8006650 <check_fs+0xd8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <check_fs+0xca>
		return 0;
 800663e:	2300      	movs	r3, #0
 8006640:	e000      	b.n	8006644 <check_fs+0xcc>

	return 1;
 8006642:	2301      	movs	r3, #1
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	ffffaa55 	.word	0xffffaa55
 8006650:	00544146 	.word	0x00544146

08006654 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b096      	sub	sp, #88	; 0x58
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006668:	68b8      	ldr	r0, [r7, #8]
 800666a:	f7ff ff42 	bl	80064f2 <get_ldnumber>
 800666e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006672:	2b00      	cmp	r3, #0
 8006674:	da01      	bge.n	800667a <find_volume+0x26>
 8006676:	230b      	movs	r3, #11
 8006678:	e33c      	b.n	8006cf4 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800667a:	4ab3      	ldr	r2, [pc, #716]	; (8006948 <find_volume+0x2f4>)
 800667c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006682:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <find_volume+0x3a>
 800668a:	230c      	movs	r3, #12
 800668c:	e332      	b.n	8006cf4 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006692:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01d      	beq.n	80066dc <find_volume+0x88>
		stat = disk_status(fs->drv);
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a6:	3301      	adds	r3, #1
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fd fc58 	bl	8003f60 <disk_status>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80066b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10c      	bne.n	80066dc <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d007      	beq.n	80066d8 <find_volume+0x84>
 80066c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80066d4:	230a      	movs	r3, #10
 80066d6:	e30d      	b.n	8006cf4 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 80066d8:	2300      	movs	r3, #0
 80066da:	e30b      	b.n	8006cf4 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e2:	2200      	movs	r2, #0
 80066e4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80066e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f0:	3301      	adds	r3, #1
 80066f2:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066fa:	3301      	adds	r3, #1
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fd fc48 	bl	8003f94 <disk_initialize>
 8006704:	4603      	mov	r3, r0
 8006706:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800670a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006716:	2303      	movs	r3, #3
 8006718:	e2ec      	b.n	8006cf4 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <find_volume+0xdc>
 8006720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800672c:	230a      	movs	r3, #10
 800672e:	e2e1      	b.n	8006cf4 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006736:	3301      	adds	r3, #1
 8006738:	7818      	ldrb	r0, [r3, #0]
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006740:	330a      	adds	r3, #10
 8006742:	461a      	mov	r2, r3
 8006744:	2102      	movs	r1, #2
 8006746:	f7fd fc8b 	bl	8004060 <disk_ioctl>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10f      	bne.n	8006770 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006756:	330a      	adds	r3, #10
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800675e:	d307      	bcc.n	8006770 <find_volume+0x11c>
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006766:	330a      	adds	r3, #10
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676e:	d901      	bls.n	8006774 <find_volume+0x120>
 8006770:	2301      	movs	r3, #1
 8006772:	e2bf      	b.n	8006cf4 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006778:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800677a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800677c:	f7ff fefc 	bl	8006578 <check_fs>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006786:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800678a:	2b01      	cmp	r3, #1
 800678c:	d155      	bne.n	800683a <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800678e:	2300      	movs	r3, #0
 8006790:	643b      	str	r3, [r7, #64]	; 0x40
 8006792:	e029      	b.n	80067e8 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800679e:	4413      	add	r3, r2
 80067a0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	3304      	adds	r3, #4
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d012      	beq.n	80067d2 <find_volume+0x17e>
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	330b      	adds	r3, #11
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	061a      	lsls	r2, r3, #24
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	330a      	adds	r3, #10
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	041b      	lsls	r3, r3, #16
 80067bc:	4313      	orrs	r3, r2
 80067be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c0:	3209      	adds	r2, #9
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	0212      	lsls	r2, r2, #8
 80067c6:	4313      	orrs	r3, r2
 80067c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ca:	3208      	adds	r2, #8
 80067cc:	7812      	ldrb	r2, [r2, #0]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	e000      	b.n	80067d4 <find_volume+0x180>
 80067d2:	2200      	movs	r2, #0
 80067d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80067dc:	440b      	add	r3, r1
 80067de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80067e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e4:	3301      	adds	r3, #1
 80067e6:	643b      	str	r3, [r7, #64]	; 0x40
 80067e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d9d2      	bls.n	8006794 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80067ee:	2300      	movs	r3, #0
 80067f0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80067f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <find_volume+0x1aa>
 80067f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067fa:	3b01      	subs	r3, #1
 80067fc:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80067fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006806:	4413      	add	r3, r2
 8006808:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800680c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800680e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <find_volume+0x1cc>
 8006814:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006816:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006818:	f7ff feae 	bl	8006578 <check_fs>
 800681c:	4603      	mov	r3, r0
 800681e:	e000      	b.n	8006822 <find_volume+0x1ce>
 8006820:	2302      	movs	r3, #2
 8006822:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006826:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <find_volume+0x1e6>
 800682e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006830:	3301      	adds	r3, #1
 8006832:	643b      	str	r3, [r7, #64]	; 0x40
 8006834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006836:	2b03      	cmp	r3, #3
 8006838:	d9e1      	bls.n	80067fe <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800683a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800683e:	2b03      	cmp	r3, #3
 8006840:	d101      	bne.n	8006846 <find_volume+0x1f2>
 8006842:	2301      	movs	r3, #1
 8006844:	e256      	b.n	8006cf4 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <find_volume+0x1fe>
 800684e:	230d      	movs	r3, #13
 8006850:	e250      	b.n	8006cf4 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	7b1b      	ldrb	r3, [r3, #12]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	b21a      	sxth	r2, r3
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	7adb      	ldrb	r3, [r3, #11]
 800685e:	b21b      	sxth	r3, r3
 8006860:	4313      	orrs	r3, r2
 8006862:	b21a      	sxth	r2, r3
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686a:	330a      	adds	r3, #10
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b21b      	sxth	r3, r3
 8006870:	429a      	cmp	r2, r3
 8006872:	d001      	beq.n	8006878 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8006874:	230d      	movs	r3, #13
 8006876:	e23d      	b.n	8006cf4 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	7ddb      	ldrb	r3, [r3, #23]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	b21a      	sxth	r2, r3
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	7d9b      	ldrb	r3, [r3, #22]
 8006884:	b21b      	sxth	r3, r3
 8006886:	4313      	orrs	r3, r2
 8006888:	b21b      	sxth	r3, r3
 800688a:	b29b      	uxth	r3, r3
 800688c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800688e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d112      	bne.n	80068ba <find_volume+0x266>
 8006894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006896:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800689a:	061a      	lsls	r2, r3, #24
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	4313      	orrs	r3, r2
 80068a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068a8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80068ac:	0212      	lsls	r2, r2, #8
 80068ae:	4313      	orrs	r3, r2
 80068b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068b2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80068b6:	4313      	orrs	r3, r2
 80068b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c0:	3318      	adds	r3, #24
 80068c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068c4:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	7c1a      	ldrb	r2, [r3, #16]
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d0:	3303      	adds	r3, #3
 80068d2:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068da:	3303      	adds	r3, #3
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d008      	beq.n	80068f4 <find_volume+0x2a0>
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e8:	3303      	adds	r3, #3
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d001      	beq.n	80068f4 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80068f0:	230d      	movs	r3, #13
 80068f2:	e1ff      	b.n	8006cf4 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fa:	3303      	adds	r3, #3
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006902:	fb02 f303 	mul.w	r3, r2, r3
 8006906:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	7b5a      	ldrb	r2, [r3, #13]
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006912:	3302      	adds	r3, #2
 8006914:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800691c:	3302      	adds	r3, #2
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00e      	beq.n	8006942 <find_volume+0x2ee>
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692a:	3302      	adds	r3, #2
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006936:	3302      	adds	r3, #2
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	3b01      	subs	r3, #1
 800693c:	4013      	ands	r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8006942:	230d      	movs	r3, #13
 8006944:	e1d6      	b.n	8006cf4 <find_volume+0x6a0>
 8006946:	bf00      	nop
 8006948:	2000004c 	.word	0x2000004c

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	7c9b      	ldrb	r3, [r3, #18]
 8006950:	021b      	lsls	r3, r3, #8
 8006952:	b21a      	sxth	r2, r3
 8006954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006956:	7c5b      	ldrb	r3, [r3, #17]
 8006958:	b21b      	sxth	r3, r3
 800695a:	4313      	orrs	r3, r2
 800695c:	b21b      	sxth	r3, r3
 800695e:	b29a      	uxth	r2, r3
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006966:	3308      	adds	r3, #8
 8006968:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006970:	3308      	adds	r3, #8
 8006972:	881a      	ldrh	r2, [r3, #0]
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697a:	330a      	adds	r3, #10
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	b29b      	uxth	r3, r3
 8006982:	fbb2 f1f3 	udiv	r1, r2, r3
 8006986:	fb03 f301 	mul.w	r3, r3, r1
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8006992:	230d      	movs	r3, #13
 8006994:	e1ae      	b.n	8006cf4 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	7d1b      	ldrb	r3, [r3, #20]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	b21a      	sxth	r2, r3
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	7cdb      	ldrb	r3, [r3, #19]
 80069a2:	b21b      	sxth	r3, r3
 80069a4:	4313      	orrs	r3, r2
 80069a6:	b21b      	sxth	r3, r3
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80069ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d112      	bne.n	80069d8 <find_volume+0x384>
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80069b8:	061a      	lsls	r2, r3, #24
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80069c0:	041b      	lsls	r3, r3, #16
 80069c2:	4313      	orrs	r3, r2
 80069c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069c6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80069ca:	0212      	lsls	r2, r2, #8
 80069cc:	4313      	orrs	r3, r2
 80069ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069d0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	7bdb      	ldrb	r3, [r3, #15]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	b21a      	sxth	r2, r3
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	7b9b      	ldrb	r3, [r3, #14]
 80069e4:	b21b      	sxth	r3, r3
 80069e6:	4313      	orrs	r3, r2
 80069e8:	b21b      	sxth	r3, r3
 80069ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80069ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <find_volume+0x3a2>
 80069f2:	230d      	movs	r3, #13
 80069f4:	e17e      	b.n	8006cf4 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80069f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fa:	441a      	add	r2, r3
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a02:	3308      	adds	r3, #8
 8006a04:	8819      	ldrh	r1, [r3, #0]
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0c:	330a      	adds	r3, #10
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d201      	bcs.n	8006a2a <find_volume+0x3d6>
 8006a26:	230d      	movs	r3, #13
 8006a28:	e164      	b.n	8006cf4 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a36:	3302      	adds	r3, #2
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <find_volume+0x3f6>
 8006a46:	230d      	movs	r3, #13
 8006a48:	e154      	b.n	8006cf4 <find_volume+0x6a0>
	fmt = FS_FAT12;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d902      	bls.n	8006a60 <find_volume+0x40c>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d902      	bls.n	8006a70 <find_volume+0x41c>
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	1c9a      	adds	r2, r3, #2
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7a:	3314      	adds	r3, #20
 8006a7c:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a84:	331c      	adds	r3, #28
 8006a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a88:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006a8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8e:	441a      	add	r2, r3
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a96:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8006a98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	441a      	add	r2, r3
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8006aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d127      	bne.n	8006b00 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <find_volume+0x46e>
 8006abe:	230d      	movs	r3, #13
 8006ac0:	e118      	b.n	8006cf4 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ac8:	061a      	lsls	r2, r3, #24
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ad6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006ada:	0212      	lsls	r2, r2, #8
 8006adc:	4313      	orrs	r3, r2
 8006ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ae0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006aec:	3304      	adds	r3, #4
 8006aee:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af6:	3314      	adds	r3, #20
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	647b      	str	r3, [r7, #68]	; 0x44
 8006afe:	e030      	b.n	8006b62 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b06:	3308      	adds	r3, #8
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <find_volume+0x4be>
 8006b0e:	230d      	movs	r3, #13
 8006b10:	e0f0      	b.n	8006cf4 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1c:	441a      	add	r2, r3
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006b24:	3304      	adds	r3, #4
 8006b26:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d106      	bne.n	8006b3e <find_volume+0x4ea>
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b36:	3314      	adds	r3, #20
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	e010      	b.n	8006b60 <find_volume+0x50c>
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b44:	3314      	adds	r3, #20
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	4413      	add	r3, r2
 8006b4e:	085a      	lsrs	r2, r3, #1
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b56:	3314      	adds	r3, #20
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006b60:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b68:	3318      	adds	r3, #24
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b72:	330a      	adds	r3, #10
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b7a:	440b      	add	r3, r1
 8006b7c:	1e59      	subs	r1, r3, #1
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b84:	330a      	adds	r3, #10
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d201      	bcs.n	8006b94 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8006b90:	230d      	movs	r3, #13
 8006b92:	e0af      	b.n	8006cf4 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b9a:	3310      	adds	r3, #16
 8006b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba8:	3310      	adds	r3, #16
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb2:	330c      	adds	r3, #12
 8006bb4:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bbc:	3305      	adds	r3, #5
 8006bbe:	2280      	movs	r2, #128	; 0x80
 8006bc0:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006bc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d17d      	bne.n	8006cc6 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006bd0:	021b      	lsls	r3, r3, #8
 8006bd2:	b21a      	sxth	r2, r3
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bda:	b21b      	sxth	r3, r3
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	b21b      	sxth	r3, r3
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d170      	bne.n	8006cc6 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be6:	3301      	adds	r3, #1
 8006be8:	4619      	mov	r1, r3
 8006bea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bec:	f7fd fcec 	bl	80045c8 <move_window>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d167      	bne.n	8006cc6 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bfc:	3305      	adds	r3, #5
 8006bfe:	2200      	movs	r2, #0
 8006c00:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	b21a      	sxth	r2, r3
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006c12:	b21b      	sxth	r3, r3
 8006c14:	4313      	orrs	r3, r2
 8006c16:	b21b      	sxth	r3, r3
 8006c18:	4a38      	ldr	r2, [pc, #224]	; (8006cfc <find_volume+0x6a8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d153      	bne.n	8006cc6 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	78db      	ldrb	r3, [r3, #3]
 8006c22:	061a      	lsls	r2, r3, #24
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	789b      	ldrb	r3, [r3, #2]
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c2e:	7852      	ldrb	r2, [r2, #1]
 8006c30:	0212      	lsls	r2, r2, #8
 8006c32:	4313      	orrs	r3, r2
 8006c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c36:	7812      	ldrb	r2, [r2, #0]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	4a31      	ldr	r2, [pc, #196]	; (8006d00 <find_volume+0x6ac>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d142      	bne.n	8006cc6 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006c46:	061a      	lsls	r2, r3, #24
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006c4e:	041b      	lsls	r3, r3, #16
 8006c50:	4313      	orrs	r3, r2
 8006c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c54:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006c58:	0212      	lsls	r2, r2, #8
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c5e:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006c62:	4313      	orrs	r3, r2
 8006c64:	4a27      	ldr	r2, [pc, #156]	; (8006d04 <find_volume+0x6b0>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d12d      	bne.n	8006cc6 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006c70:	061a      	lsls	r2, r3, #24
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006c78:	041b      	lsls	r3, r3, #16
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c7e:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006c82:	0212      	lsls	r2, r2, #8
 8006c84:	4313      	orrs	r3, r2
 8006c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c88:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c94:	3310      	adds	r3, #16
 8006c96:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006c9e:	061a      	lsls	r2, r3, #24
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006ca6:	041b      	lsls	r3, r3, #16
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cac:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006cb0:	0212      	lsls	r2, r2, #8
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cb6:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ccc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006cd0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	; (8006d08 <find_volume+0x6b4>)
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <find_volume+0x6b4>)
 8006cdc:	801a      	strh	r2, [r3, #0]
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <find_volume+0x6b4>)
 8006ce0:	881a      	ldrh	r2, [r3, #0]
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce8:	3306      	adds	r3, #6
 8006cea:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006cec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cee:	f7fd fbe7 	bl	80044c0 <clear_lock>
#endif

	return FR_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3758      	adds	r7, #88	; 0x58
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	ffffaa55 	.word	0xffffaa55
 8006d00:	41615252 	.word	0x41615252
 8006d04:	61417272 	.word	0x61417272
 8006d08:	20000050 	.word	0x20000050

08006d0c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d02d      	beq.n	8006d7a <validate+0x6e>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d027      	beq.n	8006d7a <validate+0x6e>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01e      	beq.n	8006d7a <validate+0x6e>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d48:	3306      	adds	r3, #6
 8006d4a:	881a      	ldrh	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d52:	3304      	adds	r3, #4
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d10f      	bne.n	8006d7a <validate+0x6e>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d66:	3301      	adds	r3, #1
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fd f8f8 	bl	8003f60 <disk_status>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <validate+0x72>
		return FR_INVALID_OBJECT;
 8006d7a:	2309      	movs	r3, #9
 8006d7c:	e000      	b.n	8006d80 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	4613      	mov	r3, r2
 8006d94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006d9a:	f107 0310 	add.w	r3, r7, #16
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fba7 	bl	80064f2 <get_ldnumber>
 8006da4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	da01      	bge.n	8006db0 <f_mount+0x28>
 8006dac:	230b      	movs	r3, #11
 8006dae:	e02f      	b.n	8006e10 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006db0:	4a19      	ldr	r2, [pc, #100]	; (8006e18 <f_mount+0x90>)
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d007      	beq.n	8006dd0 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006dc0:	69b8      	ldr	r0, [r7, #24]
 8006dc2:	f7fd fb7d 	bl	80044c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d004      	beq.n	8006de0 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	490d      	ldr	r1, [pc, #52]	; (8006e18 <f_mount+0x90>)
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <f_mount+0x6e>
 8006df0:	79fb      	ldrb	r3, [r7, #7]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d001      	beq.n	8006dfa <f_mount+0x72>
 8006df6:	2300      	movs	r3, #0
 8006df8:	e00a      	b.n	8006e10 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006dfa:	f107 0108 	add.w	r1, r7, #8
 8006dfe:	f107 030c 	add.w	r3, r7, #12
 8006e02:	2200      	movs	r2, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff fc25 	bl	8006654 <find_volume>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	2000004c 	.word	0x2000004c

08006e1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	f107 0318 	add.w	r3, r7, #24
 8006e2a:	3b0c      	subs	r3, #12
 8006e2c:	6018      	str	r0, [r3, #0]
 8006e2e:	f107 0318 	add.w	r3, r7, #24
 8006e32:	3b10      	subs	r3, #16
 8006e34:	6019      	str	r1, [r3, #0]
 8006e36:	f107 0318 	add.w	r3, r7, #24
 8006e3a:	3b11      	subs	r3, #17
 8006e3c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006e3e:	f107 0318 	add.w	r3, r7, #24
 8006e42:	3b0c      	subs	r3, #12
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <f_open+0x32>
 8006e4a:	2309      	movs	r3, #9
 8006e4c:	e319      	b.n	8007482 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 8006e4e:	f107 0318 	add.w	r3, r7, #24
 8006e52:	3b0c      	subs	r3, #12
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006e5e:	f107 0318 	add.w	r3, r7, #24
 8006e62:	3b11      	subs	r3, #17
 8006e64:	f107 0218 	add.w	r2, r7, #24
 8006e68:	3a11      	subs	r2, #17
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	f002 021f 	and.w	r2, r2, #31
 8006e70:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006e72:	f107 0318 	add.w	r3, r7, #24
 8006e76:	3b11      	subs	r3, #17
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	f107 0118 	add.w	r1, r7, #24
 8006e84:	3910      	subs	r1, #16
 8006e86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006e8a:	3b18      	subs	r3, #24
 8006e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff fbdf 	bl	8006654 <find_volume>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e9c:	f102 0217 	add.w	r2, r2, #23
 8006ea0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006ea2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ea6:	f103 0317 	add.w	r3, r3, #23
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f040 82e3 	bne.w	8007478 <f_open+0x65c>
		INIT_BUF(dj);
 8006eb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006eb6:	3b18      	subs	r3, #24
 8006eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ebc:	3318      	adds	r3, #24
 8006ebe:	f107 0218 	add.w	r2, r7, #24
 8006ec2:	3a04      	subs	r2, #4
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006eca:	3b18      	subs	r3, #24
 8006ecc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006ed0:	4ad1      	ldr	r2, [pc, #836]	; (8007218 <f_open+0x3fc>)
 8006ed2:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006ed4:	f107 0318 	add.w	r3, r7, #24
 8006ed8:	3b10      	subs	r3, #16
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ee0:	3b18      	subs	r3, #24
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff fa8b 	bl	8006400 <follow_path>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ef0:	f102 0217 	add.w	r2, r2, #23
 8006ef4:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8006ef6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006efa:	3b18      	subs	r3, #24
 8006efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f00:	3314      	adds	r3, #20
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f08:	f102 0210 	add.w	r2, r2, #16
 8006f0c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006f0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f12:	f103 0317 	add.w	r3, r3, #23
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d126      	bne.n	8006f6a <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8006f1c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f20:	f103 0310 	add.w	r3, r3, #16
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <f_open+0x11c>
				res = FR_INVALID_NAME;
 8006f2a:	2306      	movs	r3, #6
 8006f2c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f30:	f102 0217 	add.w	r2, r2, #23
 8006f34:	7013      	strb	r3, [r2, #0]
 8006f36:	e018      	b.n	8006f6a <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f38:	f107 0318 	add.w	r3, r7, #24
 8006f3c:	3b11      	subs	r3, #17
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bf14      	ite	ne
 8006f48:	2301      	movne	r3, #1
 8006f4a:	2300      	moveq	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f54:	3b18      	subs	r3, #24
 8006f56:	4611      	mov	r1, r2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fd f917 	bl	800418c <chk_lock>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f64:	f102 0217 	add.w	r2, r2, #23
 8006f68:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006f6a:	f107 0318 	add.w	r3, r7, #24
 8006f6e:	3b11      	subs	r3, #17
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	f003 031c 	and.w	r3, r3, #28
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8150 	beq.w	800721c <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 8006f7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f80:	f103 0317 	add.w	r3, r3, #23
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d030      	beq.n	8006fec <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006f8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f8e:	f103 0317 	add.w	r3, r3, #23
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d112      	bne.n	8006fbe <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006f98:	f7fd f96a 	bl	8004270 <enq_lock>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d007      	beq.n	8006fb2 <f_open+0x196>
 8006fa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006fa6:	3b18      	subs	r3, #24
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fe fe5f 	bl	8005c6c <dir_register>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	e000      	b.n	8006fb4 <f_open+0x198>
 8006fb2:	2312      	movs	r3, #18
 8006fb4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006fb8:	f102 0217 	add.w	r2, r2, #23
 8006fbc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006fbe:	f107 0318 	add.w	r3, r7, #24
 8006fc2:	3b11      	subs	r3, #17
 8006fc4:	f107 0218 	add.w	r2, r7, #24
 8006fc8:	3a11      	subs	r2, #17
 8006fca:	7812      	ldrb	r2, [r2, #0]
 8006fcc:	f042 0208 	orr.w	r2, r2, #8
 8006fd0:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006fd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006fd6:	3b18      	subs	r3, #24
 8006fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fdc:	3314      	adds	r3, #20
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006fe4:	f102 0210 	add.w	r2, r2, #16
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	e01f      	b.n	800702c <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006fec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ff0:	f103 0310 	add.w	r3, r3, #16
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	330b      	adds	r3, #11
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	f003 0311 	and.w	r3, r3, #17
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d006      	beq.n	8007010 <f_open+0x1f4>
					res = FR_DENIED;
 8007002:	2307      	movs	r3, #7
 8007004:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007008:	f102 0217 	add.w	r2, r2, #23
 800700c:	7013      	strb	r3, [r2, #0]
 800700e:	e00d      	b.n	800702c <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007010:	f107 0318 	add.w	r3, r7, #24
 8007014:	3b11      	subs	r3, #17
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <f_open+0x210>
						res = FR_EXIST;
 8007020:	2308      	movs	r3, #8
 8007022:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007026:	f102 0217 	add.w	r2, r2, #23
 800702a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800702c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007030:	f103 0317 	add.w	r3, r3, #23
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 8122 	bne.w	8007280 <f_open+0x464>
 800703c:	f107 0318 	add.w	r3, r7, #24
 8007040:	3b11      	subs	r3, #17
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8119 	beq.w	8007280 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800704e:	f001 fa2b 	bl	80084a8 <get_fattime>
 8007052:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007056:	f103 030c 	add.w	r3, r3, #12
 800705a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800705c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007060:	f103 0310 	add.w	r3, r3, #16
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330e      	adds	r3, #14
 8007068:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800706c:	f102 020c 	add.w	r2, r2, #12
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800707a:	f103 030c 	add.w	r3, r3, #12
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	0a1b      	lsrs	r3, r3, #8
 8007084:	b29a      	uxth	r2, r3
 8007086:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800708a:	f103 0310 	add.w	r3, r3, #16
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	330f      	adds	r3, #15
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800709a:	f103 030c 	add.w	r3, r3, #12
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	0c1a      	lsrs	r2, r3, #16
 80070a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070a6:	f103 0310 	add.w	r3, r3, #16
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3310      	adds	r3, #16
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070b6:	f103 030c 	add.w	r3, r3, #12
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	0e1a      	lsrs	r2, r3, #24
 80070be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070c2:	f103 0310 	add.w	r3, r3, #16
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3311      	adds	r3, #17
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80070ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070d2:	f103 0310 	add.w	r3, r3, #16
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	330b      	adds	r3, #11
 80070da:	2200      	movs	r2, #0
 80070dc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80070de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070e2:	f103 0310 	add.w	r3, r3, #16
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	331c      	adds	r3, #28
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070f2:	f103 0310 	add.w	r3, r3, #16
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	331d      	adds	r3, #29
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007102:	f103 0310 	add.w	r3, r3, #16
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	331e      	adds	r3, #30
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007112:	f103 0310 	add.w	r3, r3, #16
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	331f      	adds	r3, #31
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800711e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007122:	3b18      	subs	r3, #24
 8007124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800712e:	f102 0210 	add.w	r2, r2, #16
 8007132:	6811      	ldr	r1, [r2, #0]
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe f9c0 	bl	80054ba <ld_clust>
 800713a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800713e:	f103 0308 	add.w	r3, r3, #8
 8007142:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007144:	2100      	movs	r1, #0
 8007146:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800714a:	f103 0310 	add.w	r3, r3, #16
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	f7fe f9e1 	bl	8005516 <st_clust>
				dj.fs->wflag = 1;
 8007154:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007158:	3b18      	subs	r3, #24
 800715a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007164:	3304      	adds	r3, #4
 8007166:	2201      	movs	r2, #1
 8007168:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800716a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800716e:	f103 0308 	add.w	r3, r3, #8
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8083 	beq.w	8007280 <f_open+0x464>
					dw = dj.fs->winsect;
 800717a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800717e:	3b18      	subs	r3, #24
 8007180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800718a:	330c      	adds	r3, #12
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007192:	f102 020c 	add.w	r2, r2, #12
 8007196:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007198:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800719c:	3b18      	subs	r3, #24
 800719e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80071a8:	f102 0208 	add.w	r2, r2, #8
 80071ac:	6811      	ldr	r1, [r2, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fd fd99 	bl	8004ce6 <remove_chain>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80071ba:	f102 0217 	add.w	r2, r2, #23
 80071be:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80071c0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80071c4:	f103 0317 	add.w	r3, r3, #23
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d158      	bne.n	8007280 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80071ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80071d2:	3b18      	subs	r3, #24
 80071d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80071de:	f102 0208 	add.w	r2, r2, #8
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	3a01      	subs	r2, #1
 80071e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ea:	330c      	adds	r3, #12
 80071ec:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 80071ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80071f2:	3b18      	subs	r3, #24
 80071f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80071fe:	f102 020c 	add.w	r2, r2, #12
 8007202:	6811      	ldr	r1, [r2, #0]
 8007204:	4618      	mov	r0, r3
 8007206:	f7fd f9df 	bl	80045c8 <move_window>
 800720a:	4603      	mov	r3, r0
 800720c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007210:	f102 0217 	add.w	r2, r2, #23
 8007214:	7013      	strb	r3, [r2, #0]
 8007216:	e033      	b.n	8007280 <f_open+0x464>
 8007218:	2000006c 	.word	0x2000006c
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800721c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007220:	f103 0317 	add.w	r3, r3, #23
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d12a      	bne.n	8007280 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800722a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800722e:	f103 0310 	add.w	r3, r3, #16
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330b      	adds	r3, #11
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <f_open+0x432>
					res = FR_NO_FILE;
 8007240:	2304      	movs	r3, #4
 8007242:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007246:	f102 0217 	add.w	r2, r2, #23
 800724a:	7013      	strb	r3, [r2, #0]
 800724c:	e018      	b.n	8007280 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800724e:	f107 0318 	add.w	r3, r7, #24
 8007252:	3b11      	subs	r3, #17
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d010      	beq.n	8007280 <f_open+0x464>
 800725e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007262:	f103 0310 	add.w	r3, r3, #16
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	330b      	adds	r3, #11
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d005      	beq.n	8007280 <f_open+0x464>
						res = FR_DENIED;
 8007274:	2307      	movs	r3, #7
 8007276:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800727a:	f102 0217 	add.w	r2, r2, #23
 800727e:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007280:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007284:	f103 0317 	add.w	r3, r3, #23
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d15b      	bne.n	8007346 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800728e:	f107 0318 	add.w	r3, r7, #24
 8007292:	3b11      	subs	r3, #17
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <f_open+0x496>
				mode |= FA__WRITTEN;
 800729e:	f107 0318 	add.w	r3, r7, #24
 80072a2:	3b11      	subs	r3, #17
 80072a4:	f107 0218 	add.w	r2, r7, #24
 80072a8:	3a11      	subs	r2, #17
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	f042 0220 	orr.w	r2, r2, #32
 80072b0:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80072b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80072b6:	3b18      	subs	r3, #24
 80072b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80072c2:	330c      	adds	r3, #12
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	f107 0318 	add.w	r3, r7, #24
 80072ca:	3b0c      	subs	r3, #12
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d2:	331c      	adds	r3, #28
 80072d4:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 80072d6:	f107 0318 	add.w	r3, r7, #24
 80072da:	3b0c      	subs	r3, #12
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80072e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80072e6:	f102 0210 	add.w	r2, r2, #16
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80072ee:	f107 0318 	add.w	r3, r7, #24
 80072f2:	3b11      	subs	r3, #17
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	f023 0301 	bic.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	bf14      	ite	ne
 80072fe:	2301      	movne	r3, #1
 8007300:	2300      	moveq	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	461a      	mov	r2, r3
 8007306:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800730a:	3b18      	subs	r3, #24
 800730c:	4611      	mov	r1, r2
 800730e:	4618      	mov	r0, r3
 8007310:	f7fc ffd2 	bl	80042b8 <inc_lock>
 8007314:	4602      	mov	r2, r0
 8007316:	f107 0318 	add.w	r3, r7, #24
 800731a:	3b0c      	subs	r3, #12
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007322:	3308      	adds	r3, #8
 8007324:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8007326:	f107 0318 	add.w	r3, r7, #24
 800732a:	3b0c      	subs	r3, #12
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007332:	3308      	adds	r3, #8
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d105      	bne.n	8007346 <f_open+0x52a>
 800733a:	2302      	movs	r3, #2
 800733c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007340:	f102 0217 	add.w	r2, r2, #23
 8007344:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007346:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800734a:	f103 0317 	add.w	r3, r3, #23
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f040 8091 	bne.w	8007478 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 8007356:	f107 0318 	add.w	r3, r7, #24
 800735a:	3b0c      	subs	r3, #12
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007362:	3306      	adds	r3, #6
 8007364:	f107 0218 	add.w	r2, r7, #24
 8007368:	3a11      	subs	r2, #17
 800736a:	7812      	ldrb	r2, [r2, #0]
 800736c:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800736e:	f107 0318 	add.w	r3, r7, #24
 8007372:	3b0c      	subs	r3, #12
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800737a:	3307      	adds	r3, #7
 800737c:	2200      	movs	r2, #0
 800737e:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007380:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007384:	3b18      	subs	r3, #24
 8007386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007390:	f102 0210 	add.w	r2, r2, #16
 8007394:	6811      	ldr	r1, [r2, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe f88f 	bl	80054ba <ld_clust>
 800739c:	4602      	mov	r2, r0
 800739e:	f107 0318 	add.w	r3, r7, #24
 80073a2:	3b0c      	subs	r3, #12
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073aa:	3310      	adds	r3, #16
 80073ac:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80073ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80073b2:	f103 0310 	add.w	r3, r3, #16
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	331f      	adds	r3, #31
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	061a      	lsls	r2, r3, #24
 80073be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80073c2:	f103 0310 	add.w	r3, r3, #16
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	331e      	adds	r3, #30
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	041b      	lsls	r3, r3, #16
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80073d4:	f102 0210 	add.w	r2, r2, #16
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	321d      	adds	r2, #29
 80073dc:	7812      	ldrb	r2, [r2, #0]
 80073de:	0212      	lsls	r2, r2, #8
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80073e6:	f102 0210 	add.w	r2, r2, #16
 80073ea:	6812      	ldr	r2, [r2, #0]
 80073ec:	321c      	adds	r2, #28
 80073ee:	7812      	ldrb	r2, [r2, #0]
 80073f0:	431a      	orrs	r2, r3
 80073f2:	f107 0318 	add.w	r3, r7, #24
 80073f6:	3b0c      	subs	r3, #12
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073fe:	330c      	adds	r3, #12
 8007400:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8007402:	f107 0318 	add.w	r3, r7, #24
 8007406:	3b0c      	subs	r3, #12
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800740e:	3308      	adds	r3, #8
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 8007414:	f107 0318 	add.w	r3, r7, #24
 8007418:	3b0c      	subs	r3, #12
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007420:	3318      	adds	r3, #24
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007426:	f107 0318 	add.w	r3, r7, #24
 800742a:	3b0c      	subs	r3, #12
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007432:	3304      	adds	r3, #4
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007438:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800743c:	3b18      	subs	r3, #24
 800743e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	f107 0318 	add.w	r3, r7, #24
 8007448:	3b0c      	subs	r3, #12
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007450:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8007452:	f107 0318 	add.w	r3, r7, #24
 8007456:	3b0c      	subs	r3, #12
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007464:	3306      	adds	r3, #6
 8007466:	881a      	ldrh	r2, [r3, #0]
 8007468:	f107 0318 	add.w	r3, r7, #24
 800746c:	3b0c      	subs	r3, #12
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007474:	3304      	adds	r3, #4
 8007476:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007478:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800747c:	f103 0317 	add.w	r3, r3, #23
 8007480:	781b      	ldrb	r3, [r3, #0]
}
 8007482:	4618      	mov	r0, r3
 8007484:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop

08007490 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08c      	sub	sp, #48	; 0x30
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f7ff fc2f 	bl	8006d0c <validate>
 80074ae:	4603      	mov	r3, r0
 80074b0:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80074b2:	7ffb      	ldrb	r3, [r7, #31]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <f_read+0x2c>
 80074b8:	7ffb      	ldrb	r3, [r7, #31]
 80074ba:	e1fb      	b.n	80078b4 <f_read+0x424>
	if (fp->err)								/* Check error */
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c2:	3307      	adds	r3, #7
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d0:	3307      	adds	r3, #7
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	e1ee      	b.n	80078b4 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074dc:	3306      	adds	r3, #6
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80074e8:	2307      	movs	r3, #7
 80074ea:	e1e3      	b.n	80078b4 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f2:	330c      	adds	r3, #12
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074fc:	3308      	adds	r3, #8
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	429a      	cmp	r2, r3
 800750a:	f240 81ce 	bls.w	80078aa <f_read+0x41a>
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007512:	e1ca      	b.n	80078aa <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751a:	3308      	adds	r3, #8
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752a:	330a      	adds	r3, #10
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007532:	fb03 f301 	mul.w	r3, r3, r1
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	f040 8160 	bne.w	80077fe <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007544:	3308      	adds	r3, #8
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007554:	330a      	adds	r3, #10
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	fbb2 f3f3 	udiv	r3, r2, r3
 800755c:	b2da      	uxtb	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800756a:	3302      	adds	r3, #2
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	3b01      	subs	r3, #1
 8007570:	b2db      	uxtb	r3, r3
 8007572:	4013      	ands	r3, r2
 8007574:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d14a      	bne.n	8007612 <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007582:	3308      	adds	r3, #8
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007590:	3310      	adds	r3, #16
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007596:	e01f      	b.n	80075d8 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800759e:	3304      	adds	r3, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ac:	3308      	adds	r3, #8
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4619      	mov	r1, r3
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f7fd fcb0 	bl	8004f18 <clmt_clust>
 80075b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80075ba:	e00d      	b.n	80075d8 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ca:	3314      	adds	r3, #20
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7fd f923 	bl	800481c <get_fat>
 80075d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d807      	bhi.n	80075ee <f_read+0x15e>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e4:	3307      	adds	r3, #7
 80075e6:	2202      	movs	r2, #2
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	2302      	movs	r3, #2
 80075ec:	e162      	b.n	80078b4 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f4:	d107      	bne.n	8007606 <f_read+0x176>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fc:	3307      	adds	r3, #7
 80075fe:	2201      	movs	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	2301      	movs	r3, #1
 8007604:	e156      	b.n	80078b4 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760c:	3314      	adds	r3, #20
 800760e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007610:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007620:	3314      	adds	r3, #20
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f7fd f8d1 	bl	80047ce <clust2sect>
 800762c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d107      	bne.n	8007644 <f_read+0x1b4>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763a:	3307      	adds	r3, #7
 800763c:	2202      	movs	r2, #2
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	2302      	movs	r3, #2
 8007642:	e137      	b.n	80078b4 <f_read+0x424>
			sect += csect;
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4413      	add	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007658:	330a      	adds	r3, #10
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	fbb3 f3f2 	udiv	r3, r3, r2
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	2b00      	cmp	r3, #0
 800766a:	d070      	beq.n	800774e <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800766c:	7dfa      	ldrb	r2, [r7, #23]
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	441a      	add	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767e:	3302      	adds	r3, #2
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d90b      	bls.n	800769e <f_read+0x20e>
					cc = fp->fs->csize - csect;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007692:	3302      	adds	r3, #2
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076aa:	3301      	adds	r3, #1
 80076ac:	7818      	ldrb	r0, [r3, #0]
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	6a39      	ldr	r1, [r7, #32]
 80076b4:	f7fc fc94 	bl	8003fe0 <disk_read>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d007      	beq.n	80076ce <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c4:	3307      	adds	r3, #7
 80076c6:	2201      	movs	r2, #1
 80076c8:	701a      	strb	r2, [r3, #0]
 80076ca:	2301      	movs	r3, #1
 80076cc:	e0f2      	b.n	80078b4 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076d4:	3306      	adds	r3, #6
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d028      	beq.n	8007732 <f_read+0x2a2>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e6:	3318      	adds	r3, #24
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d91e      	bls.n	8007732 <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fa:	3318      	adds	r3, #24
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad2      	subs	r2, r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770e:	330a      	adds	r3, #10
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	fb03 f302 	mul.w	r3, r3, r2
 8007716:	6a3a      	ldr	r2, [r7, #32]
 8007718:	18d0      	adds	r0, r2, r3
 800771a:	68f9      	ldr	r1, [r7, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007728:	330a      	adds	r3, #10
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	f7fc fcb5 	bl	800409c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800773e:	330a      	adds	r3, #10
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	fb02 f303 	mul.w	r3, r2, r3
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800774c:	e093      	b.n	8007876 <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007754:	3318      	adds	r3, #24
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	429a      	cmp	r2, r3
 800775c:	d049      	beq.n	80077f2 <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007764:	3306      	adds	r3, #6
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d028      	beq.n	80077c2 <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777c:	3301      	adds	r3, #1
 800777e:	7818      	ldrb	r0, [r3, #0]
 8007780:	68f9      	ldr	r1, [r7, #12]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007788:	3318      	adds	r3, #24
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	2301      	movs	r3, #1
 800778e:	f7fc fc47 	bl	8004020 <disk_write>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d007      	beq.n	80077a8 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779e:	3307      	adds	r3, #7
 80077a0:	2201      	movs	r2, #1
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	2301      	movs	r3, #1
 80077a6:	e085      	b.n	80078b4 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ae:	3306      	adds	r3, #6
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077be:	3306      	adds	r3, #6
 80077c0:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ce:	3301      	adds	r3, #1
 80077d0:	7818      	ldrb	r0, [r3, #0]
 80077d2:	68f9      	ldr	r1, [r7, #12]
 80077d4:	2301      	movs	r3, #1
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	f7fc fc02 	bl	8003fe0 <disk_read>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d007      	beq.n	80077f2 <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e8:	3307      	adds	r3, #7
 80077ea:	2201      	movs	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	2301      	movs	r3, #1
 80077f0:	e060      	b.n	80078b4 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f8:	3318      	adds	r3, #24
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780a:	330a      	adds	r3, #10
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007816:	3308      	adds	r3, #8
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007826:	330a      	adds	r3, #10
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	fbb2 f1f3 	udiv	r1, r2, r3
 800782e:	fb03 f301 	mul.w	r3, r3, r1
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	1ac3      	subs	r3, r0, r3
 8007836:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8007838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	429a      	cmp	r2, r3
 800783e:	d901      	bls.n	8007844 <f_read+0x3b4>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784a:	3308      	adds	r3, #8
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785a:	330a      	adds	r3, #10
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007862:	fb03 f301 	mul.w	r3, r3, r1
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4413      	add	r3, r2
 800786c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800786e:	4619      	mov	r1, r3
 8007870:	6a38      	ldr	r0, [r7, #32]
 8007872:	f7fc fc13 	bl	800409c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007876:	6a3a      	ldr	r2, [r7, #32]
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	4413      	add	r3, r2
 800787c:	623b      	str	r3, [r7, #32]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007884:	3308      	adds	r3, #8
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	441a      	add	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007892:	3308      	adds	r3, #8
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	441a      	add	r2, r3
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f47f ae31 	bne.w	8007514 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3730      	adds	r7, #48	; 0x30
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff fa21 	bl	8006d0c <validate>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f040 80cc 	bne.w	8007a6e <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078dc:	3306      	adds	r3, #6
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	f003 0320 	and.w	r3, r3, #32
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 80c2 	beq.w	8007a6e <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f0:	3306      	adds	r3, #6
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d022      	beq.n	8007942 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007908:	3301      	adds	r3, #1
 800790a:	7818      	ldrb	r0, [r3, #0]
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007914:	3318      	adds	r3, #24
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	2301      	movs	r3, #1
 800791a:	f7fc fb81 	bl	8004020 <disk_write>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007924:	2301      	movs	r3, #1
 8007926:	e0a3      	b.n	8007a70 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792e:	3306      	adds	r3, #6
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007936:	b2da      	uxtb	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793e:	3306      	adds	r3, #6
 8007940:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007950:	331c      	adds	r3, #28
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4619      	mov	r1, r3
 8007956:	4610      	mov	r0, r2
 8007958:	f7fc fe36 	bl	80045c8 <move_window>
 800795c:	4603      	mov	r3, r0
 800795e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	2b00      	cmp	r3, #0
 8007964:	f040 8083 	bne.w	8007a6e <f_sync+0x1b2>
				dir = fp->dir_ptr;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	330b      	adds	r3, #11
 8007976:	781a      	ldrb	r2, [r3, #0]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	330b      	adds	r3, #11
 800797c:	f042 0220 	orr.w	r2, r2, #32
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800798a:	330c      	adds	r3, #12
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	331c      	adds	r3, #28
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	701a      	strb	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800799c:	330c      	adds	r3, #12
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	0a1b      	lsrs	r3, r3, #8
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	331d      	adds	r3, #29
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b4:	330c      	adds	r3, #12
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	0c1a      	lsrs	r2, r3, #16
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	331e      	adds	r3, #30
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	701a      	strb	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c8:	330c      	adds	r3, #12
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	0e1a      	lsrs	r2, r3, #24
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	331f      	adds	r3, #31
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079dc:	3310      	adds	r3, #16
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4619      	mov	r1, r3
 80079e2:	6938      	ldr	r0, [r7, #16]
 80079e4:	f7fd fd97 	bl	8005516 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80079e8:	f000 fd5e 	bl	80084a8 <get_fattime>
 80079ec:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	3316      	adds	r3, #22
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	b2d2      	uxtb	r2, r2
 80079f6:	701a      	strb	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	0a1b      	lsrs	r3, r3, #8
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	3317      	adds	r3, #23
 8007a04:	b2d2      	uxtb	r2, r2
 8007a06:	701a      	strb	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	0c1a      	lsrs	r2, r3, #16
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	3318      	adds	r3, #24
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	0e1a      	lsrs	r2, r3, #24
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	3319      	adds	r3, #25
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	3312      	adds	r3, #18
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	3313      	adds	r3, #19
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a36:	3306      	adds	r3, #6
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f023 0320 	bic.w	r3, r3, #32
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a46:	3306      	adds	r3, #6
 8007a48:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a56:	3304      	adds	r3, #4
 8007a58:	2201      	movs	r2, #1
 8007a5a:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fc fde3 	bl	8004630 <sync_fs>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff ff1b 	bl	80078bc <f_sync>
 8007a86:	4603      	mov	r3, r0
 8007a88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d119      	bne.n	8007ac4 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff f93b 	bl	8006d0c <validate>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d111      	bne.n	8007ac4 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fc fcc4 	bl	8004438 <dec_lock>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d104      	bne.n	8007ac4 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <f_opendir+0x14>
 8007ae0:	2309      	movs	r3, #9
 8007ae2:	e090      	b.n	8007c06 <f_opendir+0x136>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8007ae4:	4639      	mov	r1, r7
 8007ae6:	f107 0318 	add.w	r3, r7, #24
 8007aea:	2200      	movs	r2, #0
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fe fdb1 	bl	8006654 <find_volume>
 8007af2:	4603      	mov	r3, r0
 8007af4:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8007af6:	7ffb      	ldrb	r3, [r7, #31]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d17b      	bne.n	8007bf4 <f_opendir+0x124>
		dp->fs = fs;
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b04:	601a      	str	r2, [r3, #0]
		INIT_BUF(*dp);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b0c:	3318      	adds	r3, #24
 8007b0e:	f107 020c 	add.w	r2, r7, #12
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007b1a:	4a3d      	ldr	r2, [pc, #244]	; (8007c10 <f_opendir+0x140>)
 8007b1c:	601a      	str	r2, [r3, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7fe fc6c 	bl	8006400 <follow_path>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8007b2c:	7ffb      	ldrb	r3, [r7, #31]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d15b      	bne.n	8007bea <f_opendir+0x11a>
			if (dp->dir) {						/* It is not the origin directory itself */
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b38:	3314      	adds	r3, #20
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d01d      	beq.n	8007b7c <f_opendir+0xac>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b46:	3314      	adds	r3, #20
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	330b      	adds	r3, #11
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d010      	beq.n	8007b78 <f_opendir+0xa8>
					dp->sclust = ld_clust(fs, dp->dir);
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b5e:	3314      	adds	r3, #20
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4619      	mov	r1, r3
 8007b64:	4610      	mov	r0, r2
 8007b66:	f7fd fca8 	bl	80054ba <ld_clust>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b72:	3308      	adds	r3, #8
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e001      	b.n	8007b7c <f_opendir+0xac>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8007b78:	2305      	movs	r3, #5
 8007b7a:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8007b7c:	7ffb      	ldrb	r3, [r7, #31]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d133      	bne.n	8007bea <f_opendir+0x11a>
				dp->id = fs->id;
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b88:	3306      	adds	r3, #6
 8007b8a:	881a      	ldrh	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b92:	3304      	adds	r3, #4
 8007b94:	801a      	strh	r2, [r3, #0]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007b96:	2100      	movs	r1, #0
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7fd fa00 	bl	8004f9e <dir_sdi>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8007ba2:	7ffb      	ldrb	r3, [r7, #31]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d120      	bne.n	8007bea <f_opendir+0x11a>
					if (dp->sclust) {
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bae:	3308      	adds	r3, #8
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d013      	beq.n	8007bde <f_opendir+0x10e>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fc fb7d 	bl	80042b8 <inc_lock>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc6:	331c      	adds	r3, #28
 8007bc8:	601a      	str	r2, [r3, #0]
						if (!dp->lockid)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd0:	331c      	adds	r3, #28
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d108      	bne.n	8007bea <f_opendir+0x11a>
							res = FR_TOO_MANY_OPEN_FILES;
 8007bd8:	2312      	movs	r3, #18
 8007bda:	77fb      	strb	r3, [r7, #31]
 8007bdc:	e005      	b.n	8007bea <f_opendir+0x11a>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be4:	331c      	adds	r3, #28
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007bea:	7ffb      	ldrb	r3, [r7, #31]
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d101      	bne.n	8007bf4 <f_opendir+0x124>
 8007bf0:	2305      	movs	r3, #5
 8007bf2:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8007bf4:	7ffb      	ldrb	r3, [r7, #31]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d004      	beq.n	8007c04 <f_opendir+0x134>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007c04:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3720      	adds	r7, #32
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	2000006c 	.word	0x2000006c

08007c14 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff f874 	bl	8006d0c <validate>
 8007c24:	4603      	mov	r3, r0
 8007c26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d13e      	bne.n	8007cac <f_readdir+0x98>
		if (!fno) {
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d106      	bne.n	8007c42 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007c34:	2100      	movs	r1, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7fd f9b1 	bl	8004f9e <dir_sdi>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	75fb      	strb	r3, [r7, #23]
 8007c40:	e034      	b.n	8007cac <f_readdir+0x98>
		} else {
			INIT_BUF(*dp);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c48:	3318      	adds	r3, #24
 8007c4a:	f107 0208 	add.w	r2, r7, #8
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007c56:	4a18      	ldr	r2, [pc, #96]	; (8007cb8 <f_readdir+0xa4>)
 8007c58:	601a      	str	r2, [r3, #0]
			res = dir_read(dp, 0);			/* Read an item */
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7fd ff4c 	bl	8005afa <dir_read>
 8007c62:	4603      	mov	r3, r0
 8007c64:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	d107      	bne.n	8007c7c <f_readdir+0x68>
				dp->sect = 0;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c72:	3310      	adds	r3, #16
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]
				res = FR_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d114      	bne.n	8007cac <f_readdir+0x98>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7fe f921 	bl	8005ecc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7fd fa61 	bl	8005154 <dir_next>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d107      	bne.n	8007cac <f_readdir+0x98>
					dp->sect = 0;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca2:	3310      	adds	r3, #16
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]
					res = FR_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	2000006c 	.word	0x2000006c

08007cbc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007cd2:	4b1e      	ldr	r3, [pc, #120]	; (8007d4c <FATFS_LinkDriverEx+0x90>)
 8007cd4:	7a5b      	ldrb	r3, [r3, #9]
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d831      	bhi.n	8007d40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007cdc:	4b1b      	ldr	r3, [pc, #108]	; (8007d4c <FATFS_LinkDriverEx+0x90>)
 8007cde:	7a5b      	ldrb	r3, [r3, #9]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4b19      	ldr	r3, [pc, #100]	; (8007d4c <FATFS_LinkDriverEx+0x90>)
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007cea:	4b18      	ldr	r3, [pc, #96]	; (8007d4c <FATFS_LinkDriverEx+0x90>)
 8007cec:	7a5b      	ldrb	r3, [r3, #9]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	4a16      	ldr	r2, [pc, #88]	; (8007d4c <FATFS_LinkDriverEx+0x90>)
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007cfa:	4b14      	ldr	r3, [pc, #80]	; (8007d4c <FATFS_LinkDriverEx+0x90>)
 8007cfc:	7a5b      	ldrb	r3, [r3, #9]
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	461a      	mov	r2, r3
 8007d02:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <FATFS_LinkDriverEx+0x90>)
 8007d04:	4413      	add	r3, r2
 8007d06:	79fa      	ldrb	r2, [r7, #7]
 8007d08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d0a:	4b10      	ldr	r3, [pc, #64]	; (8007d4c <FATFS_LinkDriverEx+0x90>)
 8007d0c:	7a5b      	ldrb	r3, [r3, #9]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	b2d1      	uxtb	r1, r2
 8007d14:	4a0d      	ldr	r2, [pc, #52]	; (8007d4c <FATFS_LinkDriverEx+0x90>)
 8007d16:	7251      	strb	r1, [r2, #9]
 8007d18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d1a:	7dbb      	ldrb	r3, [r7, #22]
 8007d1c:	3330      	adds	r3, #48	; 0x30
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	3301      	adds	r3, #1
 8007d28:	223a      	movs	r2, #58	; 0x3a
 8007d2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	3302      	adds	r3, #2
 8007d30:	222f      	movs	r2, #47	; 0x2f
 8007d32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3303      	adds	r3, #3
 8007d38:	2200      	movs	r2, #0
 8007d3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr
 8007d4c:	2000026c 	.word	0x2000026c

08007d50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff ffac 	bl	8007cbc <FATFS_LinkDriverEx>
 8007d64:	4603      	mov	r3, r0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007d7c:	88fb      	ldrh	r3, [r7, #6]
 8007d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d80:	d802      	bhi.n	8007d88 <ff_convert+0x18>
		c = chr;
 8007d82:	88fb      	ldrh	r3, [r7, #6]
 8007d84:	81fb      	strh	r3, [r7, #14]
 8007d86:	e025      	b.n	8007dd4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00b      	beq.n	8007da6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007d8e:	88fb      	ldrh	r3, [r7, #6]
 8007d90:	2bff      	cmp	r3, #255	; 0xff
 8007d92:	d805      	bhi.n	8007da0 <ff_convert+0x30>
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	3b80      	subs	r3, #128	; 0x80
 8007d98:	4a11      	ldr	r2, [pc, #68]	; (8007de0 <ff_convert+0x70>)
 8007d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d9e:	e000      	b.n	8007da2 <ff_convert+0x32>
 8007da0:	2300      	movs	r3, #0
 8007da2:	81fb      	strh	r3, [r7, #14]
 8007da4:	e016      	b.n	8007dd4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007da6:	2300      	movs	r3, #0
 8007da8:	81fb      	strh	r3, [r7, #14]
 8007daa:	e009      	b.n	8007dc0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007dac:	89fb      	ldrh	r3, [r7, #14]
 8007dae:	4a0c      	ldr	r2, [pc, #48]	; (8007de0 <ff_convert+0x70>)
 8007db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007db4:	88fa      	ldrh	r2, [r7, #6]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d006      	beq.n	8007dc8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007dba:	89fb      	ldrh	r3, [r7, #14]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	81fb      	strh	r3, [r7, #14]
 8007dc0:	89fb      	ldrh	r3, [r7, #14]
 8007dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc4:	d9f2      	bls.n	8007dac <ff_convert+0x3c>
 8007dc6:	e000      	b.n	8007dca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007dc8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007dca:	89fb      	ldrh	r3, [r7, #14]
 8007dcc:	3380      	adds	r3, #128	; 0x80
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007dd4:	89fb      	ldrh	r3, [r7, #14]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bc80      	pop	{r7}
 8007dde:	4770      	bx	lr
 8007de0:	0800b4c0 	.word	0x0800b4c0

08007de4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	e002      	b.n	8007dfa <ff_wtoupper+0x16>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	3301      	adds	r3, #1
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	4a0f      	ldr	r2, [pc, #60]	; (8007e38 <ff_wtoupper+0x54>)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d006      	beq.n	8007e14 <ff_wtoupper+0x30>
 8007e06:	4a0c      	ldr	r2, [pc, #48]	; (8007e38 <ff_wtoupper+0x54>)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e0e:	88fa      	ldrh	r2, [r7, #6]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d1ef      	bne.n	8007df4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007e14:	4a08      	ldr	r2, [pc, #32]	; (8007e38 <ff_wtoupper+0x54>)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <ff_wtoupper+0x46>
 8007e20:	4a06      	ldr	r2, [pc, #24]	; (8007e3c <ff_wtoupper+0x58>)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e28:	e000      	b.n	8007e2c <ff_wtoupper+0x48>
 8007e2a:	88fb      	ldrh	r3, [r7, #6]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bc80      	pop	{r7}
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	0800b5c0 	.word	0x0800b5c0
 8007e3c:	0800b7a0 	.word	0x0800b7a0

08007e40 <JoyStick_Init>:

extern uint16 Joystick_xy[2];
extern JOYSTICK* Joystick_Handler;

void JoyStick_Init(JOYSTICK* Joystick_PTR)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08c      	sub	sp, #48	; 0x30
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e48:	f107 0320 	add.w	r3, r7, #32
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	605a      	str	r2, [r3, #4]
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	60da      	str	r2, [r3, #12]

	if(Joystick_PTR -> JoyStick_xGPIO == GPIOA || Joystick_PTR -> JoyStick_yGPIO == GPIOA)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a60      	ldr	r2, [pc, #384]	; (8007fdc <JoyStick_Init+0x19c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <JoyStick_Init+0x2a>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	4a5d      	ldr	r2, [pc, #372]	; (8007fdc <JoyStick_Init+0x19c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d10c      	bne.n	8007e84 <JoyStick_Init+0x44>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007e6a:	4b5d      	ldr	r3, [pc, #372]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	4a5c      	ldr	r2, [pc, #368]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007e70:	f043 0304 	orr.w	r3, r3, #4
 8007e74:	6193      	str	r3, [r2, #24]
 8007e76:	4b5a      	ldr	r3, [pc, #360]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	f003 0304 	and.w	r3, r3, #4
 8007e7e:	61fb      	str	r3, [r7, #28]
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	e05a      	b.n	8007f3a <JoyStick_Init+0xfa>
	}
	else if(Joystick_PTR -> JoyStick_xGPIO == GPIOB || Joystick_PTR -> JoyStick_yGPIO == GPIOB)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a56      	ldr	r2, [pc, #344]	; (8007fe4 <JoyStick_Init+0x1a4>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d004      	beq.n	8007e98 <JoyStick_Init+0x58>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	4a54      	ldr	r2, [pc, #336]	; (8007fe4 <JoyStick_Init+0x1a4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d10c      	bne.n	8007eb2 <JoyStick_Init+0x72>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8007e98:	4b51      	ldr	r3, [pc, #324]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	4a50      	ldr	r2, [pc, #320]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007e9e:	f043 0308 	orr.w	r3, r3, #8
 8007ea2:	6193      	str	r3, [r2, #24]
 8007ea4:	4b4e      	ldr	r3, [pc, #312]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	61bb      	str	r3, [r7, #24]
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	e043      	b.n	8007f3a <JoyStick_Init+0xfa>
	}
	else if(Joystick_PTR -> JoyStick_xGPIO == GPIOC || Joystick_PTR -> JoyStick_yGPIO == GPIOC)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a4c      	ldr	r2, [pc, #304]	; (8007fe8 <JoyStick_Init+0x1a8>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <JoyStick_Init+0x86>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	4a49      	ldr	r2, [pc, #292]	; (8007fe8 <JoyStick_Init+0x1a8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d10c      	bne.n	8007ee0 <JoyStick_Init+0xa0>
	{
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8007ec6:	4b46      	ldr	r3, [pc, #280]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	4a45      	ldr	r2, [pc, #276]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007ecc:	f043 0310 	orr.w	r3, r3, #16
 8007ed0:	6193      	str	r3, [r2, #24]
 8007ed2:	4b43      	ldr	r3, [pc, #268]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	f003 0310 	and.w	r3, r3, #16
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	e02c      	b.n	8007f3a <JoyStick_Init+0xfa>
	}
	else if (Joystick_PTR -> JoyStick_xGPIO == GPIOD || Joystick_PTR -> JoyStick_yGPIO == GPIOD)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a41      	ldr	r2, [pc, #260]	; (8007fec <JoyStick_Init+0x1ac>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d004      	beq.n	8007ef4 <JoyStick_Init+0xb4>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	4a3f      	ldr	r2, [pc, #252]	; (8007fec <JoyStick_Init+0x1ac>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d10c      	bne.n	8007f0e <JoyStick_Init+0xce>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8007ef4:	4b3a      	ldr	r3, [pc, #232]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	4a39      	ldr	r2, [pc, #228]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007efa:	f043 0320 	orr.w	r3, r3, #32
 8007efe:	6193      	str	r3, [r2, #24]
 8007f00:	4b37      	ldr	r3, [pc, #220]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f003 0320 	and.w	r3, r3, #32
 8007f08:	613b      	str	r3, [r7, #16]
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	e015      	b.n	8007f3a <JoyStick_Init+0xfa>
	}
	else if (Joystick_PTR -> JoyStick_xGPIO == GPIOE || Joystick_PTR -> JoyStick_yGPIO == GPIOE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a37      	ldr	r2, [pc, #220]	; (8007ff0 <JoyStick_Init+0x1b0>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d004      	beq.n	8007f22 <JoyStick_Init+0xe2>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	4a34      	ldr	r2, [pc, #208]	; (8007ff0 <JoyStick_Init+0x1b0>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d10b      	bne.n	8007f3a <JoyStick_Init+0xfa>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8007f22:	4b2f      	ldr	r3, [pc, #188]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	4a2e      	ldr	r2, [pc, #184]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007f28:	f043 0320 	orr.w	r3, r3, #32
 8007f2c:	6193      	str	r3, [r2, #24]
 8007f2e:	4b2c      	ldr	r3, [pc, #176]	; (8007fe0 <JoyStick_Init+0x1a0>)
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f003 0320 	and.w	r3, r3, #32
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	68fb      	ldr	r3, [r7, #12]
	}

	GPIO_InitStruct.Pin = Joystick_PTR -> JoyStick_xPIN;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	891b      	ldrh	r3, [r3, #8]
 8007f3e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f40:	2303      	movs	r3, #3
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Joystick_PTR -> JoyStick_xGPIO, &GPIO_InitStruct);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f107 0220 	add.w	r2, r7, #32
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7f9 fa8a 	bl	8001468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Joystick_PTR -> JoyStick_yPIN;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	895b      	ldrh	r3, [r3, #10]
 8007f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Joystick_PTR -> JoyStick_yGPIO, &GPIO_InitStruct);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f107 0220 	add.w	r2, r7, #32
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7f9 fa7d 	bl	8001468 <HAL_GPIO_Init>

	hadc.Instance = Joystick_PTR -> ADC_Instance;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	4a20      	ldr	r2, [pc, #128]	; (8007ff4 <JoyStick_Init+0x1b4>)
 8007f74:	6013      	str	r3, [r2, #0]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007f76:	4b1f      	ldr	r3, [pc, #124]	; (8007ff4 <JoyStick_Init+0x1b4>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	609a      	str	r2, [r3, #8]
	hadc.Init.ContinuousConvMode = DISABLE;
 8007f7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ff4 <JoyStick_Init+0x1b4>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	60da      	str	r2, [r3, #12]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8007f82:	4b1c      	ldr	r3, [pc, #112]	; (8007ff4 <JoyStick_Init+0x1b4>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	615a      	str	r2, [r3, #20]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007f88:	4b1a      	ldr	r3, [pc, #104]	; (8007ff4 <JoyStick_Init+0x1b4>)
 8007f8a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8007f8e:	61da      	str	r2, [r3, #28]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007f90:	4b18      	ldr	r3, [pc, #96]	; (8007ff4 <JoyStick_Init+0x1b4>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	605a      	str	r2, [r3, #4]
	hadc.Init.NbrOfConversion = 1;
 8007f96:	4b17      	ldr	r3, [pc, #92]	; (8007ff4 <JoyStick_Init+0x1b4>)
 8007f98:	2201      	movs	r2, #1
 8007f9a:	611a      	str	r2, [r3, #16]
	HAL_ADC_Init(&hadc);
 8007f9c:	4815      	ldr	r0, [pc, #84]	; (8007ff4 <JoyStick_Init+0x1b4>)
 8007f9e:	f7f8 fad7 	bl	8000550 <HAL_ADC_Init>
    sConfig.Channel = Joystick_PTR -> ADCx_CH;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	4a14      	ldr	r2, [pc, #80]	; (8007ff8 <JoyStick_Init+0x1b8>)
 8007fa8:	6013      	str	r3, [r2, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8007faa:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <JoyStick_Init+0x1b8>)
 8007fac:	2201      	movs	r2, #1
 8007fae:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8007fb0:	4b11      	ldr	r3, [pc, #68]	; (8007ff8 <JoyStick_Init+0x1b8>)
 8007fb2:	2203      	movs	r2, #3
 8007fb4:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8007fb6:	4910      	ldr	r1, [pc, #64]	; (8007ff8 <JoyStick_Init+0x1b8>)
 8007fb8:	480e      	ldr	r0, [pc, #56]	; (8007ff4 <JoyStick_Init+0x1b4>)
 8007fba:	f7f8 fd55 	bl	8000a68 <HAL_ADC_ConfigChannel>

	if(calibrated == 0)
 8007fbe:	4b0f      	ldr	r3, [pc, #60]	; (8007ffc <JoyStick_Init+0x1bc>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d105      	bne.n	8007fd2 <JoyStick_Init+0x192>
	{
		HAL_ADCEx_Calibration_Start(&hadc);
 8007fc6:	480b      	ldr	r0, [pc, #44]	; (8007ff4 <JoyStick_Init+0x1b4>)
 8007fc8:	f7f8 fed2 	bl	8000d70 <HAL_ADCEx_Calibration_Start>
		calibrated = 1;
 8007fcc:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <JoyStick_Init+0x1bc>)
 8007fce:	2201      	movs	r2, #1
 8007fd0:	701a      	strb	r2, [r3, #0]
	}
}
 8007fd2:	bf00      	nop
 8007fd4:	3730      	adds	r7, #48	; 0x30
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	40010800 	.word	0x40010800
 8007fe0:	40021000 	.word	0x40021000
 8007fe4:	40010c00 	.word	0x40010c00
 8007fe8:	40011000 	.word	0x40011000
 8007fec:	40011400 	.word	0x40011400
 8007ff0:	40011800 	.word	0x40011800
 8007ff4:	20000278 	.word	0x20000278
 8007ff8:	200002a8 	.word	0x200002a8
 8007ffc:	200002b4 	.word	0x200002b4

08008000 <JoyStick_Read>:


void JoyStick_Read(JOYSTICK* Joystick_PTR, uint16_t* JoyStick_XY)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
	// Select The JoyStick Instance ADC Channel For X
	sConfig.Channel = Joystick_PTR -> ADCx_CH;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	4a1b      	ldr	r2, [pc, #108]	; (800807c <JoyStick_Read+0x7c>)
 8008010:	6013      	str	r3, [r2, #0]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8008012:	491a      	ldr	r1, [pc, #104]	; (800807c <JoyStick_Read+0x7c>)
 8008014:	481a      	ldr	r0, [pc, #104]	; (8008080 <JoyStick_Read+0x80>)
 8008016:	f7f8 fd27 	bl	8000a68 <HAL_ADC_ConfigChannel>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc);
 800801a:	4819      	ldr	r0, [pc, #100]	; (8008080 <JoyStick_Read+0x80>)
 800801c:	f7f8 fb70 	bl	8000700 <HAL_ADC_Start>
	// Poll ADC1 Peripheral & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc, 1);
 8008020:	2101      	movs	r1, #1
 8008022:	4817      	ldr	r0, [pc, #92]	; (8008080 <JoyStick_Read+0x80>)
 8008024:	f7f8 fc1a 	bl	800085c <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result Write It To JoyStick X
	Joystick_PTR -> Joystick_xyValues[0] = HAL_ADC_GetValue(&hadc);
 8008028:	4815      	ldr	r0, [pc, #84]	; (8008080 <JoyStick_Read+0x80>)
 800802a:	f7f8 fd11 	bl	8000a50 <HAL_ADC_GetValue>
 800802e:	4603      	mov	r3, r0
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	831a      	strh	r2, [r3, #24]
	JoyStick_XY[0] = Joystick_PTR -> Joystick_xyValues[0];
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	8b1a      	ldrh	r2, [r3, #24]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	801a      	strh	r2, [r3, #0]

	// Select The JoyStick Instance ADC Channel For Y
	sConfig.Channel = Joystick_PTR -> ADCy_CH;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	4a0e      	ldr	r2, [pc, #56]	; (800807c <JoyStick_Read+0x7c>)
 8008044:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8008046:	490d      	ldr	r1, [pc, #52]	; (800807c <JoyStick_Read+0x7c>)
 8008048:	480d      	ldr	r0, [pc, #52]	; (8008080 <JoyStick_Read+0x80>)
 800804a:	f7f8 fd0d 	bl	8000a68 <HAL_ADC_ConfigChannel>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc);
 800804e:	480c      	ldr	r0, [pc, #48]	; (8008080 <JoyStick_Read+0x80>)
 8008050:	f7f8 fb56 	bl	8000700 <HAL_ADC_Start>
	// Poll ADC1 Peripheral & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc, 1);
 8008054:	2101      	movs	r1, #1
 8008056:	480a      	ldr	r0, [pc, #40]	; (8008080 <JoyStick_Read+0x80>)
 8008058:	f7f8 fc00 	bl	800085c <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result Write It To JoyStick Y
	Joystick_PTR -> Joystick_xyValues[1] = HAL_ADC_GetValue(&hadc);
 800805c:	4808      	ldr	r0, [pc, #32]	; (8008080 <JoyStick_Read+0x80>)
 800805e:	f7f8 fcf7 	bl	8000a50 <HAL_ADC_GetValue>
 8008062:	4603      	mov	r3, r0
 8008064:	b29a      	uxth	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	835a      	strh	r2, [r3, #26]
	JoyStick_XY[1] = Joystick_PTR -> Joystick_xyValues[1];
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	3302      	adds	r3, #2
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	8b52      	ldrh	r2, [r2, #26]
 8008072:	801a      	strh	r2, [r3, #0]
}
 8008074:	bf00      	nop
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	200002a8 	.word	0x200002a8
 8008080:	20000278 	.word	0x20000278

08008084 <JoyStick_ReadButton>:

Joystick_PinState JoyStick_ReadButton(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(Joystick_Button_GPIO_Port, Joystick_Button_Pin) == GPIO_PIN_RESET)
 8008088:	2101      	movs	r1, #1
 800808a:	4805      	ldr	r0, [pc, #20]	; (80080a0 <JoyStick_ReadButton+0x1c>)
 800808c:	f7f9 fb74 	bl	8001778 <HAL_GPIO_ReadPin>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <JoyStick_ReadButton+0x16>
	{
		return JOYSTICK_PIN_RESET;
 8008096:	2300      	movs	r3, #0
 8008098:	e000      	b.n	800809c <JoyStick_ReadButton+0x18>
	}
	else
	{
		return JOYSTICK_PIN_SET;
 800809a:	2301      	movs	r3, #1
	}
}
 800809c:	4618      	mov	r0, r3
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	40010800 	.word	0x40010800

080080a4 <waitForJoystickMid>:

void waitForJoystickMid(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
	while(1) { // wait for the joystick to be release (back to mid position)
		JoyStick_Read(Joystick_Handler, Joystick_xy);
 80080a8:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <waitForJoystickMid+0x40>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	490e      	ldr	r1, [pc, #56]	; (80080e8 <waitForJoystickMid+0x44>)
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff ffa6 	bl	8008000 <JoyStick_Read>
		if (JoystickIsReleased(Joystick_xy)) {break;}
 80080b4:	4b0c      	ldr	r3, [pc, #48]	; (80080e8 <waitForJoystickMid+0x44>)
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80080bc:	d9f4      	bls.n	80080a8 <waitForJoystickMid+0x4>
 80080be:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <waitForJoystickMid+0x44>)
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80080c6:	d2ef      	bcs.n	80080a8 <waitForJoystickMid+0x4>
 80080c8:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <waitForJoystickMid+0x44>)
 80080ca:	885b      	ldrh	r3, [r3, #2]
 80080cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80080d0:	d9ea      	bls.n	80080a8 <waitForJoystickMid+0x4>
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <waitForJoystickMid+0x44>)
 80080d4:	885b      	ldrh	r3, [r3, #2]
 80080d6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80080da:	d300      	bcc.n	80080de <waitForJoystickMid+0x3a>
		JoyStick_Read(Joystick_Handler, Joystick_xy);
 80080dc:	e7e4      	b.n	80080a8 <waitForJoystickMid+0x4>
		if (JoystickIsReleased(Joystick_xy)) {break;}
 80080de:	bf00      	nop
	}
}
 80080e0:	bf00      	nop
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20000010 	.word	0x20000010
 80080e8:	200037f4 	.word	0x200037f4

080080ec <string_length>:

static uint8 string_length(sint8 str[]);


static uint8 string_length(sint8 str[])
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	uint8 count;
	/* count the string start from element 0 until the element before the NULL terminator */
	for(count = 0; str[count] != '\0'; ++count);
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
 80080f8:	e002      	b.n	8008100 <string_length+0x14>
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	3301      	adds	r3, #1
 80080fe:	73fb      	strb	r3, [r7, #15]
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	4413      	add	r3, r2
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1f6      	bne.n	80080fa <string_length+0xe>
	return count;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr

08008118 <OLED_Init>:

Std_ReturnType OLED_Init(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
	Std_ReturnType return_type = E_NOT_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	71fb      	strb	r3, [r7, #7]
	if(SSD1306_Init() == 1)
 8008122:	f002 fa9b 	bl	800a65c <SSD1306_Init>
 8008126:	4603      	mov	r3, r0
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <OLED_Init+0x18>
	{
		return_type = E_OK;
 800812c:	2301      	movs	r3, #1
 800812e:	71fb      	strb	r3, [r7, #7]
	}

	return return_type;
 8008130:	79fb      	ldrb	r3, [r7, #7]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <OLED_setTextDisplay>:

void OLED_setTextDisplay(sint8* line1, sint8* line2, sint8* line3, sint8* line4)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
 8008148:	603b      	str	r3, [r7, #0]
	if(*line1)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d019      	beq.n	8008186 <OLED_setTextDisplay+0x4a>
	{
		SSD1306_GotoXY(0, 0);
 8008152:	2100      	movs	r1, #0
 8008154:	2000      	movs	r0, #0
 8008156:	f002 fbe9 	bl	800a92c <SSD1306_GotoXY>
		SSD1306_Puts((sint8*)line1, &Font_11x18, 1);
 800815a:	2201      	movs	r2, #1
 800815c:	4939      	ldr	r1, [pc, #228]	; (8008244 <OLED_setTextDisplay+0x108>)
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f002 fc7a 	bl	800aa58 <SSD1306_Puts>
		for (uint8 count = string_length(line1); count < 20; count++)
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f7ff ffc1 	bl	80080ec <string_length>
 800816a:	4603      	mov	r3, r0
 800816c:	75fb      	strb	r3, [r7, #23]
 800816e:	e007      	b.n	8008180 <OLED_setTextDisplay+0x44>
		{
			SSD1306_Putc(' ', &Font_11x18, 1);
 8008170:	2201      	movs	r2, #1
 8008172:	4934      	ldr	r1, [pc, #208]	; (8008244 <OLED_setTextDisplay+0x108>)
 8008174:	2020      	movs	r0, #32
 8008176:	f002 fbef 	bl	800a958 <SSD1306_Putc>
		for (uint8 count = string_length(line1); count < 20; count++)
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	3301      	adds	r3, #1
 800817e:	75fb      	strb	r3, [r7, #23]
 8008180:	7dfb      	ldrb	r3, [r7, #23]
 8008182:	2b13      	cmp	r3, #19
 8008184:	d9f4      	bls.n	8008170 <OLED_setTextDisplay+0x34>
		}
	}
	if(*line2)
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d019      	beq.n	80081c2 <OLED_setTextDisplay+0x86>
	{
		SSD1306_GotoXY(0, 1);
 800818e:	2101      	movs	r1, #1
 8008190:	2000      	movs	r0, #0
 8008192:	f002 fbcb 	bl	800a92c <SSD1306_GotoXY>
		SSD1306_Puts((sint8*)line2, &Font_11x18, 1);
 8008196:	2201      	movs	r2, #1
 8008198:	492a      	ldr	r1, [pc, #168]	; (8008244 <OLED_setTextDisplay+0x108>)
 800819a:	68b8      	ldr	r0, [r7, #8]
 800819c:	f002 fc5c 	bl	800aa58 <SSD1306_Puts>
		for (uint8 count = string_length(line2); count < 20; count++)
 80081a0:	68b8      	ldr	r0, [r7, #8]
 80081a2:	f7ff ffa3 	bl	80080ec <string_length>
 80081a6:	4603      	mov	r3, r0
 80081a8:	75bb      	strb	r3, [r7, #22]
 80081aa:	e007      	b.n	80081bc <OLED_setTextDisplay+0x80>
		{
			SSD1306_Putc(' ', &Font_11x18, 1);
 80081ac:	2201      	movs	r2, #1
 80081ae:	4925      	ldr	r1, [pc, #148]	; (8008244 <OLED_setTextDisplay+0x108>)
 80081b0:	2020      	movs	r0, #32
 80081b2:	f002 fbd1 	bl	800a958 <SSD1306_Putc>
		for (uint8 count = string_length(line2); count < 20; count++)
 80081b6:	7dbb      	ldrb	r3, [r7, #22]
 80081b8:	3301      	adds	r3, #1
 80081ba:	75bb      	strb	r3, [r7, #22]
 80081bc:	7dbb      	ldrb	r3, [r7, #22]
 80081be:	2b13      	cmp	r3, #19
 80081c0:	d9f4      	bls.n	80081ac <OLED_setTextDisplay+0x70>
		}
	}
	if(*line3)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d019      	beq.n	80081fe <OLED_setTextDisplay+0xc2>
	{
		SSD1306_GotoXY(0, 2);
 80081ca:	2102      	movs	r1, #2
 80081cc:	2000      	movs	r0, #0
 80081ce:	f002 fbad 	bl	800a92c <SSD1306_GotoXY>
		SSD1306_Puts((sint8*)line3, &Font_11x18, 1);
 80081d2:	2201      	movs	r2, #1
 80081d4:	491b      	ldr	r1, [pc, #108]	; (8008244 <OLED_setTextDisplay+0x108>)
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f002 fc3e 	bl	800aa58 <SSD1306_Puts>
		for (uint8 count = string_length(line3); count < 20; count++)
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff ff85 	bl	80080ec <string_length>
 80081e2:	4603      	mov	r3, r0
 80081e4:	757b      	strb	r3, [r7, #21]
 80081e6:	e007      	b.n	80081f8 <OLED_setTextDisplay+0xbc>
		{
			SSD1306_Putc(' ', &Font_11x18, 1);
 80081e8:	2201      	movs	r2, #1
 80081ea:	4916      	ldr	r1, [pc, #88]	; (8008244 <OLED_setTextDisplay+0x108>)
 80081ec:	2020      	movs	r0, #32
 80081ee:	f002 fbb3 	bl	800a958 <SSD1306_Putc>
		for (uint8 count = string_length(line3); count < 20; count++)
 80081f2:	7d7b      	ldrb	r3, [r7, #21]
 80081f4:	3301      	adds	r3, #1
 80081f6:	757b      	strb	r3, [r7, #21]
 80081f8:	7d7b      	ldrb	r3, [r7, #21]
 80081fa:	2b13      	cmp	r3, #19
 80081fc:	d9f4      	bls.n	80081e8 <OLED_setTextDisplay+0xac>
		}
	}
	if(*line4)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d019      	beq.n	800823a <OLED_setTextDisplay+0xfe>
	{
		SSD1306_GotoXY(0, 3);
 8008206:	2103      	movs	r1, #3
 8008208:	2000      	movs	r0, #0
 800820a:	f002 fb8f 	bl	800a92c <SSD1306_GotoXY>
		SSD1306_Puts((sint8*)line4, &Font_11x18, 1);
 800820e:	2201      	movs	r2, #1
 8008210:	490c      	ldr	r1, [pc, #48]	; (8008244 <OLED_setTextDisplay+0x108>)
 8008212:	6838      	ldr	r0, [r7, #0]
 8008214:	f002 fc20 	bl	800aa58 <SSD1306_Puts>
		for (uint8 count = string_length(line4); count < 20; count++)
 8008218:	6838      	ldr	r0, [r7, #0]
 800821a:	f7ff ff67 	bl	80080ec <string_length>
 800821e:	4603      	mov	r3, r0
 8008220:	753b      	strb	r3, [r7, #20]
 8008222:	e007      	b.n	8008234 <OLED_setTextDisplay+0xf8>
		{
			SSD1306_Putc(' ', &Font_11x18, 1);
 8008224:	2201      	movs	r2, #1
 8008226:	4907      	ldr	r1, [pc, #28]	; (8008244 <OLED_setTextDisplay+0x108>)
 8008228:	2020      	movs	r0, #32
 800822a:	f002 fb95 	bl	800a958 <SSD1306_Putc>
		for (uint8 count = string_length(line4); count < 20; count++)
 800822e:	7d3b      	ldrb	r3, [r7, #20]
 8008230:	3301      	adds	r3, #1
 8008232:	753b      	strb	r3, [r7, #20]
 8008234:	7d3b      	ldrb	r3, [r7, #20]
 8008236:	2b13      	cmp	r3, #19
 8008238:	d9f4      	bls.n	8008224 <OLED_setTextDisplay+0xe8>
		}
	}
}
 800823a:	bf00      	nop
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000008 	.word	0x20000008

08008248 <OLED_setTextRow>:

void OLED_setTextRow(sint8* line, uint8 row)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
	SSD1306_GotoXY(0, row);
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	b29b      	uxth	r3, r3
 8008258:	4619      	mov	r1, r3
 800825a:	2000      	movs	r0, #0
 800825c:	f002 fb66 	bl	800a92c <SSD1306_GotoXY>
	SSD1306_Puts((sint8*)line, &Font_11x18, 1);
 8008260:	2201      	movs	r2, #1
 8008262:	490d      	ldr	r1, [pc, #52]	; (8008298 <OLED_setTextRow+0x50>)
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f002 fbf7 	bl	800aa58 <SSD1306_Puts>
	for (uint8 count = string_length(line); count < 20; count++)
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff ff3e 	bl	80080ec <string_length>
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]
 8008274:	e007      	b.n	8008286 <OLED_setTextRow+0x3e>
	{
		SSD1306_Putc(' ', &Font_11x18, 1);
 8008276:	2201      	movs	r2, #1
 8008278:	4907      	ldr	r1, [pc, #28]	; (8008298 <OLED_setTextRow+0x50>)
 800827a:	2020      	movs	r0, #32
 800827c:	f002 fb6c 	bl	800a958 <SSD1306_Putc>
	for (uint8 count = string_length(line); count < 20; count++)
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	3301      	adds	r3, #1
 8008284:	73fb      	strb	r3, [r7, #15]
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	2b13      	cmp	r3, #19
 800828a:	d9f4      	bls.n	8008276 <OLED_setTextRow+0x2e>
	}
}
 800828c:	bf00      	nop
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20000008 	.word	0x20000008

0800829c <OLED_Clear>:

void OLED_Clear(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80082a0:	f002 fbff 	bl	800aaa2 <SSD1306_Clear>
	SSD1306_GotoXY(0, 0);
 80082a4:	2100      	movs	r1, #0
 80082a6:	2000      	movs	r0, #0
 80082a8:	f002 fb40 	bl	800a92c <SSD1306_GotoXY>
}
 80082ac:	bf00      	nop
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <SD_init>:
extern UINT byteswritten, bytesread;


// SD card init function
Std_ReturnType SD_init(GPIO_TypeDef * SD_CS_PORT, uint16_t SD_CS_PIN)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	807b      	strh	r3, [r7, #2]
	Std_ReturnType return_type = E_NOT_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
	uint8 ErrorCount = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73bb      	strb	r3, [r7, #14]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80082c4:	887b      	ldrh	r3, [r7, #2]
 80082c6:	2200      	movs	r2, #0
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7f9 fa6b 	bl	80017a6 <HAL_GPIO_WritePin>
	MX_FATFS_Init();
 80082d0:	f000 f8d8 	bl	8008484 <MX_FATFS_Init>
	do
	{
		return_type = f_mount(&fs , "" , 0);
 80082d4:	2200      	movs	r2, #0
 80082d6:	490e      	ldr	r1, [pc, #56]	; (8008310 <SD_init+0x60>)
 80082d8:	480e      	ldr	r0, [pc, #56]	; (8008314 <SD_init+0x64>)
 80082da:	f7fe fd55 	bl	8006d88 <f_mount>
 80082de:	4603      	mov	r3, r0
 80082e0:	73fb      	strb	r3, [r7, #15]
		ErrorCount ++;
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	3301      	adds	r3, #1
 80082e6:	73bb      	strb	r3, [r7, #14]
	}while(return_type != FR_OK && ErrorCount < 5);
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <SD_init+0x44>
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d9ef      	bls.n	80082d4 <SD_init+0x24>

	if(return_type == FR_OK)
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d102      	bne.n	8008300 <SD_init+0x50>
		return_type = E_OK;
 80082fa:	2301      	movs	r3, #1
 80082fc:	73fb      	strb	r3, [r7, #15]
 80082fe:	e001      	b.n	8008304 <SD_init+0x54>
	else
		return_type = E_NOT_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]

	return return_type;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	0800b230 	.word	0x0800b230
 8008314:	2000276c 	.word	0x2000276c

08008318 <SD_ReadUntil>:
	return return_type;  // success

}

Std_ReturnType SD_ReadUntil(uint8* rdataPTR, uint8* path, uint8 StopChar)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType return_type = E_NOT_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	76fb      	strb	r3, [r7, #27]
	uint32 size;
	uint32 count;

	//Open file for reading
	if(f_open(&file, (const void*)path, FA_READ) != FR_OK)
 800832a:	2201      	movs	r2, #1
 800832c:	68b9      	ldr	r1, [r7, #8]
 800832e:	4826      	ldr	r0, [pc, #152]	; (80083c8 <SD_ReadUntil+0xb0>)
 8008330:	f7fe fd74 	bl	8006e1c <f_open>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <SD_ReadUntil+0x26>
	{
		return return_type;
 800833a:	7efb      	ldrb	r3, [r7, #27]
 800833c:	e040      	b.n	80083c0 <SD_ReadUntil+0xa8>
	}

	size = f_size(&file);
 800833e:	4b22      	ldr	r3, [pc, #136]	; (80083c8 <SD_ReadUntil+0xb0>)
 8008340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008344:	330c      	adds	r3, #12
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	617b      	str	r3, [r7, #20]

	//Read text from files until NULL
	for(count = 0; count < size; count++)
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	e01f      	b.n	8008390 <SD_ReadUntil+0x78>
	{
		res = f_read(&file, (uint8*)&rdataPTR[count], 1, &bytesread);
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	18d1      	adds	r1, r2, r3
 8008356:	4b1d      	ldr	r3, [pc, #116]	; (80083cc <SD_ReadUntil+0xb4>)
 8008358:	2201      	movs	r2, #1
 800835a:	481b      	ldr	r0, [pc, #108]	; (80083c8 <SD_ReadUntil+0xb0>)
 800835c:	f7ff f898 	bl	8007490 <f_read>
 8008360:	4603      	mov	r3, r0
 8008362:	461a      	mov	r2, r3
 8008364:	4b1a      	ldr	r3, [pc, #104]	; (80083d0 <SD_ReadUntil+0xb8>)
 8008366:	701a      	strb	r2, [r3, #0]
		if(rdataPTR[count] == 0x00 || rdataPTR[count] == StopChar) // NULL string
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d006      	beq.n	8008382 <SD_ReadUntil+0x6a>
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	4413      	add	r3, r2
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	79fa      	ldrb	r2, [r7, #7]
 800837e:	429a      	cmp	r2, r3
 8008380:	d103      	bne.n	800838a <SD_ReadUntil+0x72>
		{
			bytesread = count;
 8008382:	4a12      	ldr	r2, [pc, #72]	; (80083cc <SD_ReadUntil+0xb4>)
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	6013      	str	r3, [r2, #0]
			break;
 8008388:	e006      	b.n	8008398 <SD_ReadUntil+0x80>
	for(count = 0; count < size; count++)
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	3301      	adds	r3, #1
 800838e:	61fb      	str	r3, [r7, #28]
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	429a      	cmp	r2, r3
 8008396:	d3db      	bcc.n	8008350 <SD_ReadUntil+0x38>
		}
	}

	rdataPTR[count] = 0x0;
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	4413      	add	r3, r2
 800839e:	2200      	movs	r2, #0
 80083a0:	701a      	strb	r2, [r3, #0]
	bytesread = count;
 80083a2:	4a0a      	ldr	r2, [pc, #40]	; (80083cc <SD_ReadUntil+0xb4>)
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	6013      	str	r3, [r2, #0]

	//Reading error handling
	if(bytesread == 0)
 80083a8:	4b08      	ldr	r3, [pc, #32]	; (80083cc <SD_ReadUntil+0xb4>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <SD_ReadUntil+0x9c>
	{
		return return_type;
 80083b0:	7efb      	ldrb	r3, [r7, #27]
 80083b2:	e005      	b.n	80083c0 <SD_ReadUntil+0xa8>
	}

	//Close file
	f_close(&file);
 80083b4:	4804      	ldr	r0, [pc, #16]	; (80083c8 <SD_ReadUntil+0xb0>)
 80083b6:	f7ff fb5f 	bl	8007a78 <f_close>
	return_type = E_OK;
 80083ba:	2301      	movs	r3, #1
 80083bc:	76fb      	strb	r3, [r7, #27]
	return return_type;  // success
 80083be:	7efb      	ldrb	r3, [r7, #27]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3720      	adds	r7, #32
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	20003814 	.word	0x20003814
 80083cc:	200037f8 	.word	0x200037f8
 80083d0:	200049b1 	.word	0x200049b1

080083d4 <SD_NextFileDirectory>:

// SD card test Read function
Std_ReturnType SD_NextFileDirectory(sint8* path)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	f107 0318 	add.w	r3, r7, #24
 80083e2:	3b14      	subs	r3, #20
 80083e4:	6018      	str	r0, [r3, #0]
	Std_ReturnType return_type = E_NOT_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80083ec:	f102 0217 	add.w	r2, r2, #23
 80083f0:	7013      	strb	r3, [r2, #0]
	DIR directory;

	if(f_opendir(&directory, path) != FR_OK) {return return_type;}
 80083f2:	f107 0318 	add.w	r3, r7, #24
 80083f6:	3b14      	subs	r3, #20
 80083f8:	f107 0218 	add.w	r2, r7, #24
 80083fc:	3a0c      	subs	r2, #12
 80083fe:	6819      	ldr	r1, [r3, #0]
 8008400:	4610      	mov	r0, r2
 8008402:	f7ff fb65 	bl	8007ad0 <f_opendir>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <SD_NextFileDirectory+0x44>
 800840c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008410:	f103 0317 	add.w	r3, r3, #23
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	e02b      	b.n	8008470 <SD_NextFileDirectory+0x9c>
	if(f_readdir(&directory, &fileInfo) != FR_OK || fileInfo.fname[0] == '\0') {return return_type;}
 8008418:	f107 0318 	add.w	r3, r7, #24
 800841c:	3b0c      	subs	r3, #12
 800841e:	4917      	ldr	r1, [pc, #92]	; (800847c <SD_NextFileDirectory+0xa8>)
 8008420:	4618      	mov	r0, r3
 8008422:	f7ff fbf7 	bl	8007c14 <f_readdir>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d103      	bne.n	8008434 <SD_NextFileDirectory+0x60>
 800842c:	4b13      	ldr	r3, [pc, #76]	; (800847c <SD_NextFileDirectory+0xa8>)
 800842e:	7a5b      	ldrb	r3, [r3, #9]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d105      	bne.n	8008440 <SD_NextFileDirectory+0x6c>
 8008434:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008438:	f103 0317 	add.w	r3, r3, #23
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	e017      	b.n	8008470 <SD_NextFileDirectory+0x9c>

#if _USE_LFN
	path = *fileInfo.lfname ? fileInfo.lfname : fileInfo.fname;
 8008440:	4b0e      	ldr	r3, [pc, #56]	; (800847c <SD_NextFileDirectory+0xa8>)
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <SD_NextFileDirectory+0x7c>
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <SD_NextFileDirectory+0xa8>)
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	e000      	b.n	8008452 <SD_NextFileDirectory+0x7e>
 8008450:	4a0b      	ldr	r2, [pc, #44]	; (8008480 <SD_NextFileDirectory+0xac>)
 8008452:	f107 0318 	add.w	r3, r7, #24
 8008456:	3b14      	subs	r3, #20
 8008458:	601a      	str	r2, [r3, #0]
#else
	path = fileInfo.fname;
#endif

	return_type = E_OK;
 800845a:	2301      	movs	r3, #1
 800845c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008460:	f102 0217 	add.w	r2, r2, #23
 8008464:	7013      	strb	r3, [r2, #0]
	return return_type;  // success
 8008466:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800846a:	f103 0317 	add.w	r3, r3, #23
 800846e:	781b      	ldrb	r3, [r3, #0]
}
 8008470:	4618      	mov	r0, r3
 8008472:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20002740 	.word	0x20002740
 8008480:	20002749 	.word	0x20002749

08008484 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008488:	4904      	ldr	r1, [pc, #16]	; (800849c <MX_FATFS_Init+0x18>)
 800848a:	4805      	ldr	r0, [pc, #20]	; (80084a0 <MX_FATFS_Init+0x1c>)
 800848c:	f7ff fc60 	bl	8007d50 <FATFS_LinkDriver>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	4b03      	ldr	r3, [pc, #12]	; (80084a4 <MX_FATFS_Init+0x20>)
 8008496:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008498:	bf00      	nop
 800849a:	bd80      	pop	{r7, pc}
 800849c:	200006cc 	.word	0x200006cc
 80084a0:	2000001c 	.word	0x2000001c
 80084a4:	200006d0 	.word	0x200006d0

080084a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80084a8:	b480      	push	{r7}
 80084aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80084ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr
	...

080084b8 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80084bc:	2200      	movs	r2, #0
 80084be:	2110      	movs	r1, #16
 80084c0:	4802      	ldr	r0, [pc, #8]	; (80084cc <SELECT+0x14>)
 80084c2:	f7f9 f970 	bl	80017a6 <HAL_GPIO_WritePin>
}
 80084c6:	bf00      	nop
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	40010800 	.word	0x40010800

080084d0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80084d4:	2201      	movs	r2, #1
 80084d6:	2110      	movs	r1, #16
 80084d8:	4802      	ldr	r0, [pc, #8]	; (80084e4 <DESELECT+0x14>)
 80084da:	f7f9 f964 	bl	80017a6 <HAL_GPIO_WritePin>
}
 80084de:	bf00      	nop
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	40010800 	.word	0x40010800

080084e8 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80084f2:	bf00      	nop
 80084f4:	4808      	ldr	r0, [pc, #32]	; (8008518 <SPI_TxByte+0x30>)
 80084f6:	f7fa ff18 	bl	800332a <HAL_SPI_GetState>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d1f9      	bne.n	80084f4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8008500:	1df9      	adds	r1, r7, #7
 8008502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008506:	2201      	movs	r2, #1
 8008508:	4803      	ldr	r0, [pc, #12]	; (8008518 <SPI_TxByte+0x30>)
 800850a:	f7fa fc31 	bl	8002d70 <HAL_SPI_Transmit>
}
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	2000494c 	.word	0x2000494c

0800851c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8008522:	23ff      	movs	r3, #255	; 0xff
 8008524:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800852a:	bf00      	nop
 800852c:	4809      	ldr	r0, [pc, #36]	; (8008554 <SPI_RxByte+0x38>)
 800852e:	f7fa fefc 	bl	800332a <HAL_SPI_GetState>
 8008532:	4603      	mov	r3, r0
 8008534:	2b01      	cmp	r3, #1
 8008536:	d1f9      	bne.n	800852c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8008538:	1dba      	adds	r2, r7, #6
 800853a:	1df9      	adds	r1, r7, #7
 800853c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	2301      	movs	r3, #1
 8008544:	4803      	ldr	r0, [pc, #12]	; (8008554 <SPI_RxByte+0x38>)
 8008546:	f7fa fd50 	bl	8002fea <HAL_SPI_TransmitReceive>

  return data;
 800854a:	79bb      	ldrb	r3, [r7, #6]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	2000494c 	.word	0x2000494c

08008558 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8008560:	f7ff ffdc 	bl	800851c <SPI_RxByte>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	701a      	strb	r2, [r3, #0]
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800857a:	4b0b      	ldr	r3, [pc, #44]	; (80085a8 <SD_ReadyWait+0x34>)
 800857c:	2232      	movs	r2, #50	; 0x32
 800857e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8008580:	f7ff ffcc 	bl	800851c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8008584:	f7ff ffca 	bl	800851c <SPI_RxByte>
 8008588:	4603      	mov	r3, r0
 800858a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	2bff      	cmp	r3, #255	; 0xff
 8008590:	d004      	beq.n	800859c <SD_ReadyWait+0x28>
 8008592:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <SD_ReadyWait+0x34>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f3      	bne.n	8008584 <SD_ReadyWait+0x10>

  return res;
 800859c:	79fb      	ldrb	r3, [r7, #7]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	200049bd 	.word	0x200049bd

080085ac <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80085b2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80085b6:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80085b8:	f7ff ff8a 	bl	80084d0 <DESELECT>

  for(int i = 0; i < 10; i++)
 80085bc:	2300      	movs	r3, #0
 80085be:	613b      	str	r3, [r7, #16]
 80085c0:	e005      	b.n	80085ce <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80085c2:	20ff      	movs	r0, #255	; 0xff
 80085c4:	f7ff ff90 	bl	80084e8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	3301      	adds	r3, #1
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	2b09      	cmp	r3, #9
 80085d2:	ddf6      	ble.n	80085c2 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80085d4:	f7ff ff70 	bl	80084b8 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80085d8:	2340      	movs	r3, #64	; 0x40
 80085da:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80085dc:	2300      	movs	r3, #0
 80085de:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80085e0:	2300      	movs	r3, #0
 80085e2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80085ec:	2395      	movs	r3, #149	; 0x95
 80085ee:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e009      	b.n	800860a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80085f6:	1d3a      	adds	r2, r7, #4
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff ff72 	bl	80084e8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3301      	adds	r3, #1
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b05      	cmp	r3, #5
 800860e:	ddf2      	ble.n	80085f6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8008610:	e002      	b.n	8008618 <SD_PowerOn+0x6c>
  {
    Count--;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	3b01      	subs	r3, #1
 8008616:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8008618:	f7ff ff80 	bl	800851c <SPI_RxByte>
 800861c:	4603      	mov	r3, r0
 800861e:	2b01      	cmp	r3, #1
 8008620:	d002      	beq.n	8008628 <SD_PowerOn+0x7c>
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1f4      	bne.n	8008612 <SD_PowerOn+0x66>
  }

  DESELECT();
 8008628:	f7ff ff52 	bl	80084d0 <DESELECT>
  SPI_TxByte(0XFF);
 800862c:	20ff      	movs	r0, #255	; 0xff
 800862e:	f7ff ff5b 	bl	80084e8 <SPI_TxByte>

  PowerFlag = 1;
 8008632:	4b03      	ldr	r3, [pc, #12]	; (8008640 <SD_PowerOn+0x94>)
 8008634:	2201      	movs	r2, #1
 8008636:	701a      	strb	r2, [r3, #0]
}
 8008638:	bf00      	nop
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	200002b6 	.word	0x200002b6

08008644 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8008648:	4b03      	ldr	r3, [pc, #12]	; (8008658 <SD_PowerOff+0x14>)
 800864a:	2200      	movs	r2, #0
 800864c:	701a      	strb	r2, [r3, #0]
}
 800864e:	bf00      	nop
 8008650:	46bd      	mov	sp, r7
 8008652:	bc80      	pop	{r7}
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	200002b6 	.word	0x200002b6

0800865c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8008660:	4b02      	ldr	r3, [pc, #8]	; (800866c <SD_CheckPower+0x10>)
 8008662:	781b      	ldrb	r3, [r3, #0]
}
 8008664:	4618      	mov	r0, r3
 8008666:	46bd      	mov	sp, r7
 8008668:	bc80      	pop	{r7}
 800866a:	4770      	bx	lr
 800866c:	200002b6 	.word	0x200002b6

08008670 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800867a:	4b17      	ldr	r3, [pc, #92]	; (80086d8 <SD_RxDataBlock+0x68>)
 800867c:	220a      	movs	r2, #10
 800867e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8008680:	f7ff ff4c 	bl	800851c <SPI_RxByte>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	2bff      	cmp	r3, #255	; 0xff
 800868c:	d104      	bne.n	8008698 <SD_RxDataBlock+0x28>
 800868e:	4b12      	ldr	r3, [pc, #72]	; (80086d8 <SD_RxDataBlock+0x68>)
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1f3      	bne.n	8008680 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	2bfe      	cmp	r3, #254	; 0xfe
 800869c:	d001      	beq.n	80086a2 <SD_RxDataBlock+0x32>
    return FALSE;
 800869e:	2300      	movs	r3, #0
 80086a0:	e016      	b.n	80086d0 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	1c5a      	adds	r2, r3, #1
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff ff55 	bl	8008558 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff ff4f 	bl	8008558 <SPI_RxBytePtr>
  } while(btr -= 2);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	3b02      	subs	r3, #2
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1ed      	bne.n	80086a2 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80086c6:	f7ff ff29 	bl	800851c <SPI_RxByte>
  SPI_RxByte();
 80086ca:	f7ff ff27 	bl	800851c <SPI_RxByte>

  return TRUE;
 80086ce:	2301      	movs	r3, #1
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	200049be 	.word	0x200049be

080086dc <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80086ec:	f7ff ff42 	bl	8008574 <SD_ReadyWait>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2bff      	cmp	r3, #255	; 0xff
 80086f4:	d001      	beq.n	80086fa <SD_TxDataBlock+0x1e>
    return FALSE;
 80086f6:	2300      	movs	r3, #0
 80086f8:	e040      	b.n	800877c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80086fa:	78fb      	ldrb	r3, [r7, #3]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff fef3 	bl	80084e8 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	2bfd      	cmp	r3, #253	; 0xfd
 8008706:	d031      	beq.n	800876c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fee7 	bl	80084e8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff fee0 	bl	80084e8 <SPI_TxByte>
    } while (--wc);
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	3b01      	subs	r3, #1
 800872c:	73bb      	strb	r3, [r7, #14]
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1eb      	bne.n	800870c <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8008734:	f7ff fef2 	bl	800851c <SPI_RxByte>
    SPI_RxByte();
 8008738:	f7ff fef0 	bl	800851c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 800873c:	e00b      	b.n	8008756 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800873e:	f7ff feed 	bl	800851c <SPI_RxByte>
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	f003 031f 	and.w	r3, r3, #31
 800874c:	2b05      	cmp	r3, #5
 800874e:	d006      	beq.n	800875e <SD_TxDataBlock+0x82>
        break;

      i++;
 8008750:	7b7b      	ldrb	r3, [r7, #13]
 8008752:	3301      	adds	r3, #1
 8008754:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8008756:	7b7b      	ldrb	r3, [r7, #13]
 8008758:	2b40      	cmp	r3, #64	; 0x40
 800875a:	d9f0      	bls.n	800873e <SD_TxDataBlock+0x62>
 800875c:	e000      	b.n	8008760 <SD_TxDataBlock+0x84>
        break;
 800875e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8008760:	bf00      	nop
 8008762:	f7ff fedb 	bl	800851c <SPI_RxByte>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0fa      	beq.n	8008762 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	f003 031f 	and.w	r3, r3, #31
 8008772:	2b05      	cmp	r3, #5
 8008774:	d101      	bne.n	800877a <SD_TxDataBlock+0x9e>
    return TRUE;
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	4603      	mov	r3, r0
 800878c:	6039      	str	r1, [r7, #0]
 800878e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8008790:	f7ff fef0 	bl	8008574 <SD_ReadyWait>
 8008794:	4603      	mov	r3, r0
 8008796:	2bff      	cmp	r3, #255	; 0xff
 8008798:	d001      	beq.n	800879e <SD_SendCmd+0x1a>
    return 0xFF;
 800879a:	23ff      	movs	r3, #255	; 0xff
 800879c:	e040      	b.n	8008820 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7ff fea1 	bl	80084e8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	0e1b      	lsrs	r3, r3, #24
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fe9b 	bl	80084e8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	0c1b      	lsrs	r3, r3, #16
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fe95 	bl	80084e8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	0a1b      	lsrs	r3, r3, #8
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff fe8f 	bl	80084e8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff fe8a 	bl	80084e8 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	2b40      	cmp	r3, #64	; 0x40
 80087dc:	d101      	bne.n	80087e2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80087de:	2395      	movs	r3, #149	; 0x95
 80087e0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	2b48      	cmp	r3, #72	; 0x48
 80087e6:	d101      	bne.n	80087ec <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80087e8:	2387      	movs	r3, #135	; 0x87
 80087ea:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fe7a 	bl	80084e8 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	2b4c      	cmp	r3, #76	; 0x4c
 80087f8:	d101      	bne.n	80087fe <SD_SendCmd+0x7a>
    SPI_RxByte();
 80087fa:	f7ff fe8f 	bl	800851c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80087fe:	230a      	movs	r3, #10
 8008800:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8008802:	f7ff fe8b 	bl	800851c <SPI_RxByte>
 8008806:	4603      	mov	r3, r0
 8008808:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800880a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800880e:	2b00      	cmp	r3, #0
 8008810:	da05      	bge.n	800881e <SD_SendCmd+0x9a>
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	3b01      	subs	r3, #1
 8008816:	73bb      	strb	r3, [r7, #14]
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1f1      	bne.n	8008802 <SD_SendCmd+0x7e>

  return res;
 800881e:	7b7b      	ldrb	r3, [r7, #13]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8008828:	b590      	push	{r4, r7, lr}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8008838:	2301      	movs	r3, #1
 800883a:	e0d5      	b.n	80089e8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800883c:	4b6c      	ldr	r3, [pc, #432]	; (80089f0 <SD_disk_initialize+0x1c8>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	b2db      	uxtb	r3, r3
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <SD_disk_initialize+0x2a>
    return Stat;
 800884a:	4b69      	ldr	r3, [pc, #420]	; (80089f0 <SD_disk_initialize+0x1c8>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	b2db      	uxtb	r3, r3
 8008850:	e0ca      	b.n	80089e8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8008852:	f7ff feab 	bl	80085ac <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8008856:	f7ff fe2f 	bl	80084b8 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800885e:	2100      	movs	r1, #0
 8008860:	2040      	movs	r0, #64	; 0x40
 8008862:	f7ff ff8f 	bl	8008784 <SD_SendCmd>
 8008866:	4603      	mov	r3, r0
 8008868:	2b01      	cmp	r3, #1
 800886a:	f040 80a5 	bne.w	80089b8 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800886e:	4b61      	ldr	r3, [pc, #388]	; (80089f4 <SD_disk_initialize+0x1cc>)
 8008870:	2264      	movs	r2, #100	; 0x64
 8008872:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8008874:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008878:	2048      	movs	r0, #72	; 0x48
 800887a:	f7ff ff83 	bl	8008784 <SD_SendCmd>
 800887e:	4603      	mov	r3, r0
 8008880:	2b01      	cmp	r3, #1
 8008882:	d158      	bne.n	8008936 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
 8008888:	e00c      	b.n	80088a4 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800888a:	7bfc      	ldrb	r4, [r7, #15]
 800888c:	f7ff fe46 	bl	800851c <SPI_RxByte>
 8008890:	4603      	mov	r3, r0
 8008892:	461a      	mov	r2, r3
 8008894:	f107 0310 	add.w	r3, r7, #16
 8008898:	4423      	add	r3, r4
 800889a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	3301      	adds	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d9ef      	bls.n	800888a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80088aa:	7abb      	ldrb	r3, [r7, #10]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	f040 8083 	bne.w	80089b8 <SD_disk_initialize+0x190>
 80088b2:	7afb      	ldrb	r3, [r7, #11]
 80088b4:	2baa      	cmp	r3, #170	; 0xaa
 80088b6:	d17f      	bne.n	80089b8 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80088b8:	2100      	movs	r1, #0
 80088ba:	2077      	movs	r0, #119	; 0x77
 80088bc:	f7ff ff62 	bl	8008784 <SD_SendCmd>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d807      	bhi.n	80088d6 <SD_disk_initialize+0xae>
 80088c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80088ca:	2069      	movs	r0, #105	; 0x69
 80088cc:	f7ff ff5a 	bl	8008784 <SD_SendCmd>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d005      	beq.n	80088e2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80088d6:	4b47      	ldr	r3, [pc, #284]	; (80089f4 <SD_disk_initialize+0x1cc>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1eb      	bne.n	80088b8 <SD_disk_initialize+0x90>
 80088e0:	e000      	b.n	80088e4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80088e2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80088e4:	4b43      	ldr	r3, [pc, #268]	; (80089f4 <SD_disk_initialize+0x1cc>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d064      	beq.n	80089b8 <SD_disk_initialize+0x190>
 80088ee:	2100      	movs	r1, #0
 80088f0:	207a      	movs	r0, #122	; 0x7a
 80088f2:	f7ff ff47 	bl	8008784 <SD_SendCmd>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d15d      	bne.n	80089b8 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]
 8008900:	e00c      	b.n	800891c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8008902:	7bfc      	ldrb	r4, [r7, #15]
 8008904:	f7ff fe0a 	bl	800851c <SPI_RxByte>
 8008908:	4603      	mov	r3, r0
 800890a:	461a      	mov	r2, r3
 800890c:	f107 0310 	add.w	r3, r7, #16
 8008910:	4423      	add	r3, r4
 8008912:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	3301      	adds	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	2b03      	cmp	r3, #3
 8008920:	d9ef      	bls.n	8008902 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8008922:	7a3b      	ldrb	r3, [r7, #8]
 8008924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <SD_disk_initialize+0x108>
 800892c:	2306      	movs	r3, #6
 800892e:	e000      	b.n	8008932 <SD_disk_initialize+0x10a>
 8008930:	2302      	movs	r3, #2
 8008932:	73bb      	strb	r3, [r7, #14]
 8008934:	e040      	b.n	80089b8 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8008936:	2100      	movs	r1, #0
 8008938:	2077      	movs	r0, #119	; 0x77
 800893a:	f7ff ff23 	bl	8008784 <SD_SendCmd>
 800893e:	4603      	mov	r3, r0
 8008940:	2b01      	cmp	r3, #1
 8008942:	d808      	bhi.n	8008956 <SD_disk_initialize+0x12e>
 8008944:	2100      	movs	r1, #0
 8008946:	2069      	movs	r0, #105	; 0x69
 8008948:	f7ff ff1c 	bl	8008784 <SD_SendCmd>
 800894c:	4603      	mov	r3, r0
 800894e:	2b01      	cmp	r3, #1
 8008950:	d801      	bhi.n	8008956 <SD_disk_initialize+0x12e>
 8008952:	2302      	movs	r3, #2
 8008954:	e000      	b.n	8008958 <SD_disk_initialize+0x130>
 8008956:	2301      	movs	r3, #1
 8008958:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d10e      	bne.n	800897e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8008960:	2100      	movs	r1, #0
 8008962:	2077      	movs	r0, #119	; 0x77
 8008964:	f7ff ff0e 	bl	8008784 <SD_SendCmd>
 8008968:	4603      	mov	r3, r0
 800896a:	2b01      	cmp	r3, #1
 800896c:	d80e      	bhi.n	800898c <SD_disk_initialize+0x164>
 800896e:	2100      	movs	r1, #0
 8008970:	2069      	movs	r0, #105	; 0x69
 8008972:	f7ff ff07 	bl	8008784 <SD_SendCmd>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d107      	bne.n	800898c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800897c:	e00d      	b.n	800899a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800897e:	2100      	movs	r1, #0
 8008980:	2041      	movs	r0, #65	; 0x41
 8008982:	f7ff feff 	bl	8008784 <SD_SendCmd>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800898c:	4b19      	ldr	r3, [pc, #100]	; (80089f4 <SD_disk_initialize+0x1cc>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e1      	bne.n	800895a <SD_disk_initialize+0x132>
 8008996:	e000      	b.n	800899a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8008998:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800899a:	4b16      	ldr	r3, [pc, #88]	; (80089f4 <SD_disk_initialize+0x1cc>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d007      	beq.n	80089b4 <SD_disk_initialize+0x18c>
 80089a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089a8:	2050      	movs	r0, #80	; 0x50
 80089aa:	f7ff feeb 	bl	8008784 <SD_SendCmd>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80089b8:	4a0f      	ldr	r2, [pc, #60]	; (80089f8 <SD_disk_initialize+0x1d0>)
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80089be:	f7ff fd87 	bl	80084d0 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80089c2:	f7ff fdab 	bl	800851c <SPI_RxByte>

  if (type)
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d008      	beq.n	80089de <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80089cc:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <SD_disk_initialize+0x1c8>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f023 0301 	bic.w	r3, r3, #1
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <SD_disk_initialize+0x1c8>)
 80089da:	701a      	strb	r2, [r3, #0]
 80089dc:	e001      	b.n	80089e2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80089de:	f7ff fe31 	bl	8008644 <SD_PowerOff>
  }

  return Stat;
 80089e2:	4b03      	ldr	r3, [pc, #12]	; (80089f0 <SD_disk_initialize+0x1c8>)
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	b2db      	uxtb	r3, r3
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd90      	pop	{r4, r7, pc}
 80089f0:	20000005 	.word	0x20000005
 80089f4:	200049be 	.word	0x200049be
 80089f8:	200002b5 	.word	0x200002b5

080089fc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <SD_disk_status+0x14>
    return STA_NOINIT;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e002      	b.n	8008a16 <SD_disk_status+0x1a>

  return Stat;
 8008a10:	4b03      	ldr	r3, [pc, #12]	; (8008a20 <SD_disk_status+0x24>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	b2db      	uxtb	r3, r3
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bc80      	pop	{r7}
 8008a1e:	4770      	bx	lr
 8008a20:	20000005 	.word	0x20000005

08008a24 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
 8008a2e:	603b      	str	r3, [r7, #0]
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d102      	bne.n	8008a40 <SD_disk_read+0x1c>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <SD_disk_read+0x20>
    return RES_PARERR;
 8008a40:	2304      	movs	r3, #4
 8008a42:	e051      	b.n	8008ae8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8008a44:	4b2a      	ldr	r3, [pc, #168]	; (8008af0 <SD_disk_read+0xcc>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e048      	b.n	8008ae8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8008a56:	4b27      	ldr	r3, [pc, #156]	; (8008af4 <SD_disk_read+0xd0>)
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d102      	bne.n	8008a68 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	025b      	lsls	r3, r3, #9
 8008a66:	607b      	str	r3, [r7, #4]

  SELECT();
 8008a68:	f7ff fd26 	bl	80084b8 <SELECT>

  if (count == 1)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d111      	bne.n	8008a96 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	2051      	movs	r0, #81	; 0x51
 8008a76:	f7ff fe85 	bl	8008784 <SD_SendCmd>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d129      	bne.n	8008ad4 <SD_disk_read+0xb0>
 8008a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7ff fdf3 	bl	8008670 <SD_RxDataBlock>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d021      	beq.n	8008ad4 <SD_disk_read+0xb0>
      count = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	603b      	str	r3, [r7, #0]
 8008a94:	e01e      	b.n	8008ad4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	2052      	movs	r0, #82	; 0x52
 8008a9a:	f7ff fe73 	bl	8008784 <SD_SendCmd>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d117      	bne.n	8008ad4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8008aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008aa8:	68b8      	ldr	r0, [r7, #8]
 8008aaa:	f7ff fde1 	bl	8008670 <SD_RxDataBlock>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00a      	beq.n	8008aca <SD_disk_read+0xa6>
          break;

        buff += 512;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008aba:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	603b      	str	r3, [r7, #0]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1ed      	bne.n	8008aa4 <SD_disk_read+0x80>
 8008ac8:	e000      	b.n	8008acc <SD_disk_read+0xa8>
          break;
 8008aca:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8008acc:	2100      	movs	r1, #0
 8008ace:	204c      	movs	r0, #76	; 0x4c
 8008ad0:	f7ff fe58 	bl	8008784 <SD_SendCmd>
    }
  }

  DESELECT();
 8008ad4:	f7ff fcfc 	bl	80084d0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8008ad8:	f7ff fd20 	bl	800851c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bf14      	ite	ne
 8008ae2:	2301      	movne	r3, #1
 8008ae4:	2300      	moveq	r3, #0
 8008ae6:	b2db      	uxtb	r3, r3
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20000005 	.word	0x20000005
 8008af4:	200002b5 	.word	0x200002b5

08008af8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	607a      	str	r2, [r7, #4]
 8008b02:	603b      	str	r3, [r7, #0]
 8008b04:	4603      	mov	r3, r0
 8008b06:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d102      	bne.n	8008b14 <SD_disk_write+0x1c>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <SD_disk_write+0x20>
    return RES_PARERR;
 8008b14:	2304      	movs	r3, #4
 8008b16:	e06b      	b.n	8008bf0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8008b18:	4b37      	ldr	r3, [pc, #220]	; (8008bf8 <SD_disk_write+0x100>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e062      	b.n	8008bf0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8008b2a:	4b33      	ldr	r3, [pc, #204]	; (8008bf8 <SD_disk_write+0x100>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <SD_disk_write+0x44>
    return RES_WRPRT;
 8008b38:	2302      	movs	r3, #2
 8008b3a:	e059      	b.n	8008bf0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8008b3c:	4b2f      	ldr	r3, [pc, #188]	; (8008bfc <SD_disk_write+0x104>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	025b      	lsls	r3, r3, #9
 8008b4c:	607b      	str	r3, [r7, #4]

  SELECT();
 8008b4e:	f7ff fcb3 	bl	80084b8 <SELECT>

  if (count == 1)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d110      	bne.n	8008b7a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8008b58:	6879      	ldr	r1, [r7, #4]
 8008b5a:	2058      	movs	r0, #88	; 0x58
 8008b5c:	f7ff fe12 	bl	8008784 <SD_SendCmd>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d13a      	bne.n	8008bdc <SD_disk_write+0xe4>
 8008b66:	21fe      	movs	r1, #254	; 0xfe
 8008b68:	68b8      	ldr	r0, [r7, #8]
 8008b6a:	f7ff fdb7 	bl	80086dc <SD_TxDataBlock>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d033      	beq.n	8008bdc <SD_disk_write+0xe4>
      count = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	e030      	b.n	8008bdc <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8008b7a:	4b20      	ldr	r3, [pc, #128]	; (8008bfc <SD_disk_write+0x104>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8008b86:	2100      	movs	r1, #0
 8008b88:	2077      	movs	r0, #119	; 0x77
 8008b8a:	f7ff fdfb 	bl	8008784 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	2057      	movs	r0, #87	; 0x57
 8008b92:	f7ff fdf7 	bl	8008784 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8008b96:	6879      	ldr	r1, [r7, #4]
 8008b98:	2059      	movs	r0, #89	; 0x59
 8008b9a:	f7ff fdf3 	bl	8008784 <SD_SendCmd>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d11b      	bne.n	8008bdc <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8008ba4:	21fc      	movs	r1, #252	; 0xfc
 8008ba6:	68b8      	ldr	r0, [r7, #8]
 8008ba8:	f7ff fd98 	bl	80086dc <SD_TxDataBlock>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008bb8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1ee      	bne.n	8008ba4 <SD_disk_write+0xac>
 8008bc6:	e000      	b.n	8008bca <SD_disk_write+0xd2>
          break;
 8008bc8:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8008bca:	21fd      	movs	r1, #253	; 0xfd
 8008bcc:	2000      	movs	r0, #0
 8008bce:	f7ff fd85 	bl	80086dc <SD_TxDataBlock>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <SD_disk_write+0xe4>
      {
        count = 1;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8008bdc:	f7ff fc78 	bl	80084d0 <DESELECT>
  SPI_RxByte();
 8008be0:	f7ff fc9c 	bl	800851c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bf14      	ite	ne
 8008bea:	2301      	movne	r3, #1
 8008bec:	2300      	moveq	r3, #0
 8008bee:	b2db      	uxtb	r3, r3
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20000005 	.word	0x20000005
 8008bfc:	200002b5 	.word	0x200002b5

08008c00 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8008c00:	b590      	push	{r4, r7, lr}
 8008c02:	b08b      	sub	sp, #44	; 0x2c
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	4603      	mov	r3, r0
 8008c08:	603a      	str	r2, [r7, #0]
 8008c0a:	71fb      	strb	r3, [r7, #7]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8008c1a:	2304      	movs	r3, #4
 8008c1c:	e11b      	b.n	8008e56 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8008c24:	79bb      	ldrb	r3, [r7, #6]
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	d129      	bne.n	8008c7e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d017      	beq.n	8008c62 <SD_disk_ioctl+0x62>
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	dc1f      	bgt.n	8008c76 <SD_disk_ioctl+0x76>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <SD_disk_ioctl+0x40>
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d00b      	beq.n	8008c56 <SD_disk_ioctl+0x56>
 8008c3e:	e01a      	b.n	8008c76 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8008c40:	f7ff fd0c 	bl	800865c <SD_CheckPower>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8008c4a:	f7ff fcfb 	bl	8008644 <SD_PowerOff>
      res = RES_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008c54:	e0fd      	b.n	8008e52 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8008c56:	f7ff fca9 	bl	80085ac <SD_PowerOn>
      res = RES_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008c60:	e0f7      	b.n	8008e52 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	1c5c      	adds	r4, r3, #1
 8008c66:	f7ff fcf9 	bl	800865c <SD_CheckPower>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008c74:	e0ed      	b.n	8008e52 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8008c76:	2304      	movs	r3, #4
 8008c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c7c:	e0e9      	b.n	8008e52 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8008c7e:	4b78      	ldr	r3, [pc, #480]	; (8008e60 <SD_disk_ioctl+0x260>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e0e2      	b.n	8008e56 <SD_disk_ioctl+0x256>

    SELECT();
 8008c90:	f7ff fc12 	bl	80084b8 <SELECT>

    switch (ctrl)
 8008c94:	79bb      	ldrb	r3, [r7, #6]
 8008c96:	2b0d      	cmp	r3, #13
 8008c98:	f200 80cc 	bhi.w	8008e34 <SD_disk_ioctl+0x234>
 8008c9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ca4 <SD_disk_ioctl+0xa4>)
 8008c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca2:	bf00      	nop
 8008ca4:	08008d9f 	.word	0x08008d9f
 8008ca8:	08008cdd 	.word	0x08008cdd
 8008cac:	08008d8f 	.word	0x08008d8f
 8008cb0:	08008e35 	.word	0x08008e35
 8008cb4:	08008e35 	.word	0x08008e35
 8008cb8:	08008e35 	.word	0x08008e35
 8008cbc:	08008e35 	.word	0x08008e35
 8008cc0:	08008e35 	.word	0x08008e35
 8008cc4:	08008e35 	.word	0x08008e35
 8008cc8:	08008e35 	.word	0x08008e35
 8008ccc:	08008e35 	.word	0x08008e35
 8008cd0:	08008db1 	.word	0x08008db1
 8008cd4:	08008dd5 	.word	0x08008dd5
 8008cd8:	08008df9 	.word	0x08008df9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8008cdc:	2100      	movs	r1, #0
 8008cde:	2049      	movs	r0, #73	; 0x49
 8008ce0:	f7ff fd50 	bl	8008784 <SD_SendCmd>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f040 80a8 	bne.w	8008e3c <SD_disk_ioctl+0x23c>
 8008cec:	f107 030c 	add.w	r3, r7, #12
 8008cf0:	2110      	movs	r1, #16
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff fcbc 	bl	8008670 <SD_RxDataBlock>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 809e 	beq.w	8008e3c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8008d00:	7b3b      	ldrb	r3, [r7, #12]
 8008d02:	099b      	lsrs	r3, r3, #6
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d10e      	bne.n	8008d28 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8008d0a:	7d7b      	ldrb	r3, [r7, #21]
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	7d3b      	ldrb	r3, [r7, #20]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	021b      	lsls	r3, r3, #8
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	4413      	add	r3, r2
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8008d1e:	8bfb      	ldrh	r3, [r7, #30]
 8008d20:	029a      	lsls	r2, r3, #10
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	e02e      	b.n	8008d86 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008d28:	7c7b      	ldrb	r3, [r7, #17]
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	7dbb      	ldrb	r3, [r7, #22]
 8008d32:	09db      	lsrs	r3, r3, #7
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	4413      	add	r3, r2
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	7d7b      	ldrb	r3, [r7, #21]
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	f003 0306 	and.w	r3, r3, #6
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	4413      	add	r3, r2
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	3302      	adds	r3, #2
 8008d4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8008d50:	7d3b      	ldrb	r3, [r7, #20]
 8008d52:	099b      	lsrs	r3, r3, #6
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	7cfb      	ldrb	r3, [r7, #19]
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	4413      	add	r3, r2
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	7cbb      	ldrb	r3, [r7, #18]
 8008d66:	029b      	lsls	r3, r3, #10
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	4413      	add	r3, r2
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	3301      	adds	r3, #1
 8008d76:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8008d78:	8bfa      	ldrh	r2, [r7, #30]
 8008d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d7e:	3b09      	subs	r3, #9
 8008d80:	409a      	lsls	r2, r3
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8008d8c:	e056      	b.n	8008e3c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d94:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008d9c:	e055      	b.n	8008e4a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8008d9e:	f7ff fbe9 	bl	8008574 <SD_ReadyWait>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2bff      	cmp	r3, #255	; 0xff
 8008da6:	d14b      	bne.n	8008e40 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008dae:	e047      	b.n	8008e40 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8008db0:	2100      	movs	r1, #0
 8008db2:	2049      	movs	r0, #73	; 0x49
 8008db4:	f7ff fce6 	bl	8008784 <SD_SendCmd>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d142      	bne.n	8008e44 <SD_disk_ioctl+0x244>
 8008dbe:	2110      	movs	r1, #16
 8008dc0:	6a38      	ldr	r0, [r7, #32]
 8008dc2:	f7ff fc55 	bl	8008670 <SD_RxDataBlock>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d03b      	beq.n	8008e44 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008dd2:	e037      	b.n	8008e44 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	204a      	movs	r0, #74	; 0x4a
 8008dd8:	f7ff fcd4 	bl	8008784 <SD_SendCmd>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d132      	bne.n	8008e48 <SD_disk_ioctl+0x248>
 8008de2:	2110      	movs	r1, #16
 8008de4:	6a38      	ldr	r0, [r7, #32]
 8008de6:	f7ff fc43 	bl	8008670 <SD_RxDataBlock>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d02b      	beq.n	8008e48 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008df6:	e027      	b.n	8008e48 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8008df8:	2100      	movs	r1, #0
 8008dfa:	207a      	movs	r0, #122	; 0x7a
 8008dfc:	f7ff fcc2 	bl	8008784 <SD_SendCmd>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d116      	bne.n	8008e34 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8008e06:	2300      	movs	r3, #0
 8008e08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e0c:	e00b      	b.n	8008e26 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8008e0e:	6a3c      	ldr	r4, [r7, #32]
 8008e10:	1c63      	adds	r3, r4, #1
 8008e12:	623b      	str	r3, [r7, #32]
 8008e14:	f7ff fb82 	bl	800851c <SPI_RxByte>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8008e1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e20:	3301      	adds	r3, #1
 8008e22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d9ef      	bls.n	8008e0e <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8008e34:	2304      	movs	r3, #4
 8008e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e3a:	e006      	b.n	8008e4a <SD_disk_ioctl+0x24a>
      break;
 8008e3c:	bf00      	nop
 8008e3e:	e004      	b.n	8008e4a <SD_disk_ioctl+0x24a>
      break;
 8008e40:	bf00      	nop
 8008e42:	e002      	b.n	8008e4a <SD_disk_ioctl+0x24a>
      break;
 8008e44:	bf00      	nop
 8008e46:	e000      	b.n	8008e4a <SD_disk_ioctl+0x24a>
      break;
 8008e48:	bf00      	nop
    }

    DESELECT();
 8008e4a:	f7ff fb41 	bl	80084d0 <DESELECT>
    SPI_RxByte();
 8008e4e:	f7ff fb65 	bl	800851c <SPI_RxByte>
  }

  return res;
 8008e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	372c      	adds	r7, #44	; 0x2c
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd90      	pop	{r4, r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20000005 	.word	0x20000005

08008e64 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008e6a:	f7f7 faeb 	bl	8000444 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8008e6e:	f001 f823 	bl	8009eb8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8008e72:	f001 f90b 	bl	800a08c <MX_GPIO_Init>
	//MX_DMA_Init();
	MX_I2C1_Init();
 8008e76:	f001 f87b 	bl	8009f70 <MX_I2C1_Init>
	MX_SPI1_Init();
 8008e7a:	f001 f8a7 	bl	8009fcc <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8008e7e:	f001 f8db 	bl	800a038 <MX_USART1_UART_Init>
	{
		Error_Handler();
	}*/

	/* USER CODE BEGIN 2 */
	JoyStick_Init(Joystick_Handler);
 8008e82:	4b22      	ldr	r3, [pc, #136]	; (8008f0c <main+0xa8>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe ffda 	bl	8007e40 <JoyStick_Init>

	if(OLED_Init() != E_OK)
 8008e8c:	f7ff f944 	bl	8008118 <OLED_Init>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d001      	beq.n	8008e9a <main+0x36>
	{
		Error_Handler();
 8008e96:	f001 f95d 	bl	800a154 <Error_Handler>
	}

	// Ask to connect (you might still use a computer and NOT connect this controller)
	OLED_setTextDisplay("","      Connect?    ","","");
 8008e9a:	4b1d      	ldr	r3, [pc, #116]	; (8008f10 <main+0xac>)
 8008e9c:	4a1c      	ldr	r2, [pc, #112]	; (8008f10 <main+0xac>)
 8008e9e:	491d      	ldr	r1, [pc, #116]	; (8008f14 <main+0xb0>)
 8008ea0:	481b      	ldr	r0, [pc, #108]	; (8008f10 <main+0xac>)
 8008ea2:	f7ff f94b 	bl	800813c <OLED_setTextDisplay>
	while (HAL_GPIO_ReadPin(Joystick_Button_GPIO_Port, Joystick_Button_Pin) == GPIO_PIN_RESET) {}  // wait for the button to be pressed
 8008ea6:	bf00      	nop
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	481b      	ldr	r0, [pc, #108]	; (8008f18 <main+0xb4>)
 8008eac:	f7f8 fc64 	bl	8001778 <HAL_GPIO_ReadPin>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0f8      	beq.n	8008ea8 <main+0x44>
	HAL_Delay(50);
 8008eb6:	2032      	movs	r0, #50	; 0x32
 8008eb8:	f7f7 fb26 	bl	8000508 <HAL_Delay>
	while (HAL_GPIO_ReadPin(Joystick_Button_GPIO_Port, Joystick_Button_Pin) == GPIO_PIN_SET) {}  // be sure the button is released before we continue
 8008ebc:	bf00      	nop
 8008ebe:	2101      	movs	r1, #1
 8008ec0:	4815      	ldr	r0, [pc, #84]	; (8008f18 <main+0xb4>)
 8008ec2:	f7f8 fc59 	bl	8001778 <HAL_GPIO_ReadPin>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d0f8      	beq.n	8008ebe <main+0x5a>
	HAL_Delay(50);
 8008ecc:	2032      	movs	r0, #50	; 0x32
 8008ece:	f7f7 fb1b 	bl	8000508 <HAL_Delay>

	if(SD_init(SD_CS_GPIO_Port, SD_CS_Pin) != E_OK)
 8008ed2:	2110      	movs	r1, #16
 8008ed4:	4810      	ldr	r0, [pc, #64]	; (8008f18 <main+0xb4>)
 8008ed6:	f7ff f9eb 	bl	80082b0 <SD_init>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d005      	beq.n	8008eec <main+0x88>
	{
		OLED_setTextDisplay("Error","SD Card Fail!","","");
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <main+0xac>)
 8008ee2:	4a0b      	ldr	r2, [pc, #44]	; (8008f10 <main+0xac>)
 8008ee4:	490d      	ldr	r1, [pc, #52]	; (8008f1c <main+0xb8>)
 8008ee6:	480e      	ldr	r0, [pc, #56]	; (8008f20 <main+0xbc>)
 8008ee8:	f7ff f928 	bl	800813c <OLED_setTextDisplay>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		A = fileMenu();
 8008eec:	f000 f81a 	bl	8008f24 <fileMenu>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	71fb      	strb	r3, [r7, #7]
		if (A==0) {
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d102      	bne.n	8008f00 <main+0x9c>
			moveMenu();
 8008efa:	f000 f91b 	bl	8009134 <moveMenu>
 8008efe:	e7f5      	b.n	8008eec <main+0x88>
		} else {
			sendFile(A);
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fade 	bl	80094c4 <sendFile>
		A = fileMenu();
 8008f08:	e7f0      	b.n	8008eec <main+0x88>
 8008f0a:	bf00      	nop
 8008f0c:	20000010 	.word	0x20000010
 8008f10:	0800b234 	.word	0x0800b234
 8008f14:	0800b238 	.word	0x0800b238
 8008f18:	40010800 	.word	0x40010800
 8008f1c:	0800b24c 	.word	0x0800b24c
 8008f20:	0800b25c 	.word	0x0800b25c

08008f24 <fileMenu>:
	}
	/* USER CODE END 3 */
}

uint8 fileMenu(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b0a8      	sub	sp, #160	; 0xa0
 8008f28:	af00      	add	r7, sp, #0
	  You can browse up and down to select a file.
	  Click the button to select a file

	  Move the stick right to exit the file menu and enter the Move menu
	 */
	uint8 fileindex = 1;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	sint8 fn[50];
	uint8 fc = filecount();
 8008f30:	f000 ff4a 	bl	8009dc8 <filecount>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	sint8 string[100];

	getFileName(fileindex, fn);
 8008f3a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008f3e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008f42:	4611      	mov	r1, r2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 ff61 	bl	8009e0c <getFileName>
	StringCopy(string, " -> ");
 8008f4a:	f107 0308 	add.w	r3, r7, #8
 8008f4e:	4972      	ldr	r1, [pc, #456]	; (8009118 <fileMenu+0x1f4>)
 8008f50:	4618      	mov	r0, r3
 8008f52:	f001 f945 	bl	800a1e0 <StringCopy>
	string_cat(string, fn);
 8008f56:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008f5a:	f107 0308 	add.w	r3, r7, #8
 8008f5e:	4611      	mov	r1, r2
 8008f60:	4618      	mov	r0, r3
 8008f62:	f001 f913 	bl	800a18c <string_cat>
	OLED_setTextDisplay("Files ",string,0,"Click to select");
 8008f66:	f107 0108 	add.w	r1, r7, #8
 8008f6a:	4b6c      	ldr	r3, [pc, #432]	; (800911c <fileMenu+0x1f8>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	486c      	ldr	r0, [pc, #432]	; (8009120 <fileMenu+0x1fc>)
 8008f70:	f7ff f8e4 	bl	800813c <OLED_setTextDisplay>

	while(1)
	{
		JoyStick_Read(Joystick_Handler, Joystick_xy);
 8008f74:	4b6b      	ldr	r3, [pc, #428]	; (8009124 <fileMenu+0x200>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	496b      	ldr	r1, [pc, #428]	; (8009128 <fileMenu+0x204>)
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff f840 	bl	8008000 <JoyStick_Read>
		if(fileindex < fc && (JoystickIsFullDown(Joystick_xy)))
 8008f80:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8008f84:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d226      	bcs.n	8008fda <fileMenu+0xb6>
 8008f8c:	4b66      	ldr	r3, [pc, #408]	; (8009128 <fileMenu+0x204>)
 8008f8e:	881b      	ldrh	r3, [r3, #0]
 8008f90:	2b78      	cmp	r3, #120	; 0x78
 8008f92:	d822      	bhi.n	8008fda <fileMenu+0xb6>
		{
			fileindex++;
 8008f94:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008f98:	3301      	adds	r3, #1
 8008f9a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			getFileName(fileindex, fn);
 8008f9e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008fa2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 ff2f 	bl	8009e0c <getFileName>
			StringCopy(string, " -> ");
 8008fae:	f107 0308 	add.w	r3, r7, #8
 8008fb2:	4959      	ldr	r1, [pc, #356]	; (8009118 <fileMenu+0x1f4>)
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f001 f913 	bl	800a1e0 <StringCopy>
			string_cat(string, fn);
 8008fba:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f001 f8e1 	bl	800a18c <string_cat>
			OLED_setTextRow(string, 1);
 8008fca:	f107 0308 	add.w	r3, r7, #8
 8008fce:	2101      	movs	r1, #1
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7ff f939 	bl	8008248 <OLED_setTextRow>
			waitForJoystickMid();
 8008fd6:	f7ff f865 	bl	80080a4 <waitForJoystickMid>
		}
		if(JoystickIsFullUp(Joystick_xy))
 8008fda:	4b53      	ldr	r3, [pc, #332]	; (8009128 <fileMenu+0x204>)
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8008fe2:	d329      	bcc.n	8009038 <fileMenu+0x114>
		{
			if(fileindex > 1)
 8008fe4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d925      	bls.n	8009038 <fileMenu+0x114>
			{
				fileindex --;
 8008fec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				fn[0] = '\0';
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
				getFileName(fileindex, fn);
 8008ffc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8009000:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8009004:	4611      	mov	r1, r2
 8009006:	4618      	mov	r0, r3
 8009008:	f000 ff00 	bl	8009e0c <getFileName>
				StringCopy(string, " -> ");
 800900c:	f107 0308 	add.w	r3, r7, #8
 8009010:	4941      	ldr	r1, [pc, #260]	; (8009118 <fileMenu+0x1f4>)
 8009012:	4618      	mov	r0, r3
 8009014:	f001 f8e4 	bl	800a1e0 <StringCopy>
				string_cat(string, fn);
 8009018:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800901c:	f107 0308 	add.w	r3, r7, #8
 8009020:	4611      	mov	r1, r2
 8009022:	4618      	mov	r0, r3
 8009024:	f001 f8b2 	bl	800a18c <string_cat>
				OLED_setTextRow(string, 1);
 8009028:	f107 0308 	add.w	r3, r7, #8
 800902c:	2101      	movs	r1, #1
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff f90a 	bl	8008248 <OLED_setTextRow>
				waitForJoystickMid();
 8009034:	f7ff f836 	bl	80080a4 <waitForJoystickMid>
			}
		}

		if (fileindex > 0 && (JoyStick_ReadButton() == JOYSTICK_PIN_RESET) && fn[0] != '\0')    // Pushed it!
 8009038:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800903c:	2b00      	cmp	r3, #0
 800903e:	d05d      	beq.n	80090fc <fileMenu+0x1d8>
 8009040:	f7ff f820 	bl	8008084 <JoyStick_ReadButton>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d158      	bne.n	80090fc <fileMenu+0x1d8>
 800904a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d054      	beq.n	80090fc <fileMenu+0x1d8>
		{
			StringCopy(string, " -> ");
 8009052:	f107 0308 	add.w	r3, r7, #8
 8009056:	4930      	ldr	r1, [pc, #192]	; (8009118 <fileMenu+0x1f4>)
 8009058:	4618      	mov	r0, r3
 800905a:	f001 f8c1 	bl	800a1e0 <StringCopy>
			string_cat(string, fn);
 800905e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8009062:	f107 0308 	add.w	r3, r7, #8
 8009066:	4611      	mov	r1, r2
 8009068:	4618      	mov	r0, r3
 800906a:	f001 f88f 	bl	800a18c <string_cat>
			OLED_setTextDisplay("Send this file? ", string, 0, "Click to confirm");  // Ask for confirmation
 800906e:	f107 0108 	add.w	r1, r7, #8
 8009072:	4b2e      	ldr	r3, [pc, #184]	; (800912c <fileMenu+0x208>)
 8009074:	2200      	movs	r2, #0
 8009076:	482e      	ldr	r0, [pc, #184]	; (8009130 <fileMenu+0x20c>)
 8009078:	f7ff f860 	bl	800813c <OLED_setTextDisplay>
			HAL_Delay(50);
 800907c:	2032      	movs	r0, #50	; 0x32
 800907e:	f7f7 fa43 	bl	8000508 <HAL_Delay>
			while (JoyStick_ReadButton() == JOYSTICK_PIN_RESET) {} // Wait for the button to be released
 8009082:	bf00      	nop
 8009084:	f7fe fffe 	bl	8008084 <JoyStick_ReadButton>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0fa      	beq.n	8009084 <fileMenu+0x160>
			HAL_Delay(50);
 800908e:	2032      	movs	r0, #50	; 0x32
 8009090:	f7f7 fa3a 	bl	8000508 <HAL_Delay>

			volatile uint32 t = HAL_GetTick();
 8009094:	f7f7 fa2e 	bl	80004f4 <HAL_GetTick>
 8009098:	4603      	mov	r3, r0
 800909a:	607b      	str	r3, [r7, #4]

			while((HAL_GetTick() - t) < 1500)
 800909c:	e010      	b.n	80090c0 <fileMenu+0x19c>
			{
				if(JoyStick_ReadButton() == JOYSTICK_PIN_RESET)
 800909e:	f7fe fff1 	bl	8008084 <JoyStick_ReadButton>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10b      	bne.n	80090c0 <fileMenu+0x19c>
				{
					HAL_Delay(50);
 80090a8:	2032      	movs	r0, #50	; 0x32
 80090aa:	f7f7 fa2d 	bl	8000508 <HAL_Delay>
					while (JoyStick_ReadButton() == JOYSTICK_PIN_RESET) {} // Wait for the button to be released
 80090ae:	bf00      	nop
 80090b0:	f7fe ffe8 	bl	8008084 <JoyStick_ReadButton>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0fa      	beq.n	80090b0 <fileMenu+0x18c>
					return fileindex;
 80090ba:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80090be:	e026      	b.n	800910e <fileMenu+0x1ea>
			while((HAL_GetTick() - t) < 1500)
 80090c0:	f7f7 fa18 	bl	80004f4 <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	f240 52db 	movw	r2, #1499	; 0x5db
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d9e5      	bls.n	800909e <fileMenu+0x17a>
					break;
				}
			}
			StringCopy(string, " -> ");
 80090d2:	f107 0308 	add.w	r3, r7, #8
 80090d6:	4910      	ldr	r1, [pc, #64]	; (8009118 <fileMenu+0x1f4>)
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 f881 	bl	800a1e0 <StringCopy>
			string_cat(string, fn);
 80090de:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80090e2:	f107 0308 	add.w	r3, r7, #8
 80090e6:	4611      	mov	r1, r2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f001 f84f 	bl	800a18c <string_cat>
			OLED_setTextDisplay("Files ", string, 0, "Click to select");
 80090ee:	f107 0108 	add.w	r1, r7, #8
 80090f2:	4b0a      	ldr	r3, [pc, #40]	; (800911c <fileMenu+0x1f8>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	480a      	ldr	r0, [pc, #40]	; (8009120 <fileMenu+0x1fc>)
 80090f8:	f7ff f820 	bl	800813c <OLED_setTextDisplay>
		}

		if(JoystickIsFullRight(Joystick_xy))
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <fileMenu+0x204>)
 80090fe:	885b      	ldrh	r3, [r3, #2]
 8009100:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8009104:	f4ff af36 	bcc.w	8008f74 <fileMenu+0x50>
		{
			waitForJoystickMid();
 8009108:	f7fe ffcc 	bl	80080a4 <waitForJoystickMid>
			return 0;
 800910c:	2300      	movs	r3, #0
			StringCopy(string, " -> ");
			string_cat(string, fn);
			OLED_setTextDisplay("Files ", string, 0, "Click to select");
		}
	}
}
 800910e:	4618      	mov	r0, r3
 8009110:	37a0      	adds	r7, #160	; 0xa0
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	0800b264 	.word	0x0800b264
 800911c:	0800b26c 	.word	0x0800b26c
 8009120:	0800b27c 	.word	0x0800b27c
 8009124:	20000010 	.word	0x20000010
 8009128:	200037f4 	.word	0x200037f4
 800912c:	0800b284 	.word	0x0800b284
 8009130:	0800b298 	.word	0x0800b298

08009134 <moveMenu>:

void moveMenu(void)
{
 8009134:	b5b0      	push	{r4, r5, r7, lr}
 8009136:	b0be      	sub	sp, #248	; 0xf8
 8009138:	af00      	add	r7, sp, #0
	OLED_Clear();
 800913a:	f7ff f8af 	bl	800829c <OLED_Clear>
	sint8 MoveCommand[50] = "";
 800913e:	2300      	movs	r3, #0
 8009140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009144:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009148:	222e      	movs	r2, #46	; 0x2e
 800914a:	2100      	movs	r1, #0
 800914c:	4618      	mov	r0, r3
 800914e:	f002 f827 	bl	800b1a0 <memset>
	sint8 sln3[21];
	sint8 sln4[21];
	sint8 sla[30];
	sint8 slb[30];

	sendCodeLine("G21", TRUE);
 8009152:	2101      	movs	r1, #1
 8009154:	48c0      	ldr	r0, [pc, #768]	; (8009458 <moveMenu+0x324>)
 8009156:	f000 fb3f 	bl	80097d8 <sendCodeLine>
	sendCodeLine("G91",TRUE); // Switch to relative coordinates
 800915a:	2101      	movs	r1, #1
 800915c:	48bf      	ldr	r0, [pc, #764]	; (800945c <moveMenu+0x328>)
 800915e:	f000 fb3b 	bl	80097d8 <sendCodeLine>

	while (!Strings_Is_Equal(MoveCommand, "-1"))
 8009162:	e16a      	b.n	800943a <moveMenu+0x306>
	{
		MoveCommand [0] = '\0';
 8009164:	2300      	movs	r3, #0
 8009166:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		// read the state of all inputs
		JoyStick_Read(Joystick_Handler, Joystick_xy);
 800916a:	4bbd      	ldr	r3, [pc, #756]	; (8009460 <moveMenu+0x32c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	49bd      	ldr	r1, [pc, #756]	; (8009464 <moveMenu+0x330>)
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe ff45 	bl	8008000 <JoyStick_Read>
		hardup   = !HAL_GPIO_ReadPin(MS12_GPIO_Port, MS12_Pin);
 8009176:	2101      	movs	r1, #1
 8009178:	48bb      	ldr	r0, [pc, #748]	; (8009468 <moveMenu+0x334>)
 800917a:	f7f8 fafd 	bl	8001778 <HAL_GPIO_ReadPin>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	bf0c      	ite	eq
 8009184:	2301      	moveq	r3, #1
 8009186:	2300      	movne	r3, #0
 8009188:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
		harddown = !HAL_GPIO_ReadPin(MS9_GPIO_Port, MS9_Pin);
 800918c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009190:	48b5      	ldr	r0, [pc, #724]	; (8009468 <moveMenu+0x334>)
 8009192:	f7f8 faf1 	bl	8001778 <HAL_GPIO_ReadPin>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	bf0c      	ite	eq
 800919c:	2301      	moveq	r3, #1
 800919e:	2300      	movne	r3, #0
 80091a0:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		slowup   = !HAL_GPIO_ReadPin(MS3_GPIO_Port, MS3_Pin);
 80091a4:	2102      	movs	r1, #2
 80091a6:	48b0      	ldr	r0, [pc, #704]	; (8009468 <moveMenu+0x334>)
 80091a8:	f7f8 fae6 	bl	8001778 <HAL_GPIO_ReadPin>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	bf0c      	ite	eq
 80091b2:	2301      	moveq	r3, #1
 80091b4:	2300      	movne	r3, #0
 80091b6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
		slowdown = !HAL_GPIO_ReadPin(MS6_GPIO_Port, MS6_Pin);
 80091ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091be:	48aa      	ldr	r0, [pc, #680]	; (8009468 <moveMenu+0x334>)
 80091c0:	f7f8 fada 	bl	8001778 <HAL_GPIO_ReadPin>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	bf0c      	ite	eq
 80091ca:	2301      	moveq	r3, #1
 80091cc:	2300      	movne	r3, #0
 80091ce:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4

		if (Joystick_xy[1] < 30)
 80091d2:	4ba4      	ldr	r3, [pc, #656]	; (8009464 <moveMenu+0x330>)
 80091d4:	885b      	ldrh	r3, [r3, #2]
 80091d6:	2b1d      	cmp	r3, #29
 80091d8:	d806      	bhi.n	80091e8 <moveMenu+0xb4>
		{
			StringCopy(MoveCommand, "G1 X-5 F2750"); // Slow Left
 80091da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80091de:	49a3      	ldr	r1, [pc, #652]	; (800946c <moveMenu+0x338>)
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 fffd 	bl	800a1e0 <StringCopy>
 80091e6:	e022      	b.n	800922e <moveMenu+0xfa>
		}
		else
		{
			if (Joystick_xy[1] < 300)
 80091e8:	4b9e      	ldr	r3, [pc, #632]	; (8009464 <moveMenu+0x330>)
 80091ea:	885b      	ldrh	r3, [r3, #2]
 80091ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80091f0:	d206      	bcs.n	8009200 <moveMenu+0xcc>
			{
				StringCopy(MoveCommand, "G1 X-1 F500"); // Slow Left
 80091f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80091f6:	499e      	ldr	r1, [pc, #632]	; (8009470 <moveMenu+0x33c>)
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 fff1 	bl	800a1e0 <StringCopy>
 80091fe:	e016      	b.n	800922e <moveMenu+0xfa>
			}
			else
			{
				if (Joystick_xy[1] > 900)
 8009200:	4b98      	ldr	r3, [pc, #608]	; (8009464 <moveMenu+0x330>)
 8009202:	885b      	ldrh	r3, [r3, #2]
 8009204:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009208:	d906      	bls.n	8009218 <moveMenu+0xe4>
				{
					StringCopy(MoveCommand, "G1 X5 F2750");   // Full right
 800920a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800920e:	4999      	ldr	r1, [pc, #612]	; (8009474 <moveMenu+0x340>)
 8009210:	4618      	mov	r0, r3
 8009212:	f000 ffe5 	bl	800a1e0 <StringCopy>
 8009216:	e00a      	b.n	800922e <moveMenu+0xfa>
				}
				else
				{
					if (Joystick_xy[1] > 600)
 8009218:	4b92      	ldr	r3, [pc, #584]	; (8009464 <moveMenu+0x330>)
 800921a:	885b      	ldrh	r3, [r3, #2]
 800921c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009220:	d905      	bls.n	800922e <moveMenu+0xfa>
					{
						StringCopy(MoveCommand, "G1 X1 F500");  // Slow Right
 8009222:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009226:	4994      	ldr	r1, [pc, #592]	; (8009478 <moveMenu+0x344>)
 8009228:	4618      	mov	r0, r3
 800922a:	f000 ffd9 	bl	800a1e0 <StringCopy>
					}
				}
			}
		}

		if (Joystick_xy[0] < 30)
 800922e:	4b8d      	ldr	r3, [pc, #564]	; (8009464 <moveMenu+0x330>)
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	2b1d      	cmp	r3, #29
 8009234:	d806      	bhi.n	8009244 <moveMenu+0x110>
		{
			StringCopy(MoveCommand, "G1 Y-5 F2750");  // Full Reverse
 8009236:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800923a:	4990      	ldr	r1, [pc, #576]	; (800947c <moveMenu+0x348>)
 800923c:	4618      	mov	r0, r3
 800923e:	f000 ffcf 	bl	800a1e0 <StringCopy>
 8009242:	e022      	b.n	800928a <moveMenu+0x156>
		}
		else
		{
			if (Joystick_xy[0] < 300)
 8009244:	4b87      	ldr	r3, [pc, #540]	; (8009464 <moveMenu+0x330>)
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800924c:	d206      	bcs.n	800925c <moveMenu+0x128>
			{
				StringCopy(MoveCommand, "G1 Y-1 F500");   // slow in reverse
 800924e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009252:	498b      	ldr	r1, [pc, #556]	; (8009480 <moveMenu+0x34c>)
 8009254:	4618      	mov	r0, r3
 8009256:	f000 ffc3 	bl	800a1e0 <StringCopy>
 800925a:	e016      	b.n	800928a <moveMenu+0x156>
			}
			else
			{
				if (Joystick_xy[0] > 900)
 800925c:	4b81      	ldr	r3, [pc, #516]	; (8009464 <moveMenu+0x330>)
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009264:	d906      	bls.n	8009274 <moveMenu+0x140>
				{
					StringCopy(MoveCommand, "G1 Y5 F2750");  // Full forward
 8009266:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800926a:	4986      	ldr	r1, [pc, #536]	; (8009484 <moveMenu+0x350>)
 800926c:	4618      	mov	r0, r3
 800926e:	f000 ffb7 	bl	800a1e0 <StringCopy>
 8009272:	e00a      	b.n	800928a <moveMenu+0x156>
				}
				else
				{
					if (Joystick_xy[0] > 600)
 8009274:	4b7b      	ldr	r3, [pc, #492]	; (8009464 <moveMenu+0x330>)
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800927c:	d905      	bls.n	800928a <moveMenu+0x156>
					{
						StringCopy(MoveCommand, "G1 Y1 F500");  // slow forward
 800927e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009282:	4981      	ldr	r1, [pc, #516]	; (8009488 <moveMenu+0x354>)
 8009284:	4618      	mov	r0, r3
 8009286:	f000 ffab 	bl	800a1e0 <StringCopy>
					}
				}
			}
		}

		if (slowup)  {StringCopy(MoveCommand, "G1 Z0.2 F110");}    // Up Z
 800928a:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <moveMenu+0x16a>
 8009292:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009296:	497d      	ldr	r1, [pc, #500]	; (800948c <moveMenu+0x358>)
 8009298:	4618      	mov	r0, r3
 800929a:	f000 ffa1 	bl	800a1e0 <StringCopy>
		if (hardup)  {StringCopy(MoveCommand, "G1 Z1 F2000");}     // Full up Z
 800929e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d005      	beq.n	80092b2 <moveMenu+0x17e>
 80092a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80092aa:	4979      	ldr	r1, [pc, #484]	; (8009490 <moveMenu+0x35c>)
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 ff97 	bl	800a1e0 <StringCopy>
		if (slowdown){StringCopy(MoveCommand, "G1 Z-0.2 F110");}   // Down Z
 80092b2:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <moveMenu+0x192>
 80092ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80092be:	4975      	ldr	r1, [pc, #468]	; (8009494 <moveMenu+0x360>)
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 ff8d 	bl	800a1e0 <StringCopy>
		if (harddown){StringCopy(MoveCommand, "G1 Z-1 F2000");}    // Full down Z
 80092c6:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d005      	beq.n	80092da <moveMenu+0x1a6>
 80092ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80092d2:	4971      	ldr	r1, [pc, #452]	; (8009498 <moveMenu+0x364>)
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 ff83 	bl	800a1e0 <StringCopy>

		if (MoveCommand[0] != '\0')
 80092da:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d008      	beq.n	80092f4 <moveMenu+0x1c0>
		{
			// send the commands
			sendCodeLine(MoveCommand,TRUE);
 80092e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80092e6:	2101      	movs	r1, #1
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fa75 	bl	80097d8 <sendCodeLine>
			MoveCommand[0] = '\0';
 80092ee:	2300      	movs	r3, #0
 80092f0:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		}

		if (MoveCommand[0] == '\0')
 80092f4:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d107      	bne.n	800930c <moveMenu+0x1d8>
			startTime = HAL_GetTick();
 80092fc:	f7f7 f8fa 	bl	80004f4 <HAL_GetTick>
 8009300:	4603      	mov	r3, r0
 8009302:	461a      	mov	r2, r3
 8009304:	f04f 0300 	mov.w	r3, #0
 8009308:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
		// get the status of the machine and monitor the receive buffer for OK signals

		if ((HAL_GetTick() - lastUpdate) >= 500) {
 800930c:	f7f7 f8f2 	bl	80004f4 <HAL_GetTick>
 8009310:	4603      	mov	r3, r0
 8009312:	4618      	mov	r0, r3
 8009314:	f04f 0100 	mov.w	r1, #0
 8009318:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800931c:	1a84      	subs	r4, r0, r2
 800931e:	eb61 0503 	sbc.w	r5, r1, r3
 8009322:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009326:	f04f 0300 	mov.w	r3, #0
 800932a:	42ab      	cmp	r3, r5
 800932c:	bf08      	it	eq
 800932e:	42a2      	cmpeq	r2, r4
 8009330:	d20c      	bcs.n	800934c <moveMenu+0x218>
			getStatus();
 8009332:	f000 fb9b 	bl	8009a6c <getStatus>
			lastUpdate=HAL_GetTick();
 8009336:	f7f7 f8dd 	bl	80004f4 <HAL_GetTick>
 800933a:	4603      	mov	r3, r0
 800933c:	461a      	mov	r2, r3
 800933e:	f04f 0300 	mov.w	r3, #0
 8009342:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
			updateDisplay = TRUE;
 8009346:	2301      	movs	r3, #1
 8009348:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}

		if (updateDisplay) {
 800934c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8009350:	2b00      	cmp	r3, #0
 8009352:	d056      	beq.n	8009402 <moveMenu+0x2ce>
			updateDisplay = FALSE;
 8009354:	2300      	movs	r3, #0
 8009356:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			StringCopy(sln1, "X: ");
 800935a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800935e:	494f      	ldr	r1, [pc, #316]	; (800949c <moveMenu+0x368>)
 8009360:	4618      	mov	r0, r3
 8009362:	f000 ff3d 	bl	800a1e0 <StringCopy>
			string_cat(sln1, WposX);
 8009366:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800936a:	494d      	ldr	r1, [pc, #308]	; (80094a0 <moveMenu+0x36c>)
 800936c:	4618      	mov	r0, r3
 800936e:	f000 ff0d 	bl	800a18c <string_cat>

			StringCopy(sln2, "Y: ");
 8009372:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009376:	494b      	ldr	r1, [pc, #300]	; (80094a4 <moveMenu+0x370>)
 8009378:	4618      	mov	r0, r3
 800937a:	f000 ff31 	bl	800a1e0 <StringCopy>
			string_cat(sln2, WposY);
 800937e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009382:	4949      	ldr	r1, [pc, #292]	; (80094a8 <moveMenu+0x374>)
 8009384:	4618      	mov	r0, r3
 8009386:	f000 ff01 	bl	800a18c <string_cat>

			StringCopy(sln3, "Z: ");
 800938a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800938e:	4947      	ldr	r1, [pc, #284]	; (80094ac <moveMenu+0x378>)
 8009390:	4618      	mov	r0, r3
 8009392:	f000 ff25 	bl	800a1e0 <StringCopy>
			string_cat(sln3, WposZ);
 8009396:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800939a:	4945      	ldr	r1, [pc, #276]	; (80094b0 <moveMenu+0x37c>)
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fef5 	bl	800a18c <string_cat>

			StringCopy(sln4, "Click stick to exit");
 80093a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80093a6:	4943      	ldr	r1, [pc, #268]	; (80094b4 <moveMenu+0x380>)
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 ff19 	bl	800a1e0 <StringCopy>

			StringCopy(slb, WposX);
 80093ae:	1d3b      	adds	r3, r7, #4
 80093b0:	493b      	ldr	r1, [pc, #236]	; (80094a0 <moveMenu+0x36c>)
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 ff14 	bl	800a1e0 <StringCopy>
			string_cat(slb, " ");
 80093b8:	1d3b      	adds	r3, r7, #4
 80093ba:	493f      	ldr	r1, [pc, #252]	; (80094b8 <moveMenu+0x384>)
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fee5 	bl	800a18c <string_cat>
			StringCopy(slb, WposY);
 80093c2:	1d3b      	adds	r3, r7, #4
 80093c4:	4938      	ldr	r1, [pc, #224]	; (80094a8 <moveMenu+0x374>)
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 ff0a 	bl	800a1e0 <StringCopy>
			string_cat(slb, " ");
 80093cc:	1d3b      	adds	r3, r7, #4
 80093ce:	493a      	ldr	r1, [pc, #232]	; (80094b8 <moveMenu+0x384>)
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fedb 	bl	800a18c <string_cat>
			StringCopy(slb, WposZ);
 80093d6:	1d3b      	adds	r3, r7, #4
 80093d8:	4935      	ldr	r1, [pc, #212]	; (80094b0 <moveMenu+0x37c>)
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 ff00 	bl	800a1e0 <StringCopy>

			if (sla != slb) {
				OLED_setTextDisplay(sln1,sln2,sln3,sln4);
 80093e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80093e4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80093e8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80093ec:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80093f0:	f7fe fea4 	bl	800813c <OLED_setTextDisplay>
				StringCopy(sla,slb);
 80093f4:	1d3a      	adds	r2, r7, #4
 80093f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093fa:	4611      	mov	r1, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 feef 	bl	800a1e0 <StringCopy>
			}
		}

		if (JoyStick_ReadButton() == JOYSTICK_PIN_RESET) { // button is pushed, exit the move loop
 8009402:	f7fe fe3f 	bl	8008084 <JoyStick_ReadButton>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d116      	bne.n	800943a <moveMenu+0x306>
			// set x,y and z to 0
			sendCodeLine("G92 X0 Y0 Z0",TRUE); //For GRBL v8
 800940c:	2101      	movs	r1, #1
 800940e:	482b      	ldr	r0, [pc, #172]	; (80094bc <moveMenu+0x388>)
 8009410:	f000 f9e2 	bl	80097d8 <sendCodeLine>
			getStatus();
 8009414:	f000 fb2a 	bl	8009a6c <getStatus>
			OLED_Clear();
 8009418:	f7fe ff40 	bl	800829c <OLED_Clear>
			StringCopy(MoveCommand,"-1");
 800941c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009420:	4927      	ldr	r1, [pc, #156]	; (80094c0 <moveMenu+0x38c>)
 8009422:	4618      	mov	r0, r3
 8009424:	f000 fedc 	bl	800a1e0 <StringCopy>
			while (JoyStick_ReadButton() == JOYSTICK_PIN_RESET) {}; // wait until the user releases the button
 8009428:	bf00      	nop
 800942a:	f7fe fe2b 	bl	8008084 <JoyStick_ReadButton>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0fa      	beq.n	800942a <moveMenu+0x2f6>
			HAL_Delay(10);
 8009434:	200a      	movs	r0, #10
 8009436:	f7f7 f867 	bl	8000508 <HAL_Delay>
	while (!Strings_Is_Equal(MoveCommand, "-1"))
 800943a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800943e:	4920      	ldr	r1, [pc, #128]	; (80094c0 <moveMenu+0x38c>)
 8009440:	4618      	mov	r0, r3
 8009442:	f000 ff4f 	bl	800a2e4 <Strings_Is_Equal>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	f43f ae8b 	beq.w	8009164 <moveMenu+0x30>
		}
	}
}
 800944e:	bf00      	nop
 8009450:	bf00      	nop
 8009452:	37f8      	adds	r7, #248	; 0xf8
 8009454:	46bd      	mov	sp, r7
 8009456:	bdb0      	pop	{r4, r5, r7, pc}
 8009458:	0800b2ac 	.word	0x0800b2ac
 800945c:	0800b2b0 	.word	0x0800b2b0
 8009460:	20000010 	.word	0x20000010
 8009464:	200037f4 	.word	0x200037f4
 8009468:	40010c00 	.word	0x40010c00
 800946c:	0800b2b4 	.word	0x0800b2b4
 8009470:	0800b2c4 	.word	0x0800b2c4
 8009474:	0800b2d0 	.word	0x0800b2d0
 8009478:	0800b2dc 	.word	0x0800b2dc
 800947c:	0800b2e8 	.word	0x0800b2e8
 8009480:	0800b2f8 	.word	0x0800b2f8
 8009484:	0800b304 	.word	0x0800b304
 8009488:	0800b310 	.word	0x0800b310
 800948c:	0800b31c 	.word	0x0800b31c
 8009490:	0800b32c 	.word	0x0800b32c
 8009494:	0800b338 	.word	0x0800b338
 8009498:	0800b348 	.word	0x0800b348
 800949c:	0800b358 	.word	0x0800b358
 80094a0:	20003808 	.word	0x20003808
 80094a4:	0800b35c 	.word	0x0800b35c
 80094a8:	200037fc 	.word	0x200037fc
 80094ac:	0800b360 	.word	0x0800b360
 80094b0:	200049a8 	.word	0x200049a8
 80094b4:	0800b364 	.word	0x0800b364
 80094b8:	0800b378 	.word	0x0800b378
 80094bc:	0800b37c 	.word	0x0800b37c
 80094c0:	0800b38c 	.word	0x0800b38c

080094c4 <sendFile>:

void sendFile(sint8 fileIndex)
{
 80094c4:	b5b0      	push	{r4, r5, r7, lr}
 80094c6:	b0a2      	sub	sp, #136	; 0x88
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	71fb      	strb	r3, [r7, #7]
	sint8 strLine[100] = "";
 80094ce:	2300      	movs	r3, #0
 80094d0:	61fb      	str	r3, [r7, #28]
 80094d2:	f107 0320 	add.w	r3, r7, #32
 80094d6:	2260      	movs	r2, #96	; 0x60
 80094d8:	2100      	movs	r1, #0
 80094da:	4618      	mov	r0, r3
 80094dc:	f001 fe60 	bl	800b1a0 <memset>
	sint8 filename[20];
	uint64 lastUpdate = 0;;
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	f04f 0300 	mov.w	r3, #0
 80094e8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

	if(getFileName((uint8)fileIndex, filename) != E_OK)
 80094ec:	f107 0208 	add.w	r2, r7, #8
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	4611      	mov	r1, r2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fc89 	bl	8009e0c <getFileName>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d00a      	beq.n	8009516 <sendFile+0x52>
	{
		OLED_setTextDisplay("File","", "Error, file not found","");
 8009500:	4b42      	ldr	r3, [pc, #264]	; (800960c <sendFile+0x148>)
 8009502:	4a43      	ldr	r2, [pc, #268]	; (8009610 <sendFile+0x14c>)
 8009504:	4941      	ldr	r1, [pc, #260]	; (800960c <sendFile+0x148>)
 8009506:	4843      	ldr	r0, [pc, #268]	; (8009614 <sendFile+0x150>)
 8009508:	f7fe fe18 	bl	800813c <OLED_setTextDisplay>
		HAL_Delay(1000); // show the error
 800950c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009510:	f7f6 fffa 	bl	8000508 <HAL_Delay>
 8009514:	e077      	b.n	8009606 <sendFile+0x142>
		return;
	}

	// Set the Work Position to zero
	sendCodeLine("G90",TRUE); // absolute coordinates
 8009516:	2101      	movs	r1, #1
 8009518:	483f      	ldr	r0, [pc, #252]	; (8009618 <sendFile+0x154>)
 800951a:	f000 f95d 	bl	80097d8 <sendCodeLine>
	sendCodeLine("G21",TRUE);
 800951e:	2101      	movs	r1, #1
 8009520:	483e      	ldr	r0, [pc, #248]	; (800961c <sendFile+0x158>)
 8009522:	f000 f959 	bl	80097d8 <sendCodeLine>
	sendCodeLine("G92 X0 Y0 Z0",TRUE);  // set zero
 8009526:	2101      	movs	r1, #1
 8009528:	483d      	ldr	r0, [pc, #244]	; (8009620 <sendFile+0x15c>)
 800952a:	f000 f955 	bl	80097d8 <sendCodeLine>

	// Start the spindle
	SpindleSlowStart();
 800952e:	f000 f947 	bl	80097c0 <SpindleSlowStart>

	// reset the timer
	runningTime = HAL_GetTick();
 8009532:	f7f6 ffdf 	bl	80004f4 <HAL_GetTick>
 8009536:	4603      	mov	r3, r0
 8009538:	461a      	mov	r2, r3
 800953a:	f04f 0300 	mov.w	r3, #0
 800953e:	4939      	ldr	r1, [pc, #228]	; (8009624 <sendFile+0x160>)
 8009540:	e9c1 2300 	strd	r2, r3, [r1]

	if (!awaitingOK)
 8009544:	4b38      	ldr	r3, [pc, #224]	; (8009628 <sendFile+0x164>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	f083 0301 	eor.w	r3, r3, #1
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	d015      	beq.n	800957e <sendFile+0xba>
	{
		SD_ReadUntil((uint8*)strLine, (uint8*)filename, '\n');
 8009552:	f107 0108 	add.w	r1, r7, #8
 8009556:	f107 031c 	add.w	r3, r7, #28
 800955a:	220a      	movs	r2, #10
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe fedb 	bl	8008318 <SD_ReadUntil>
		ignoreUnsupportedCommands(strLine);
 8009562:	f107 031c 	add.w	r3, r7, #28
 8009566:	4618      	mov	r0, r3
 8009568:	f000 f8ac 	bl	80096c4 <ignoreUnsupportedCommands>
		if (strLine[0] != '\0') sendCodeLine(strLine,TRUE);    // sending it!
 800956c:	7f3b      	ldrb	r3, [r7, #28]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <sendFile+0xba>
 8009572:	f107 031c 	add.w	r3, r7, #28
 8009576:	2101      	movs	r1, #1
 8009578:	4618      	mov	r0, r3
 800957a:	f000 f92d 	bl	80097d8 <sendCodeLine>
	}

	// get the status of the machine and monitor the receive buffer for OK signals
	if (HAL_GetTick() - lastUpdate >= 250) {
 800957e:	f7f6 ffb9 	bl	80004f4 <HAL_GetTick>
 8009582:	4603      	mov	r3, r0
 8009584:	4618      	mov	r0, r3
 8009586:	f04f 0100 	mov.w	r1, #0
 800958a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800958e:	1a84      	subs	r4, r0, r2
 8009590:	eb61 0503 	sbc.w	r5, r1, r3
 8009594:	2d00      	cmp	r5, #0
 8009596:	bf08      	it	eq
 8009598:	2cfa      	cmpeq	r4, #250	; 0xfa
 800959a:	d30e      	bcc.n	80095ba <sendFile+0xf6>
		lastUpdate=HAL_GetTick();
 800959c:	f7f6 ffaa 	bl	80004f4 <HAL_GetTick>
 80095a0:	4603      	mov	r3, r0
 80095a2:	461a      	mov	r2, r3
 80095a4:	f04f 0300 	mov.w	r3, #0
 80095a8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		updateDisplayStatus(runningTime);
 80095ac:	4b1d      	ldr	r3, [pc, #116]	; (8009624 <sendFile+0x160>)
 80095ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b2:	4610      	mov	r0, r2
 80095b4:	4619      	mov	r1, r3
 80095b6:	f000 f94d 	bl	8009854 <updateDisplayStatus>
	}
	if (!HAL_GPIO_ReadPin(MS12_GPIO_Port, MS12_Pin)) {emergencyBreak();}
 80095ba:	2101      	movs	r1, #1
 80095bc:	481b      	ldr	r0, [pc, #108]	; (800962c <sendFile+0x168>)
 80095be:	f7f8 f8db 	bl	8001778 <HAL_GPIO_ReadPin>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d117      	bne.n	80095f8 <sendFile+0x134>
 80095c8:	f000 f836 	bl	8009638 <emergencyBreak>
	   End of File!
	   All Gcode lines have been send but the machine may still be processing them
	   So we query the status until it goes Idle
	  */

	   while (Strings_Is_Equal (machineStatus,"Idle") != 0) {
 80095cc:	e014      	b.n	80095f8 <sendFile+0x134>
	    if (!HAL_GPIO_ReadPin(MS12_GPIO_Port, MS12_Pin)) {emergencyBreak();}
 80095ce:	2101      	movs	r1, #1
 80095d0:	4816      	ldr	r0, [pc, #88]	; (800962c <sendFile+0x168>)
 80095d2:	f7f8 f8d1 	bl	8001778 <HAL_GPIO_ReadPin>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d101      	bne.n	80095e0 <sendFile+0x11c>
 80095dc:	f000 f82c 	bl	8009638 <emergencyBreak>
	    HAL_Delay(250);
 80095e0:	20fa      	movs	r0, #250	; 0xfa
 80095e2:	f7f6 ff91 	bl	8000508 <HAL_Delay>
	    getStatus();
 80095e6:	f000 fa41 	bl	8009a6c <getStatus>
	    updateDisplayStatus(runningTime);
 80095ea:	4b0e      	ldr	r3, [pc, #56]	; (8009624 <sendFile+0x160>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	4610      	mov	r0, r2
 80095f2:	4619      	mov	r1, r3
 80095f4:	f000 f92e 	bl	8009854 <updateDisplayStatus>
	   while (Strings_Is_Equal (machineStatus,"Idle") != 0) {
 80095f8:	490d      	ldr	r1, [pc, #52]	; (8009630 <sendFile+0x16c>)
 80095fa:	480e      	ldr	r0, [pc, #56]	; (8009634 <sendFile+0x170>)
 80095fc:	f000 fe72 	bl	800a2e4 <Strings_Is_Equal>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e3      	bne.n	80095ce <sendFile+0x10a>
	   }
}
 8009606:	3788      	adds	r7, #136	; 0x88
 8009608:	46bd      	mov	sp, r7
 800960a:	bdb0      	pop	{r4, r5, r7, pc}
 800960c:	0800b234 	.word	0x0800b234
 8009610:	0800b390 	.word	0x0800b390
 8009614:	0800b3a8 	.word	0x0800b3a8
 8009618:	0800b3b0 	.word	0x0800b3b0
 800961c:	0800b2ac 	.word	0x0800b2ac
 8009620:	0800b37c 	.word	0x0800b37c
 8009624:	200002b8 	.word	0x200002b8
 8009628:	200002b7 	.word	0x200002b7
 800962c:	40010c00 	.word	0x40010c00
 8009630:	0800b3b4 	.word	0x0800b3b4
 8009634:	20002734 	.word	0x20002734

08009638 <emergencyBreak>:

void emergencyBreak(void){
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
	uint8 data = 24;
 800963e:	2318      	movs	r3, #24
 8009640:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8*)"!", 1, 100); // feed hold
 8009642:	2364      	movs	r3, #100	; 0x64
 8009644:	2201      	movs	r2, #1
 8009646:	4917      	ldr	r1, [pc, #92]	; (80096a4 <emergencyBreak+0x6c>)
 8009648:	4817      	ldr	r0, [pc, #92]	; (80096a8 <emergencyBreak+0x70>)
 800964a:	f7f9 ffb4 	bl	80035b6 <HAL_UART_Transmit>
	OLED_setTextDisplay("Pause","Green = Continue","Red = Reset","");
 800964e:	4b17      	ldr	r3, [pc, #92]	; (80096ac <emergencyBreak+0x74>)
 8009650:	4a17      	ldr	r2, [pc, #92]	; (80096b0 <emergencyBreak+0x78>)
 8009652:	4918      	ldr	r1, [pc, #96]	; (80096b4 <emergencyBreak+0x7c>)
 8009654:	4818      	ldr	r0, [pc, #96]	; (80096b8 <emergencyBreak+0x80>)
 8009656:	f7fe fd71 	bl	800813c <OLED_setTextDisplay>
	while (TRUE) {
		if (!HAL_GPIO_ReadPin(MS3_GPIO_Port, MS3_Pin)) {HAL_UART_Transmit(&huart1, (uint8*)"~", 1, 100);return;} // send continue and return
 800965a:	2102      	movs	r1, #2
 800965c:	4817      	ldr	r0, [pc, #92]	; (80096bc <emergencyBreak+0x84>)
 800965e:	f7f8 f88b 	bl	8001778 <HAL_GPIO_ReadPin>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d106      	bne.n	8009676 <emergencyBreak+0x3e>
 8009668:	2364      	movs	r3, #100	; 0x64
 800966a:	2201      	movs	r2, #1
 800966c:	4914      	ldr	r1, [pc, #80]	; (80096c0 <emergencyBreak+0x88>)
 800966e:	480e      	ldr	r0, [pc, #56]	; (80096a8 <emergencyBreak+0x70>)
 8009670:	f7f9 ffa1 	bl	80035b6 <HAL_UART_Transmit>
 8009674:	e012      	b.n	800969c <emergencyBreak+0x64>
		if (!HAL_GPIO_ReadPin(MS6_GPIO_Port, MS6_Pin)) {
 8009676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800967a:	4810      	ldr	r0, [pc, #64]	; (80096bc <emergencyBreak+0x84>)
 800967c:	f7f8 f87c 	bl	8001778 <HAL_GPIO_ReadPin>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e9      	bne.n	800965a <emergencyBreak+0x22>
			HAL_UART_Transmit(&huart1, &data, 1, 100);
 8009686:	1df9      	adds	r1, r7, #7
 8009688:	2364      	movs	r3, #100	; 0x64
 800968a:	2201      	movs	r2, #1
 800968c:	4806      	ldr	r0, [pc, #24]	; (80096a8 <emergencyBreak+0x70>)
 800968e:	f7f9 ff92 	bl	80035b6 <HAL_UART_Transmit>
			HAL_Delay(500);
 8009692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009696:	f7f6 ff37 	bl	8000508 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(MS3_GPIO_Port, MS3_Pin)) {HAL_UART_Transmit(&huart1, (uint8*)"~", 1, 100);return;} // send continue and return
 800969a:	e7de      	b.n	800965a <emergencyBreak+0x22>
			//HAL_GPIO_WritePin(resetpin_GPIO_Port, resetpin_Pin, GPIO_PIN_RESET);
		}
	}
}
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	0800b3bc 	.word	0x0800b3bc
 80096a8:	200048b8 	.word	0x200048b8
 80096ac:	0800b234 	.word	0x0800b234
 80096b0:	0800b3c0 	.word	0x0800b3c0
 80096b4:	0800b3cc 	.word	0x0800b3cc
 80096b8:	0800b3e0 	.word	0x0800b3e0
 80096bc:	40010c00 	.word	0x40010c00
 80096c0:	0800b3e8 	.word	0x0800b3e8

080096c4 <ignoreUnsupportedCommands>:

void ignoreUnsupportedCommands(sint8* lineOfCode)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
	/*
	  Remove unsupported codes, either because they are unsupported by GRBL or because I choose to.
	 */
	removeIfExists(lineOfCode,"G64");   // Unsupported: G64 Constant velocity mode
 80096cc:	4926      	ldr	r1, [pc, #152]	; (8009768 <ignoreUnsupportedCommands+0xa4>)
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f866 	bl	80097a0 <removeIfExists>
	removeIfExists(lineOfCode,"G40");   // unsupported: G40 Tool radius comp off
 80096d4:	4925      	ldr	r1, [pc, #148]	; (800976c <ignoreUnsupportedCommands+0xa8>)
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f862 	bl	80097a0 <removeIfExists>
	removeIfExists(lineOfCode,"G41");   // unsupported: G41 Tool radius compensation left
 80096dc:	4924      	ldr	r1, [pc, #144]	; (8009770 <ignoreUnsupportedCommands+0xac>)
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f85e 	bl	80097a0 <removeIfExists>
	removeIfExists(lineOfCode,"G81");   // unsupported: G81 Canned drilling cycle
 80096e4:	4923      	ldr	r1, [pc, #140]	; (8009774 <ignoreUnsupportedCommands+0xb0>)
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f85a 	bl	80097a0 <removeIfExists>
	removeIfExists(lineOfCode,"G83");   // unsupported: G83 Deep hole drilling canned cycle
 80096ec:	4922      	ldr	r1, [pc, #136]	; (8009778 <ignoreUnsupportedCommands+0xb4>)
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f856 	bl	80097a0 <removeIfExists>
	removeIfExists(lineOfCode,"M6");    // ignore Tool change
 80096f4:	4921      	ldr	r1, [pc, #132]	; (800977c <ignoreUnsupportedCommands+0xb8>)
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f852 	bl	80097a0 <removeIfExists>
	removeIfExists(lineOfCode,"M7");    // ignore coolant control
 80096fc:	4920      	ldr	r1, [pc, #128]	; (8009780 <ignoreUnsupportedCommands+0xbc>)
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f84e 	bl	80097a0 <removeIfExists>
	removeIfExists(lineOfCode,"M8");    // ignore coolant control
 8009704:	491f      	ldr	r1, [pc, #124]	; (8009784 <ignoreUnsupportedCommands+0xc0>)
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f84a 	bl	80097a0 <removeIfExists>
	removeIfExists(lineOfCode,"M9");    // ignore coolant control
 800970c:	491e      	ldr	r1, [pc, #120]	; (8009788 <ignoreUnsupportedCommands+0xc4>)
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f846 	bl	80097a0 <removeIfExists>
	removeIfExists(lineOfCode,"M10");   // ignore vacuum, pallet clamp
 8009714:	491d      	ldr	r1, [pc, #116]	; (800978c <ignoreUnsupportedCommands+0xc8>)
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f842 	bl	80097a0 <removeIfExists>
	removeIfExists(lineOfCode,"M11");   // ignore vacuum, pallet clamp
 800971c:	491c      	ldr	r1, [pc, #112]	; (8009790 <ignoreUnsupportedCommands+0xcc>)
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f83e 	bl	80097a0 <removeIfExists>
	removeIfExists(lineOfCode,"M5");    // ignore spindle off
 8009724:	491b      	ldr	r1, [pc, #108]	; (8009794 <ignoreUnsupportedCommands+0xd0>)
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f83a 	bl	80097a0 <removeIfExists>
	String_ReplaceSubstring(lineOfCode, "M2 ", "M5 M2 "); // Shut down spindle on program end.
 800972c:	4a1a      	ldr	r2, [pc, #104]	; (8009798 <ignoreUnsupportedCommands+0xd4>)
 800972e:	491b      	ldr	r1, [pc, #108]	; (800979c <ignoreUnsupportedCommands+0xd8>)
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fe4c 	bl	800a3ce <String_ReplaceSubstring>

	// Ignore comment lines
	// Ignore tool commands, I do not support tool changers
	if (String_IsStartWith(lineOfCode, '(') || String_IsStartWith(lineOfCode, 'T') ) {lineOfCode[0] = '\0';}
 8009736:	2128      	movs	r1, #40	; 0x28
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 ff14 	bl	800a566 <String_IsStartWith>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d106      	bne.n	8009752 <ignoreUnsupportedCommands+0x8e>
 8009744:	2154      	movs	r1, #84	; 0x54
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 ff0d 	bl	800a566 <String_IsStartWith>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <ignoreUnsupportedCommands+0x94>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	701a      	strb	r2, [r3, #0]
	Sring_Trim(lineOfCode);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 ff17 	bl	800a58c <Sring_Trim>
}
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	0800b3ec 	.word	0x0800b3ec
 800976c:	0800b3f0 	.word	0x0800b3f0
 8009770:	0800b3f4 	.word	0x0800b3f4
 8009774:	0800b3f8 	.word	0x0800b3f8
 8009778:	0800b3fc 	.word	0x0800b3fc
 800977c:	0800b400 	.word	0x0800b400
 8009780:	0800b404 	.word	0x0800b404
 8009784:	0800b408 	.word	0x0800b408
 8009788:	0800b40c 	.word	0x0800b40c
 800978c:	0800b410 	.word	0x0800b410
 8009790:	0800b414 	.word	0x0800b414
 8009794:	0800b418 	.word	0x0800b418
 8009798:	0800b41c 	.word	0x0800b41c
 800979c:	0800b424 	.word	0x0800b424

080097a0 <removeIfExists>:

void removeIfExists(sint8* lineOfCode,sint8* toBeRemoved )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
	String_ReplaceSubstring(lineOfCode, toBeRemoved, " ");
 80097aa:	4a04      	ldr	r2, [pc, #16]	; (80097bc <removeIfExists+0x1c>)
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fe0d 	bl	800a3ce <String_ReplaceSubstring>
}
 80097b4:	bf00      	nop
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	0800b378 	.word	0x0800b378

080097c0 <SpindleSlowStart>:

void SpindleSlowStart(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
	// The first relay gives power to the spindle through a 1 ohm power resistor.
	// This limits the current just enough to prevent the current protection.
	//HAL_GPIO_WritePin(yellowLED_Button_GPIO_Port, yellowLED_Button_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(SpindleStartRelay_Button_GPIO_Port, SpindleStartRelay_Button_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
 80097c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80097c8:	f7f6 fe9e 	bl	8000508 <HAL_Delay>

	// After the spindle reaches full speed, the second relay takes over, this relay powers the
	// spindle without any resitors
	//HAL_GPIO_WritePin(SpindleRelay_Button_GPIO_Port, SpindleRelay_Button_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(greenLED_Button_GPIO_Port, greenLED_Button_Pin, GPIO_PIN_SET);
	HAL_Delay(1000); // wait for the spindle to rev up completely
 80097cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097d0:	f7f6 fe9a 	bl	8000508 <HAL_Delay>
}
 80097d4:	bf00      	nop
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <sendCodeLine>:

void sendCodeLine(sint8 *lineOfCode, boolean waitForOk)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	70fb      	strb	r3, [r7, #3]
	uint32 updateScreen = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8*)lineOfCode, string_length(lineOfCode), 5000);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fcb9 	bl	800a160 <string_length>
 80097ee:	4603      	mov	r3, r0
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	4813      	ldr	r0, [pc, #76]	; (8009848 <sendCodeLine+0x70>)
 80097fa:	f7f9 fedc 	bl	80035b6 <HAL_UART_Transmit>
	awaitingOK = TRUE;
 80097fe:	4b13      	ldr	r3, [pc, #76]	; (800984c <sendCodeLine+0x74>)
 8009800:	2201      	movs	r2, #1
 8009802:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(10);
	checkForOk();
 8009804:	f000 fab4 	bl	8009d70 <checkForOk>
	while (waitForOk && awaitingOK)
 8009808:	e012      	b.n	8009830 <sendCodeLine+0x58>
	{
		HAL_Delay(50);
 800980a:	2032      	movs	r0, #50	; 0x32
 800980c:	f7f6 fe7c 	bl	8000508 <HAL_Delay>
		if (updateScreen++ > 4)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	1c5a      	adds	r2, r3, #1
 8009814:	60fa      	str	r2, [r7, #12]
 8009816:	2b04      	cmp	r3, #4
 8009818:	d908      	bls.n	800982c <sendCodeLine+0x54>
		{
			updateScreen=0;
 800981a:	2300      	movs	r3, #0
 800981c:	60fb      	str	r3, [r7, #12]
			updateDisplayStatus(runningTime);
 800981e:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <sendCodeLine+0x78>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	4610      	mov	r0, r2
 8009826:	4619      	mov	r1, r3
 8009828:	f000 f814 	bl	8009854 <updateDisplayStatus>
		}
		checkForOk();
 800982c:	f000 faa0 	bl	8009d70 <checkForOk>
	while (waitForOk && awaitingOK)
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <sendCodeLine+0x66>
 8009836:	4b05      	ldr	r3, [pc, #20]	; (800984c <sendCodeLine+0x74>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e5      	bne.n	800980a <sendCodeLine+0x32>
	}
}
 800983e:	bf00      	nop
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	200048b8 	.word	0x200048b8
 800984c:	200002b7 	.word	0x200002b7
 8009850:	200002b8 	.word	0x200002b8

08009854 <updateDisplayStatus>:

void updateDisplayStatus(uint64 runtime)
{
 8009854:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009858:	b090      	sub	sp, #64	; 0x40
 800985a:	af00      	add	r7, sp, #0
 800985c:	e9c7 0100 	strd	r0, r1, [r7]
	/*
	   I had some issues with updating the display while carving a file
	   I created this extra void, just to update the display while carving.
	 */

	uint64 t = HAL_GetTick() - runtime;
 8009860:	f7f6 fe48 	bl	80004f4 <HAL_GetTick>
 8009864:	4603      	mov	r3, r0
 8009866:	4618      	mov	r0, r3
 8009868:	f04f 0100 	mov.w	r1, #0
 800986c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009870:	ebb0 0802 	subs.w	r8, r0, r2
 8009874:	eb61 0903 	sbc.w	r9, r1, r3
 8009878:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
	uint32 H,M,S;
	sint8 StringNum[4];
	sint8 StringTime[10];
	sint8 StringMachine[20];

	t=t/1000;
 800987c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009884:	f04f 0300 	mov.w	r3, #0
 8009888:	f7f6 fc60 	bl	800014c <__aeabi_uldivmod>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	// Now t is the a number of seconds.. we must convert that to "hh:mm:ss"
	H = t/3600;
 8009894:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009898:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800989c:	f04f 0300 	mov.w	r3, #0
 80098a0:	f7f6 fc54 	bl	800014c <__aeabi_uldivmod>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	4613      	mov	r3, r2
 80098aa:	637b      	str	r3, [r7, #52]	; 0x34
	t = t - (H * 3600);
 80098ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ae:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80098b2:	fb02 f303 	mul.w	r3, r2, r3
 80098b6:	461a      	mov	r2, r3
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80098c0:	1a84      	subs	r4, r0, r2
 80098c2:	eb61 0503 	sbc.w	r5, r1, r3
 80098c6:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
	M = t/60;
 80098ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80098ce:	f04f 023c 	mov.w	r2, #60	; 0x3c
 80098d2:	f04f 0300 	mov.w	r3, #0
 80098d6:	f7f6 fc39 	bl	800014c <__aeabi_uldivmod>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	4613      	mov	r3, r2
 80098e0:	633b      	str	r3, [r7, #48]	; 0x30
	S = t - (M * 60);
 80098e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098e6:	4613      	mov	r3, r2
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	1a9b      	subs	r3, r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	1acb      	subs	r3, r1, r3
 80098f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	NumberToString(H, StringNum);
 80098f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f4:	4618      	mov	r0, r3
 80098f6:	f04f 0100 	mov.w	r1, #0
 80098fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098fe:	461a      	mov	r2, r3
 8009900:	f000 fc91 	bl	800a226 <NumberToString>
	StringCopy(StringTime, StringNum);
 8009904:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009908:	f107 031c 	add.w	r3, r7, #28
 800990c:	4611      	mov	r1, r2
 800990e:	4618      	mov	r0, r3
 8009910:	f000 fc66 	bl	800a1e0 <StringCopy>
	string_cat(StringTime, ";");
 8009914:	f107 031c 	add.w	r3, r7, #28
 8009918:	494b      	ldr	r1, [pc, #300]	; (8009a48 <updateDisplayStatus+0x1f4>)
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fc36 	bl	800a18c <string_cat>
	NumberToString(M, StringNum);
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	4618      	mov	r0, r3
 8009924:	f04f 0100 	mov.w	r1, #0
 8009928:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800992c:	461a      	mov	r2, r3
 800992e:	f000 fc7a 	bl	800a226 <NumberToString>
	StringCopy(StringTime, StringNum);
 8009932:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009936:	f107 031c 	add.w	r3, r7, #28
 800993a:	4611      	mov	r1, r2
 800993c:	4618      	mov	r0, r3
 800993e:	f000 fc4f 	bl	800a1e0 <StringCopy>
	string_cat(StringTime, ";");
 8009942:	f107 031c 	add.w	r3, r7, #28
 8009946:	4940      	ldr	r1, [pc, #256]	; (8009a48 <updateDisplayStatus+0x1f4>)
 8009948:	4618      	mov	r0, r3
 800994a:	f000 fc1f 	bl	800a18c <string_cat>
	NumberToString(S, StringNum);
 800994e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009950:	4618      	mov	r0, r3
 8009952:	f04f 0100 	mov.w	r1, #0
 8009956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800995a:	461a      	mov	r2, r3
 800995c:	f000 fc63 	bl	800a226 <NumberToString>
	StringCopy(StringTime, StringNum);
 8009960:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009964:	f107 031c 	add.w	r3, r7, #28
 8009968:	4611      	mov	r1, r2
 800996a:	4618      	mov	r0, r3
 800996c:	f000 fc38 	bl	800a1e0 <StringCopy>

	getStatus();
 8009970:	f000 f87c 	bl	8009a6c <getStatus>
	OLED_Clear();
 8009974:	f7fe fc92 	bl	800829c <OLED_Clear>
	StringCopy(StringMachine, machineStatus);
 8009978:	f107 0308 	add.w	r3, r7, #8
 800997c:	4933      	ldr	r1, [pc, #204]	; (8009a4c <updateDisplayStatus+0x1f8>)
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fc2e 	bl	800a1e0 <StringCopy>
	string_cat(StringMachine, " ");
 8009984:	f107 0308 	add.w	r3, r7, #8
 8009988:	4931      	ldr	r1, [pc, #196]	; (8009a50 <updateDisplayStatus+0x1fc>)
 800998a:	4618      	mov	r0, r3
 800998c:	f000 fbfe 	bl	800a18c <string_cat>
	string_cat(StringMachine, StringTime);
 8009990:	f107 021c 	add.w	r2, r7, #28
 8009994:	f107 0308 	add.w	r3, r7, #8
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fbf6 	bl	800a18c <string_cat>
	OLED_setTextRow(StringMachine, 0);
 80099a0:	f107 0308 	add.w	r3, r7, #8
 80099a4:	2100      	movs	r1, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe fc4e 	bl	8008248 <OLED_setTextRow>
	StringCopy(StringMachine, "X: ");
 80099ac:	f107 0308 	add.w	r3, r7, #8
 80099b0:	4928      	ldr	r1, [pc, #160]	; (8009a54 <updateDisplayStatus+0x200>)
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 fc14 	bl	800a1e0 <StringCopy>
	string_cat(StringMachine, WposX);
 80099b8:	f107 0308 	add.w	r3, r7, #8
 80099bc:	4926      	ldr	r1, [pc, #152]	; (8009a58 <updateDisplayStatus+0x204>)
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fbe4 	bl	800a18c <string_cat>
	string_cat(StringMachine, " ");
 80099c4:	f107 0308 	add.w	r3, r7, #8
 80099c8:	4921      	ldr	r1, [pc, #132]	; (8009a50 <updateDisplayStatus+0x1fc>)
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fbde 	bl	800a18c <string_cat>
	OLED_setTextRow(StringMachine, 1);
 80099d0:	f107 0308 	add.w	r3, r7, #8
 80099d4:	2101      	movs	r1, #1
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fc36 	bl	8008248 <OLED_setTextRow>
	StringCopy(StringMachine, "Y: ");
 80099dc:	f107 0308 	add.w	r3, r7, #8
 80099e0:	491e      	ldr	r1, [pc, #120]	; (8009a5c <updateDisplayStatus+0x208>)
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fbfc 	bl	800a1e0 <StringCopy>
	string_cat(StringMachine, WposY);
 80099e8:	f107 0308 	add.w	r3, r7, #8
 80099ec:	491c      	ldr	r1, [pc, #112]	; (8009a60 <updateDisplayStatus+0x20c>)
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 fbcc 	bl	800a18c <string_cat>
	string_cat(StringMachine, " ");
 80099f4:	f107 0308 	add.w	r3, r7, #8
 80099f8:	4915      	ldr	r1, [pc, #84]	; (8009a50 <updateDisplayStatus+0x1fc>)
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 fbc6 	bl	800a18c <string_cat>
	OLED_setTextRow(StringMachine, 1);
 8009a00:	f107 0308 	add.w	r3, r7, #8
 8009a04:	2101      	movs	r1, #1
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fc1e 	bl	8008248 <OLED_setTextRow>
	StringCopy(StringMachine, "Z: ");
 8009a0c:	f107 0308 	add.w	r3, r7, #8
 8009a10:	4914      	ldr	r1, [pc, #80]	; (8009a64 <updateDisplayStatus+0x210>)
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 fbe4 	bl	800a1e0 <StringCopy>
	string_cat(StringMachine, WposZ);
 8009a18:	f107 0308 	add.w	r3, r7, #8
 8009a1c:	4912      	ldr	r1, [pc, #72]	; (8009a68 <updateDisplayStatus+0x214>)
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 fbb4 	bl	800a18c <string_cat>
	string_cat(StringMachine, " ");
 8009a24:	f107 0308 	add.w	r3, r7, #8
 8009a28:	4909      	ldr	r1, [pc, #36]	; (8009a50 <updateDisplayStatus+0x1fc>)
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fbae 	bl	800a18c <string_cat>
	OLED_setTextRow(StringMachine, 2);
 8009a30:	f107 0308 	add.w	r3, r7, #8
 8009a34:	2102      	movs	r1, #2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe fc06 	bl	8008248 <OLED_setTextRow>
}
 8009a3c:	bf00      	nop
 8009a3e:	3740      	adds	r7, #64	; 0x40
 8009a40:	46bd      	mov	sp, r7
 8009a42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009a46:	bf00      	nop
 8009a48:	0800b428 	.word	0x0800b428
 8009a4c:	20002734 	.word	0x20002734
 8009a50:	0800b378 	.word	0x0800b378
 8009a54:	0800b358 	.word	0x0800b358
 8009a58:	20003808 	.word	0x20003808
 8009a5c:	0800b35c 	.word	0x0800b35c
 8009a60:	200037fc 	.word	0x200037fc
 8009a64:	0800b360 	.word	0x0800b360
 8009a68:	200049a8 	.word	0x200049a8

08009a6c <getStatus>:

void getStatus(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b098      	sub	sp, #96	; 0x60
 8009a70:	af00      	add	r7, sp, #0
	    <Check,MPos:-995.529,-210.560,-727.000,WPos:-101.529,-115.440,-110.000>
	 */

	sint8 content[80];
	sint8 character;
	uint8 index=0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	boolean completeMessage=false;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint32 i=0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32 c=0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	657b      	str	r3, [r7, #84]	; 0x54

	checkForOk();
 8009a86:	f000 f973 	bl	8009d70 <checkForOk>
	HAL_UART_Transmit(&huart1, (uint8*)"?", 2, 5000);
 8009a8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8009a8e:	2202      	movs	r2, #2
 8009a90:	49ad      	ldr	r1, [pc, #692]	; (8009d48 <getStatus+0x2dc>)
 8009a92:	48ae      	ldr	r0, [pc, #696]	; (8009d4c <getStatus+0x2e0>)
 8009a94:	f7f9 fd8f 	bl	80035b6 <HAL_UART_Transmit>

	while(!(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE))){}
 8009a98:	bf00      	nop
 8009a9a:	4bac      	ldr	r3, [pc, #688]	; (8009d4c <getStatus+0x2e0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0320 	and.w	r3, r3, #32
 8009aa4:	2b20      	cmp	r3, #32
 8009aa6:	d1f8      	bne.n	8009a9a <getStatus+0x2e>
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE))
 8009aa8:	e033      	b.n	8009b12 <getStatus+0xa6>
	{
		HAL_UART_Receive(&huart1, (uint8*)&character, 1, 100);
 8009aaa:	1cf9      	adds	r1, r7, #3
 8009aac:	2364      	movs	r3, #100	; 0x64
 8009aae:	2201      	movs	r2, #1
 8009ab0:	48a6      	ldr	r0, [pc, #664]	; (8009d4c <getStatus+0x2e0>)
 8009ab2:	f7f9 fe19 	bl	80036e8 <HAL_UART_Receive>
		if (content[index] =='>') completeMessage=TRUE; // a simple check to see if the message is complete
 8009ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009abe:	4413      	add	r3, r2
 8009ac0:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8009ac4:	2b3e      	cmp	r3, #62	; 0x3e
 8009ac6:	d102      	bne.n	8009ace <getStatus+0x62>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		if (index>0) {
 8009ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d015      	beq.n	8009b02 <getStatus+0x96>
			if (content[index]=='k' && content[index-1]=='o') {awaitingOK=FALSE;}
 8009ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ada:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009ade:	4413      	add	r3, r2
 8009ae0:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8009ae4:	2b6b      	cmp	r3, #107	; 0x6b
 8009ae6:	d10c      	bne.n	8009b02 <getStatus+0x96>
 8009ae8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aec:	3b01      	subs	r3, #1
 8009aee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009af2:	4413      	add	r3, r2
 8009af4:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8009af8:	2b6f      	cmp	r3, #111	; 0x6f
 8009afa:	d102      	bne.n	8009b02 <getStatus+0x96>
 8009afc:	4b94      	ldr	r3, [pc, #592]	; (8009d50 <getStatus+0x2e4>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	701a      	strb	r2, [r3, #0]
		}
		index++;
 8009b02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b06:	3301      	adds	r3, #1
 8009b08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		HAL_Delay(1);
 8009b0c:	2001      	movs	r0, #1
 8009b0e:	f7f6 fcfb 	bl	8000508 <HAL_Delay>
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE))
 8009b12:	4b8e      	ldr	r3, [pc, #568]	; (8009d4c <getStatus+0x2e0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0320 	and.w	r3, r3, #32
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	d0c4      	beq.n	8009aaa <getStatus+0x3e>
	}

	if (!completeMessage) { return; }
 8009b20:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8009b24:	f083 0301 	eor.w	r3, r3, #1
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f040 8107 	bne.w	8009d3e <getStatus+0x2d2>
	i++;
 8009b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b32:	3301      	adds	r3, #1
 8009b34:	65bb      	str	r3, [r7, #88]	; 0x58
	while (c<9 && content[i] !=',') {machineStatus[c++]=content[i++]; machineStatus[c]=0; } // get the machine status
 8009b36:	e011      	b.n	8009b5c <getStatus+0xf0>
 8009b38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b3a:	1c53      	adds	r3, r2, #1
 8009b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b40:	1c59      	adds	r1, r3, #1
 8009b42:	6579      	str	r1, [r7, #84]	; 0x54
 8009b44:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009b48:	440a      	add	r2, r1
 8009b4a:	f812 1c5c 	ldrb.w	r1, [r2, #-92]
 8009b4e:	4a81      	ldr	r2, [pc, #516]	; (8009d54 <getStatus+0x2e8>)
 8009b50:	54d1      	strb	r1, [r2, r3]
 8009b52:	4a80      	ldr	r2, [pc, #512]	; (8009d54 <getStatus+0x2e8>)
 8009b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b56:	4413      	add	r3, r2
 8009b58:	2200      	movs	r2, #0
 8009b5a:	701a      	strb	r2, [r3, #0]
 8009b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b5e:	2b08      	cmp	r3, #8
 8009b60:	d805      	bhi.n	8009b6e <getStatus+0x102>
 8009b62:	1d3a      	adds	r2, r7, #4
 8009b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b66:	4413      	add	r3, r2
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	2b2c      	cmp	r3, #44	; 0x2c
 8009b6c:	d1e4      	bne.n	8009b38 <getStatus+0xcc>
	while (content[i++] != ':') ; // skip until the first ':'
 8009b6e:	bf00      	nop
 8009b70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b76:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8009b80:	2b3a      	cmp	r3, #58	; 0x3a
 8009b82:	d1f5      	bne.n	8009b70 <getStatus+0x104>
	c=0;
 8009b84:	2300      	movs	r3, #0
 8009b86:	657b      	str	r3, [r7, #84]	; 0x54
	while (c<8 && content[i] !=',') { MposX[c++]=content[i++]; MposX[c] = 0;} // get MposX
 8009b88:	e011      	b.n	8009bae <getStatus+0x142>
 8009b8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b8c:	1c53      	adds	r3, r2, #1
 8009b8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b92:	1c59      	adds	r1, r3, #1
 8009b94:	6579      	str	r1, [r7, #84]	; 0x54
 8009b96:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009b9a:	440a      	add	r2, r1
 8009b9c:	f812 1c5c 	ldrb.w	r1, [r2, #-92]
 8009ba0:	4a6d      	ldr	r2, [pc, #436]	; (8009d58 <getStatus+0x2ec>)
 8009ba2:	54d1      	strb	r1, [r2, r3]
 8009ba4:	4a6c      	ldr	r2, [pc, #432]	; (8009d58 <getStatus+0x2ec>)
 8009ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ba8:	4413      	add	r3, r2
 8009baa:	2200      	movs	r2, #0
 8009bac:	701a      	strb	r2, [r3, #0]
 8009bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bb0:	2b07      	cmp	r3, #7
 8009bb2:	d805      	bhi.n	8009bc0 <getStatus+0x154>
 8009bb4:	1d3a      	adds	r2, r7, #4
 8009bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bb8:	4413      	add	r3, r2
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b2c      	cmp	r3, #44	; 0x2c
 8009bbe:	d1e4      	bne.n	8009b8a <getStatus+0x11e>
	c=0; i++;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8009bc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	65bb      	str	r3, [r7, #88]	; 0x58
	while (c<8 && content[i] !=',') { MposY[c++]=content[i++]; MposY[c] = 0;} // get MposY
 8009bca:	e011      	b.n	8009bf0 <getStatus+0x184>
 8009bcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bce:	1c53      	adds	r3, r2, #1
 8009bd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bd4:	1c59      	adds	r1, r3, #1
 8009bd6:	6579      	str	r1, [r7, #84]	; 0x54
 8009bd8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009bdc:	440a      	add	r2, r1
 8009bde:	f812 1c5c 	ldrb.w	r1, [r2, #-92]
 8009be2:	4a5e      	ldr	r2, [pc, #376]	; (8009d5c <getStatus+0x2f0>)
 8009be4:	54d1      	strb	r1, [r2, r3]
 8009be6:	4a5d      	ldr	r2, [pc, #372]	; (8009d5c <getStatus+0x2f0>)
 8009be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bea:	4413      	add	r3, r2
 8009bec:	2200      	movs	r2, #0
 8009bee:	701a      	strb	r2, [r3, #0]
 8009bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bf2:	2b07      	cmp	r3, #7
 8009bf4:	d805      	bhi.n	8009c02 <getStatus+0x196>
 8009bf6:	1d3a      	adds	r2, r7, #4
 8009bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bfa:	4413      	add	r3, r2
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2b2c      	cmp	r3, #44	; 0x2c
 8009c00:	d1e4      	bne.n	8009bcc <getStatus+0x160>
	c=0; i++;
 8009c02:	2300      	movs	r3, #0
 8009c04:	657b      	str	r3, [r7, #84]	; 0x54
 8009c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c08:	3301      	adds	r3, #1
 8009c0a:	65bb      	str	r3, [r7, #88]	; 0x58
	while (c<8 && content[i] !=',') { MposZ[c++]=content[i++]; MposZ[c] = 0;} // get MposZ
 8009c0c:	e011      	b.n	8009c32 <getStatus+0x1c6>
 8009c0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c10:	1c53      	adds	r3, r2, #1
 8009c12:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c16:	1c59      	adds	r1, r3, #1
 8009c18:	6579      	str	r1, [r7, #84]	; 0x54
 8009c1a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009c1e:	440a      	add	r2, r1
 8009c20:	f812 1c5c 	ldrb.w	r1, [r2, #-92]
 8009c24:	4a4e      	ldr	r2, [pc, #312]	; (8009d60 <getStatus+0x2f4>)
 8009c26:	54d1      	strb	r1, [r2, r3]
 8009c28:	4a4d      	ldr	r2, [pc, #308]	; (8009d60 <getStatus+0x2f4>)
 8009c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c2c:	4413      	add	r3, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	701a      	strb	r2, [r3, #0]
 8009c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c34:	2b07      	cmp	r3, #7
 8009c36:	d805      	bhi.n	8009c44 <getStatus+0x1d8>
 8009c38:	1d3a      	adds	r2, r7, #4
 8009c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c3c:	4413      	add	r3, r2
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b2c      	cmp	r3, #44	; 0x2c
 8009c42:	d1e4      	bne.n	8009c0e <getStatus+0x1a2>
	while (content[i++] != ':') ; // skip until the next ':'
 8009c44:	bf00      	nop
 8009c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c48:	1c5a      	adds	r2, r3, #1
 8009c4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8009c4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009c50:	4413      	add	r3, r2
 8009c52:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8009c56:	2b3a      	cmp	r3, #58	; 0x3a
 8009c58:	d1f5      	bne.n	8009c46 <getStatus+0x1da>
	c=0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	657b      	str	r3, [r7, #84]	; 0x54
	while (c<8 && content[i] !=',') { WposX[c++]=content[i++]; WposX[c] = 0;} // get WposX
 8009c5e:	e011      	b.n	8009c84 <getStatus+0x218>
 8009c60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c62:	1c53      	adds	r3, r2, #1
 8009c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c68:	1c59      	adds	r1, r3, #1
 8009c6a:	6579      	str	r1, [r7, #84]	; 0x54
 8009c6c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009c70:	440a      	add	r2, r1
 8009c72:	f812 1c5c 	ldrb.w	r1, [r2, #-92]
 8009c76:	4a3b      	ldr	r2, [pc, #236]	; (8009d64 <getStatus+0x2f8>)
 8009c78:	54d1      	strb	r1, [r2, r3]
 8009c7a:	4a3a      	ldr	r2, [pc, #232]	; (8009d64 <getStatus+0x2f8>)
 8009c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c7e:	4413      	add	r3, r2
 8009c80:	2200      	movs	r2, #0
 8009c82:	701a      	strb	r2, [r3, #0]
 8009c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c86:	2b07      	cmp	r3, #7
 8009c88:	d805      	bhi.n	8009c96 <getStatus+0x22a>
 8009c8a:	1d3a      	adds	r2, r7, #4
 8009c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c8e:	4413      	add	r3, r2
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b2c      	cmp	r3, #44	; 0x2c
 8009c94:	d1e4      	bne.n	8009c60 <getStatus+0x1f4>
	c=0; i++;
 8009c96:	2300      	movs	r3, #0
 8009c98:	657b      	str	r3, [r7, #84]	; 0x54
 8009c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	65bb      	str	r3, [r7, #88]	; 0x58
	while (c<8 && content[i] !=',') { WposY[c++]=content[i++]; WposY[c] = 0;} // get WposY
 8009ca0:	e011      	b.n	8009cc6 <getStatus+0x25a>
 8009ca2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ca4:	1c53      	adds	r3, r2, #1
 8009ca6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009caa:	1c59      	adds	r1, r3, #1
 8009cac:	6579      	str	r1, [r7, #84]	; 0x54
 8009cae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009cb2:	440a      	add	r2, r1
 8009cb4:	f812 1c5c 	ldrb.w	r1, [r2, #-92]
 8009cb8:	4a2b      	ldr	r2, [pc, #172]	; (8009d68 <getStatus+0x2fc>)
 8009cba:	54d1      	strb	r1, [r2, r3]
 8009cbc:	4a2a      	ldr	r2, [pc, #168]	; (8009d68 <getStatus+0x2fc>)
 8009cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cc0:	4413      	add	r3, r2
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
 8009cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cc8:	2b07      	cmp	r3, #7
 8009cca:	d805      	bhi.n	8009cd8 <getStatus+0x26c>
 8009ccc:	1d3a      	adds	r2, r7, #4
 8009cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cd0:	4413      	add	r3, r2
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2b2c      	cmp	r3, #44	; 0x2c
 8009cd6:	d1e4      	bne.n	8009ca2 <getStatus+0x236>
	c=0; i++;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	657b      	str	r3, [r7, #84]	; 0x54
 8009cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cde:	3301      	adds	r3, #1
 8009ce0:	65bb      	str	r3, [r7, #88]	; 0x58
	while (c<8 && content[i] !='>') { WposZ[c++]=content[i++]; WposZ[c] = 0;} // get WposZ
 8009ce2:	e011      	b.n	8009d08 <getStatus+0x29c>
 8009ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ce6:	1c53      	adds	r3, r2, #1
 8009ce8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cec:	1c59      	adds	r1, r3, #1
 8009cee:	6579      	str	r1, [r7, #84]	; 0x54
 8009cf0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009cf4:	440a      	add	r2, r1
 8009cf6:	f812 1c5c 	ldrb.w	r1, [r2, #-92]
 8009cfa:	4a1c      	ldr	r2, [pc, #112]	; (8009d6c <getStatus+0x300>)
 8009cfc:	54d1      	strb	r1, [r2, r3]
 8009cfe:	4a1b      	ldr	r2, [pc, #108]	; (8009d6c <getStatus+0x300>)
 8009d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d02:	4413      	add	r3, r2
 8009d04:	2200      	movs	r2, #0
 8009d06:	701a      	strb	r2, [r3, #0]
 8009d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d0a:	2b07      	cmp	r3, #7
 8009d0c:	d805      	bhi.n	8009d1a <getStatus+0x2ae>
 8009d0e:	1d3a      	adds	r2, r7, #4
 8009d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d12:	4413      	add	r3, r2
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2b3e      	cmp	r3, #62	; 0x3e
 8009d18:	d1e4      	bne.n	8009ce4 <getStatus+0x278>

	if (WposZ[0]=='-')
 8009d1a:	4b14      	ldr	r3, [pc, #80]	; (8009d6c <getStatus+0x300>)
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b2d      	cmp	r3, #45	; 0x2d
 8009d20:	d106      	bne.n	8009d30 <getStatus+0x2c4>
	{ WposZ[5]='0';WposZ[6]=0;}
 8009d22:	4b12      	ldr	r3, [pc, #72]	; (8009d6c <getStatus+0x300>)
 8009d24:	2230      	movs	r2, #48	; 0x30
 8009d26:	715a      	strb	r2, [r3, #5]
 8009d28:	4b10      	ldr	r3, [pc, #64]	; (8009d6c <getStatus+0x300>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	719a      	strb	r2, [r3, #6]
 8009d2e:	e007      	b.n	8009d40 <getStatus+0x2d4>
	else
	{ WposZ[4]='0';WposZ[5]=0;}
 8009d30:	4b0e      	ldr	r3, [pc, #56]	; (8009d6c <getStatus+0x300>)
 8009d32:	2230      	movs	r2, #48	; 0x30
 8009d34:	711a      	strb	r2, [r3, #4]
 8009d36:	4b0d      	ldr	r3, [pc, #52]	; (8009d6c <getStatus+0x300>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	715a      	strb	r2, [r3, #5]
 8009d3c:	e000      	b.n	8009d40 <getStatus+0x2d4>
	if (!completeMessage) { return; }
 8009d3e:	bf00      	nop
}
 8009d40:	3760      	adds	r7, #96	; 0x60
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	0800b42c 	.word	0x0800b42c
 8009d4c:	200048b8 	.word	0x200048b8
 8009d50:	200002b7 	.word	0x200002b7
 8009d54:	20002734 	.word	0x20002734
 8009d58:	2000493c 	.word	0x2000493c
 8009d5c:	20002760 	.word	0x20002760
 8009d60:	200049b4 	.word	0x200049b4
 8009d64:	20003808 	.word	0x20003808
 8009d68:	200037fc 	.word	0x200037fc
 8009d6c:	200049a8 	.word	0x200049a8

08009d70 <checkForOk>:

void checkForOk(void)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
	// read the receive buffer (if anything to read)
	uint8 c,lastc;
	c=64;
 8009d76:	2340      	movs	r3, #64	; 0x40
 8009d78:	71bb      	strb	r3, [r7, #6]
	lastc=64;
 8009d7a:	2340      	movs	r3, #64	; 0x40
 8009d7c:	71fb      	strb	r3, [r7, #7]

	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE))
 8009d7e:	e013      	b.n	8009da8 <checkForOk+0x38>
	{
		HAL_UART_Receive(&huart1, &c, 1, 100);
 8009d80:	1db9      	adds	r1, r7, #6
 8009d82:	2364      	movs	r3, #100	; 0x64
 8009d84:	2201      	movs	r2, #1
 8009d86:	480e      	ldr	r0, [pc, #56]	; (8009dc0 <checkForOk+0x50>)
 8009d88:	f7f9 fcae 	bl	80036e8 <HAL_UART_Receive>
		if (lastc =='o' && c == 'k')
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	2b6f      	cmp	r3, #111	; 0x6f
 8009d90:	d105      	bne.n	8009d9e <checkForOk+0x2e>
 8009d92:	79bb      	ldrb	r3, [r7, #6]
 8009d94:	2b6b      	cmp	r3, #107	; 0x6b
 8009d96:	d102      	bne.n	8009d9e <checkForOk+0x2e>
		{
			awaitingOK = FALSE;
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <checkForOk+0x54>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	701a      	strb	r2, [r3, #0]
		}
		lastc = c;
 8009d9e:	79bb      	ldrb	r3, [r7, #6]
 8009da0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(3);
 8009da2:	2003      	movs	r0, #3
 8009da4:	f7f6 fbb0 	bl	8000508 <HAL_Delay>
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE))
 8009da8:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <checkForOk+0x50>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0320 	and.w	r3, r3, #32
 8009db2:	2b20      	cmp	r3, #32
 8009db4:	d0e4      	beq.n	8009d80 <checkForOk+0x10>
	}
}
 8009db6:	bf00      	nop
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	200048b8 	.word	0x200048b8
 8009dc4:	200002b7 	.word	0x200002b7

08009dc8 <filecount>:
{

}
 */
uint8 filecount(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08e      	sub	sp, #56	; 0x38
 8009dcc:	af00      	add	r7, sp, #0
	/*
	    Count the number of files on the SD card.
	 */
	uint8 count =0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	sint8 path[50] = "/";
 8009dd4:	232f      	movs	r3, #47	; 0x2f
 8009dd6:	607b      	str	r3, [r7, #4]
 8009dd8:	f107 0308 	add.w	r3, r7, #8
 8009ddc:	222e      	movs	r2, #46	; 0x2e
 8009dde:	2100      	movs	r1, #0
 8009de0:	4618      	mov	r0, r3
 8009de2:	f001 f9dd 	bl	800b1a0 <memset>
	while(SD_NextFileDirectory(path) == E_OK)
 8009de6:	e004      	b.n	8009df2 <filecount+0x2a>
	{
		count++;
 8009de8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dec:	3301      	adds	r3, #1
 8009dee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(SD_NextFileDirectory(path) == E_OK)
 8009df2:	1d3b      	adds	r3, r7, #4
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe faed 	bl	80083d4 <SD_NextFileDirectory>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d0f3      	beq.n	8009de8 <filecount+0x20>
	}

	return count;
 8009e00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3738      	adds	r7, #56	; 0x38
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <getFileName>:

Std_ReturnType getFileName(uint8 index, sint8* name)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b090      	sub	sp, #64	; 0x40
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	4603      	mov	r3, r0
 8009e14:	6039      	str	r1, [r7, #0]
 8009e16:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType return_type = E_NOT_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8 count = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	sint8 path[50] = "/";
 8009e24:	232f      	movs	r3, #47	; 0x2f
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	f107 0310 	add.w	r3, r7, #16
 8009e2c:	222e      	movs	r2, #46	; 0x2e
 8009e2e:	2100      	movs	r1, #0
 8009e30:	4618      	mov	r0, r3
 8009e32:	f001 f9b5 	bl	800b1a0 <memset>

	name[0] = 0;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	701a      	strb	r2, [r3, #0]

	if(SD_NextFileDirectory(path) != E_OK){return return_type;}
 8009e3c:	f107 030c 	add.w	r3, r7, #12
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fe fac7 	bl	80083d4 <SD_NextFileDirectory>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d024      	beq.n	8009e96 <getFileName+0x8a>
 8009e4c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009e50:	e02a      	b.n	8009ea8 <getFileName+0x9c>

	while(name[0] == 0)
	{
		if(SD_NextFileDirectory(path) != FR_OK){}
 8009e52:	f107 030c 	add.w	r3, r7, #12
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe fabc 	bl	80083d4 <SD_NextFileDirectory>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d119      	bne.n	8009e96 <getFileName+0x8a>
		else
		{
			if (fileInfo.fattrib & AM_DIR)
 8009e62:	4b13      	ldr	r3, [pc, #76]	; (8009eb0 <getFileName+0xa4>)
 8009e64:	7a1b      	ldrb	r3, [r3, #8]
 8009e66:	f003 0310 	and.w	r3, r3, #16
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d013      	beq.n	8009e96 <getFileName+0x8a>
			{
				count++;
 8009e6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e72:	3301      	adds	r3, #1
 8009e74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if(count == index)
 8009e78:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d109      	bne.n	8009e96 <getFileName+0x8a>
				{
#if _USE_LFN
					name = *fileInfo.lfname ? fileInfo.lfname : fileInfo.fname;
 8009e82:	4b0b      	ldr	r3, [pc, #44]	; (8009eb0 <getFileName+0xa4>)
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <getFileName+0x86>
 8009e8c:	4b08      	ldr	r3, [pc, #32]	; (8009eb0 <getFileName+0xa4>)
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	e000      	b.n	8009e94 <getFileName+0x88>
 8009e92:	4b08      	ldr	r3, [pc, #32]	; (8009eb4 <getFileName+0xa8>)
 8009e94:	603b      	str	r3, [r7, #0]
	while(name[0] == 0)
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d0d9      	beq.n	8009e52 <getFileName+0x46>
				}
			}
		}
	}

	return_type = E_OK;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return return_type; //Success
 8009ea4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3740      	adds	r7, #64	; 0x40
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	20002740 	.word	0x20002740
 8009eb4:	20002749 	.word	0x20002749

08009eb8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b094      	sub	sp, #80	; 0x50
 8009ebc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ec2:	2228      	movs	r2, #40	; 0x28
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f001 f96a 	bl	800b1a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009ecc:	f107 0314 	add.w	r3, r7, #20
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	605a      	str	r2, [r3, #4]
 8009ed6:	609a      	str	r2, [r3, #8]
 8009ed8:	60da      	str	r2, [r3, #12]
 8009eda:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009edc:	1d3b      	adds	r3, r7, #4
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	605a      	str	r2, [r3, #4]
 8009ee4:	609a      	str	r2, [r3, #8]
 8009ee6:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009efa:	2302      	movs	r3, #2
 8009efc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009efe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f02:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8009f04:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8009f08:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7f8 f992 	bl	8002238 <HAL_RCC_OscConfig>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <SystemClock_Config+0x66>
	{
		Error_Handler();
 8009f1a:	f000 f91b 	bl	800a154 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009f1e:	230f      	movs	r3, #15
 8009f20:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009f22:	2302      	movs	r3, #2
 8009f24:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009f26:	2300      	movs	r3, #0
 8009f28:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f2e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009f30:	2300      	movs	r3, #0
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009f34:	f107 0314 	add.w	r3, r7, #20
 8009f38:	2102      	movs	r1, #2
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7f8 fbe0 	bl	8002700 <HAL_RCC_ClockConfig>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8009f46:	f000 f905 	bl	800a154 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8009f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f52:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f54:	1d3b      	adds	r3, r7, #4
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7f8 fd90 	bl	8002a7c <HAL_RCCEx_PeriphCLKConfig>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8009f62:	f000 f8f7 	bl	800a154 <Error_Handler>
	}
}
 8009f66:	bf00      	nop
 8009f68:	3750      	adds	r7, #80	; 0x50
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C1_Init(void)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8009f74:	4b12      	ldr	r3, [pc, #72]	; (8009fc0 <MX_I2C1_Init+0x50>)
 8009f76:	4a13      	ldr	r2, [pc, #76]	; (8009fc4 <MX_I2C1_Init+0x54>)
 8009f78:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8009f7a:	4b11      	ldr	r3, [pc, #68]	; (8009fc0 <MX_I2C1_Init+0x50>)
 8009f7c:	4a12      	ldr	r2, [pc, #72]	; (8009fc8 <MX_I2C1_Init+0x58>)
 8009f7e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009f80:	4b0f      	ldr	r3, [pc, #60]	; (8009fc0 <MX_I2C1_Init+0x50>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8009f86:	4b0e      	ldr	r3, [pc, #56]	; (8009fc0 <MX_I2C1_Init+0x50>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009f8c:	4b0c      	ldr	r3, [pc, #48]	; (8009fc0 <MX_I2C1_Init+0x50>)
 8009f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009f92:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009f94:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <MX_I2C1_Init+0x50>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8009f9a:	4b09      	ldr	r3, [pc, #36]	; (8009fc0 <MX_I2C1_Init+0x50>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009fa0:	4b07      	ldr	r3, [pc, #28]	; (8009fc0 <MX_I2C1_Init+0x50>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009fa6:	4b06      	ldr	r3, [pc, #24]	; (8009fc0 <MX_I2C1_Init+0x50>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009fac:	4804      	ldr	r0, [pc, #16]	; (8009fc0 <MX_I2C1_Init+0x50>)
 8009fae:	f7f7 fc13 	bl	80017d8 <HAL_I2C_Init>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8009fb8:	f000 f8cc 	bl	800a154 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8009fbc:	bf00      	nop
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	200037a0 	.word	0x200037a0
 8009fc4:	40005400 	.word	0x40005400
 8009fc8:	00061a80 	.word	0x00061a80

08009fcc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8009fd0:	4b17      	ldr	r3, [pc, #92]	; (800a030 <MX_SPI1_Init+0x64>)
 8009fd2:	4a18      	ldr	r2, [pc, #96]	; (800a034 <MX_SPI1_Init+0x68>)
 8009fd4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8009fd6:	4b16      	ldr	r3, [pc, #88]	; (800a030 <MX_SPI1_Init+0x64>)
 8009fd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009fdc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009fde:	4b14      	ldr	r3, [pc, #80]	; (800a030 <MX_SPI1_Init+0x64>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009fe4:	4b12      	ldr	r3, [pc, #72]	; (800a030 <MX_SPI1_Init+0x64>)
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009fea:	4b11      	ldr	r3, [pc, #68]	; (800a030 <MX_SPI1_Init+0x64>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009ff0:	4b0f      	ldr	r3, [pc, #60]	; (800a030 <MX_SPI1_Init+0x64>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8009ff6:	4b0e      	ldr	r3, [pc, #56]	; (800a030 <MX_SPI1_Init+0x64>)
 8009ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ffc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009ffe:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <MX_SPI1_Init+0x64>)
 800a000:	2220      	movs	r2, #32
 800a002:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a004:	4b0a      	ldr	r3, [pc, #40]	; (800a030 <MX_SPI1_Init+0x64>)
 800a006:	2200      	movs	r2, #0
 800a008:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <MX_SPI1_Init+0x64>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a010:	4b07      	ldr	r3, [pc, #28]	; (800a030 <MX_SPI1_Init+0x64>)
 800a012:	2200      	movs	r2, #0
 800a014:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800a016:	4b06      	ldr	r3, [pc, #24]	; (800a030 <MX_SPI1_Init+0x64>)
 800a018:	220a      	movs	r2, #10
 800a01a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a01c:	4804      	ldr	r0, [pc, #16]	; (800a030 <MX_SPI1_Init+0x64>)
 800a01e:	f7f9 fa18 	bl	8003452 <HAL_SPI_Init>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 800a028:	f000 f894 	bl	800a154 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800a02c:	bf00      	nop
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	2000494c 	.word	0x2000494c
 800a034:	40013000 	.word	0x40013000

0800a038 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART1_UART_Init(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800a03c:	4b11      	ldr	r3, [pc, #68]	; (800a084 <MX_USART1_UART_Init+0x4c>)
 800a03e:	4a12      	ldr	r2, [pc, #72]	; (800a088 <MX_USART1_UART_Init+0x50>)
 800a040:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800a042:	4b10      	ldr	r3, [pc, #64]	; (800a084 <MX_USART1_UART_Init+0x4c>)
 800a044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a048:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a04a:	4b0e      	ldr	r3, [pc, #56]	; (800a084 <MX_USART1_UART_Init+0x4c>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800a050:	4b0c      	ldr	r3, [pc, #48]	; (800a084 <MX_USART1_UART_Init+0x4c>)
 800a052:	2200      	movs	r2, #0
 800a054:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800a056:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <MX_USART1_UART_Init+0x4c>)
 800a058:	2200      	movs	r2, #0
 800a05a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800a05c:	4b09      	ldr	r3, [pc, #36]	; (800a084 <MX_USART1_UART_Init+0x4c>)
 800a05e:	220c      	movs	r2, #12
 800a060:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a062:	4b08      	ldr	r3, [pc, #32]	; (800a084 <MX_USART1_UART_Init+0x4c>)
 800a064:	2200      	movs	r2, #0
 800a066:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a068:	4b06      	ldr	r3, [pc, #24]	; (800a084 <MX_USART1_UART_Init+0x4c>)
 800a06a:	2200      	movs	r2, #0
 800a06c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800a06e:	4805      	ldr	r0, [pc, #20]	; (800a084 <MX_USART1_UART_Init+0x4c>)
 800a070:	f7f9 fa54 	bl	800351c <HAL_UART_Init>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800a07a:	f000 f86b 	bl	800a154 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800a07e:	bf00      	nop
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	200048b8 	.word	0x200048b8
 800a088:	40013800 	.word	0x40013800

0800a08c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b088      	sub	sp, #32
 800a090:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a092:	f107 0310 	add.w	r3, r7, #16
 800a096:	2200      	movs	r2, #0
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	605a      	str	r2, [r3, #4]
 800a09c:	609a      	str	r2, [r3, #8]
 800a09e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800a0a0:	4b29      	ldr	r3, [pc, #164]	; (800a148 <MX_GPIO_Init+0xbc>)
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	4a28      	ldr	r2, [pc, #160]	; (800a148 <MX_GPIO_Init+0xbc>)
 800a0a6:	f043 0320 	orr.w	r3, r3, #32
 800a0aa:	6193      	str	r3, [r2, #24]
 800a0ac:	4b26      	ldr	r3, [pc, #152]	; (800a148 <MX_GPIO_Init+0xbc>)
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	f003 0320 	and.w	r3, r3, #32
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800a0b8:	4b23      	ldr	r3, [pc, #140]	; (800a148 <MX_GPIO_Init+0xbc>)
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	4a22      	ldr	r2, [pc, #136]	; (800a148 <MX_GPIO_Init+0xbc>)
 800a0be:	f043 0304 	orr.w	r3, r3, #4
 800a0c2:	6193      	str	r3, [r2, #24]
 800a0c4:	4b20      	ldr	r3, [pc, #128]	; (800a148 <MX_GPIO_Init+0xbc>)
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	60bb      	str	r3, [r7, #8]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a0d0:	4b1d      	ldr	r3, [pc, #116]	; (800a148 <MX_GPIO_Init+0xbc>)
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	4a1c      	ldr	r2, [pc, #112]	; (800a148 <MX_GPIO_Init+0xbc>)
 800a0d6:	f043 0308 	orr.w	r3, r3, #8
 800a0da:	6193      	str	r3, [r2, #24]
 800a0dc:	4b1a      	ldr	r3, [pc, #104]	; (800a148 <MX_GPIO_Init+0xbc>)
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	f003 0308 	and.w	r3, r3, #8
 800a0e4:	607b      	str	r3, [r7, #4]
 800a0e6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2110      	movs	r1, #16
 800a0ec:	4817      	ldr	r0, [pc, #92]	; (800a14c <MX_GPIO_Init+0xc0>)
 800a0ee:	f7f7 fb5a 	bl	80017a6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Joystick_Button_Pin */
	GPIO_InitStruct.Pin = Joystick_Button_Pin;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 800a0fe:	f107 0310 	add.w	r3, r7, #16
 800a102:	4619      	mov	r1, r3
 800a104:	4811      	ldr	r0, [pc, #68]	; (800a14c <MX_GPIO_Init+0xc0>)
 800a106:	f7f7 f9af 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 800a10a:	2310      	movs	r3, #16
 800a10c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a10e:	2301      	movs	r3, #1
 800a110:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a112:	2300      	movs	r3, #0
 800a114:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a116:	2302      	movs	r3, #2
 800a118:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800a11a:	f107 0310 	add.w	r3, r7, #16
 800a11e:	4619      	mov	r1, r3
 800a120:	480a      	ldr	r0, [pc, #40]	; (800a14c <MX_GPIO_Init+0xc0>)
 800a122:	f7f7 f9a1 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pins : MS12_Pin MS3_Pin MS6_Pin MS9_Pin */
	GPIO_InitStruct.Pin = MS12_Pin|MS3_Pin|MS6_Pin|MS9_Pin;
 800a126:	f640 4303 	movw	r3, #3075	; 0xc03
 800a12a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a12c:	2300      	movs	r3, #0
 800a12e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a130:	2300      	movs	r3, #0
 800a132:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a134:	f107 0310 	add.w	r3, r7, #16
 800a138:	4619      	mov	r1, r3
 800a13a:	4805      	ldr	r0, [pc, #20]	; (800a150 <MX_GPIO_Init+0xc4>)
 800a13c:	f7f7 f994 	bl	8001468 <HAL_GPIO_Init>

}
 800a140:	bf00      	nop
 800a142:	3720      	adds	r7, #32
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	40021000 	.word	0x40021000
 800a14c:	40010800 	.word	0x40010800
 800a150:	40010c00 	.word	0x40010c00

0800a154 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800a154:	b480      	push	{r7}
 800a156:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800a158:	bf00      	nop
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bc80      	pop	{r7}
 800a15e:	4770      	bx	lr

0800a160 <string_length>:

static uint8 string_length(sint8 str[])
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	uint8 count;
	/* count the string start from element 0 until the element before the NULL terminator */
	for(count = 0; str[count] != '\0'; ++count);
 800a168:	2300      	movs	r3, #0
 800a16a:	73fb      	strb	r3, [r7, #15]
 800a16c:	e002      	b.n	800a174 <string_length+0x14>
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	3301      	adds	r3, #1
 800a172:	73fb      	strb	r3, [r7, #15]
 800a174:	7bfb      	ldrb	r3, [r7, #15]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	4413      	add	r3, r2
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f6      	bne.n	800a16e <string_length+0xe>
	return count;
 800a180:	7bfb      	ldrb	r3, [r7, #15]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	bc80      	pop	{r7}
 800a18a:	4770      	bx	lr

0800a18c <string_cat>:

static void string_cat(sint8 str1[],sint8 str2[])
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
	uint8 str1_length, count;
	/* This loop is to store the length of str1 in i
	 * It just counts the number of characters in str1
	 * You can also use strlen instead of this.
	 */
	str1_length = string_length(str1);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff ffe2 	bl	800a160 <string_length>
 800a19c:	4603      	mov	r3, r0
 800a19e:	73fb      	strb	r3, [r7, #15]

	/* This loop would concatenate the string str2 at
	 * the end of str1
	 */
	for(count=0; str2[count]!='\0'; ++count, ++str1_length)
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73bb      	strb	r3, [r7, #14]
 800a1a4:	e00d      	b.n	800a1c2 <string_cat+0x36>
	{
		str1[str1_length]=str2[count];
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	441a      	add	r2, r3
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	440b      	add	r3, r1
 800a1b2:	7812      	ldrb	r2, [r2, #0]
 800a1b4:	701a      	strb	r2, [r3, #0]
	for(count=0; str2[count]!='\0'; ++count, ++str1_length)
 800a1b6:	7bbb      	ldrb	r3, [r7, #14]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	73bb      	strb	r3, [r7, #14]
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	73fb      	strb	r3, [r7, #15]
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1eb      	bne.n	800a1a6 <string_cat+0x1a>
	}
	/* \0 represents end of string */
	str1[str1_length]='\0';
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	701a      	strb	r2, [r3, #0]
}
 800a1d8:	bf00      	nop
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <StringCopy>:

static void StringCopy(sint8 str1[], sint8 str2[]){
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
	uint8 count = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]
	while(str2[count] != '\0'){
 800a1ee:	e00a      	b.n	800a206 <StringCopy+0x26>
		str1[count] = str2[count];
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	441a      	add	r2, r3
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
 800a1f8:	6879      	ldr	r1, [r7, #4]
 800a1fa:	440b      	add	r3, r1
 800a1fc:	7812      	ldrb	r2, [r2, #0]
 800a1fe:	701a      	strb	r2, [r3, #0]
		count++;
 800a200:	7bfb      	ldrb	r3, [r7, #15]
 800a202:	3301      	adds	r3, #1
 800a204:	73fb      	strb	r3, [r7, #15]
	while(str2[count] != '\0'){
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	4413      	add	r3, r2
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1ee      	bne.n	800a1f0 <StringCopy+0x10>
	}
	str1[count] = '\0';
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	4413      	add	r3, r2
 800a218:	2200      	movs	r2, #0
 800a21a:	701a      	strb	r2, [r3, #0]
}
 800a21c:	bf00      	nop
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	bc80      	pop	{r7}
 800a224:	4770      	bx	lr

0800a226 <NumberToString>:

static void NumberToString(uint64 num, sint8* str)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b08a      	sub	sp, #40	; 0x28
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a230:	607a      	str	r2, [r7, #4]
	uint8 count, rem, length = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint64 value = num;
 800a238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a23c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	while (value != 0)
 800a240:	e010      	b.n	800a264 <NumberToString+0x3e>
	{
		length++;
 800a242:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a246:	3301      	adds	r3, #1
 800a248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		value /= 10;
 800a24c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a250:	f04f 020a 	mov.w	r2, #10
 800a254:	f04f 0300 	mov.w	r3, #0
 800a258:	f7f5 ff78 	bl	800014c <__aeabi_uldivmod>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	e9c7 2306 	strd	r2, r3, [r7, #24]
	while (value != 0)
 800a264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a268:	4313      	orrs	r3, r2
 800a26a:	d1ea      	bne.n	800a242 <NumberToString+0x1c>
	}
	for (count = 0; count < length; count++)
 800a26c:	2300      	movs	r3, #0
 800a26e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a272:	e027      	b.n	800a2c4 <NumberToString+0x9e>
	{
		rem = num % 10;
 800a274:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a278:	f04f 020a 	mov.w	r2, #10
 800a27c:	f04f 0300 	mov.w	r3, #0
 800a280:	f7f5 ff64 	bl	800014c <__aeabi_uldivmod>
 800a284:	4613      	mov	r3, r2
 800a286:	75fb      	strb	r3, [r7, #23]
		num = num / 10;
 800a288:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a28c:	f04f 020a 	mov.w	r2, #10
 800a290:	f04f 0300 	mov.w	r3, #0
 800a294:	f7f5 ff5a 	bl	800014c <__aeabi_uldivmod>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		str[length - (count + 1)] = rem + '0';
 800a2a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	7dfa      	ldrb	r2, [r7, #23]
 800a2b4:	3230      	adds	r2, #48	; 0x30
 800a2b6:	b2d2      	uxtb	r2, r2
 800a2b8:	701a      	strb	r2, [r3, #0]
	for (count = 0; count < length; count++)
 800a2ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2be:	3301      	adds	r3, #1
 800a2c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a2c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d3d1      	bcc.n	800a274 <NumberToString+0x4e>
	}
	str[length] = '\0';
 800a2d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]
}
 800a2dc:	bf00      	nop
 800a2de:	3728      	adds	r7, #40	; 0x28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <Strings_Is_Equal>:

uint8 Strings_Is_Equal(sint8 Str1[], sint8 Str2[]){
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
	uint8 count = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73fb      	strb	r3, [r7, #15]
	uint8 Str1_length = string_length(Str1);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7ff ff34 	bl	800a160 <string_length>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73bb      	strb	r3, [r7, #14]
	uint8 Str2_length = string_length(Str2);
 800a2fc:	6838      	ldr	r0, [r7, #0]
 800a2fe:	f7ff ff2f 	bl	800a160 <string_length>
 800a302:	4603      	mov	r3, r0
 800a304:	737b      	strb	r3, [r7, #13]
	if(Str1_length == Str2_length){
 800a306:	7bba      	ldrb	r2, [r7, #14]
 800a308:	7b7b      	ldrb	r3, [r7, #13]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d115      	bne.n	800a33a <Strings_Is_Equal+0x56>
		while(count < Str1_length){
 800a30e:	e00e      	b.n	800a32e <Strings_Is_Equal+0x4a>
			if(Str1[count] != Str2[count]){
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	4413      	add	r3, r2
 800a316:	781a      	ldrb	r2, [r3, #0]
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	440b      	add	r3, r1
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d001      	beq.n	800a328 <Strings_Is_Equal+0x44>
				return FALSE;
 800a324:	2300      	movs	r3, #0
 800a326:	e009      	b.n	800a33c <Strings_Is_Equal+0x58>
			}
			count++;
 800a328:	7bfb      	ldrb	r3, [r7, #15]
 800a32a:	3301      	adds	r3, #1
 800a32c:	73fb      	strb	r3, [r7, #15]
		while(count < Str1_length){
 800a32e:	7bfa      	ldrb	r2, [r7, #15]
 800a330:	7bbb      	ldrb	r3, [r7, #14]
 800a332:	429a      	cmp	r2, r3
 800a334:	d3ec      	bcc.n	800a310 <Strings_Is_Equal+0x2c>
		}
		return TRUE;
 800a336:	2301      	movs	r3, #1
 800a338:	e000      	b.n	800a33c <Strings_Is_Equal+0x58>
	}
	else{
		return FALSE;
 800a33a:	2300      	movs	r3, #0
	}
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <String_FindSubstringIndex>:

uint8 String_FindSubstringIndex(sint8* string, sint8* subString, uint8* index)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
	uint8 StringCount = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	75fb      	strb	r3, [r7, #23]
	uint8 SubStringCount = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	75bb      	strb	r3, [r7, #22]

	uint8 StringSize = string_length(string);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7ff ff01 	bl	800a160 <string_length>
 800a35e:	4603      	mov	r3, r0
 800a360:	753b      	strb	r3, [r7, #20]

	uint8 matchFlag = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	757b      	strb	r3, [r7, #21]

	for(; StringCount < StringSize; StringCount++)
 800a366:	e029      	b.n	800a3bc <String_FindSubstringIndex+0x78>
	{
		if(string[StringCount] == subString[SubStringCount])
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	4413      	add	r3, r2
 800a36e:	781a      	ldrb	r2, [r3, #0]
 800a370:	7dbb      	ldrb	r3, [r7, #22]
 800a372:	68b9      	ldr	r1, [r7, #8]
 800a374:	440b      	add	r3, r1
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d115      	bne.n	800a3a8 <String_FindSubstringIndex+0x64>
		{
			if(SubStringCount == 0)
 800a37c:	7dbb      	ldrb	r3, [r7, #22]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d105      	bne.n	800a38e <String_FindSubstringIndex+0x4a>
			{
				*index = StringCount;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	7dfa      	ldrb	r2, [r7, #23]
 800a386:	701a      	strb	r2, [r3, #0]
				matchFlag = 1;
 800a388:	2301      	movs	r3, #1
 800a38a:	757b      	strb	r3, [r7, #21]
 800a38c:	e008      	b.n	800a3a0 <String_FindSubstringIndex+0x5c>
			}
			else if(subString[SubStringCount + 1] == '\0')
 800a38e:	7dbb      	ldrb	r3, [r7, #22]
 800a390:	3301      	adds	r3, #1
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	4413      	add	r3, r2
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d101      	bne.n	800a3a0 <String_FindSubstringIndex+0x5c>
			{
				return 1;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e012      	b.n	800a3c6 <String_FindSubstringIndex+0x82>
			}
			SubStringCount++;
 800a3a0:	7dbb      	ldrb	r3, [r7, #22]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	75bb      	strb	r3, [r7, #22]
 800a3a6:	e006      	b.n	800a3b6 <String_FindSubstringIndex+0x72>
		}
		else if(matchFlag == 1)
 800a3a8:	7d7b      	ldrb	r3, [r7, #21]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d103      	bne.n	800a3b6 <String_FindSubstringIndex+0x72>
		{
			matchFlag = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	757b      	strb	r3, [r7, #21]
			SubStringCount = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	75bb      	strb	r3, [r7, #22]
	for(; StringCount < StringSize; StringCount++)
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	75fb      	strb	r3, [r7, #23]
 800a3bc:	7dfa      	ldrb	r2, [r7, #23]
 800a3be:	7d3b      	ldrb	r3, [r7, #20]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d3d1      	bcc.n	800a368 <String_FindSubstringIndex+0x24>
		}
	}

	return 0;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <String_ReplaceSubstring>:

uint8 String_ReplaceSubstring(sint8* string, sint8* subString, sint8* replacement)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b0c6      	sub	sp, #280	; 0x118
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	f107 030c 	add.w	r3, r7, #12
 800a3d8:	6018      	str	r0, [r3, #0]
 800a3da:	f107 0308 	add.w	r3, r7, #8
 800a3de:	6019      	str	r1, [r3, #0]
 800a3e0:	1d3b      	adds	r3, r7, #4
 800a3e2:	601a      	str	r2, [r3, #0]
	uint8 returnValue = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8 index;
	uint8 SubstringSize = string_length(subString);
 800a3ea:	f107 0308 	add.w	r3, r7, #8
 800a3ee:	6818      	ldr	r0, [r3, #0]
 800a3f0:	f7ff feb6 	bl	800a160 <string_length>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
	uint8 StringCount = 0;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

	sint8 output[255] = "";
 800a400:	f107 0314 	add.w	r3, r7, #20
 800a404:	2200      	movs	r2, #0
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	3304      	adds	r3, #4
 800a40a:	22fb      	movs	r2, #251	; 0xfb
 800a40c:	2100      	movs	r1, #0
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 fec6 	bl	800b1a0 <memset>
	uint8 OutputCount = 0;
 800a414:	2300      	movs	r3, #0
 800a416:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

	if(1 == String_FindSubstringIndex(string, subString, &index))
 800a41a:	f207 1213 	addw	r2, r7, #275	; 0x113
 800a41e:	f107 0108 	add.w	r1, r7, #8
 800a422:	f107 030c 	add.w	r3, r7, #12
 800a426:	6809      	ldr	r1, [r1, #0]
 800a428:	6818      	ldr	r0, [r3, #0]
 800a42a:	f7ff ff8b 	bl	800a344 <String_FindSubstringIndex>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b01      	cmp	r3, #1
 800a432:	f040 8091 	bne.w	800a558 <String_ReplaceSubstring+0x18a>
	{
		for(; StringCount < index; StringCount++)
 800a436:	e010      	b.n	800a45a <String_ReplaceSubstring+0x8c>
		{
			output[StringCount] = string[StringCount];
 800a438:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a43c:	f107 020c 	add.w	r2, r7, #12
 800a440:	6812      	ldr	r2, [r2, #0]
 800a442:	441a      	add	r2, r3
 800a444:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a448:	7811      	ldrb	r1, [r2, #0]
 800a44a:	f107 0214 	add.w	r2, r7, #20
 800a44e:	54d1      	strb	r1, [r2, r3]
		for(; StringCount < index; StringCount++)
 800a450:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a454:	3301      	adds	r3, #1
 800a456:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a45a:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800a45e:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 800a462:	429a      	cmp	r2, r3
 800a464:	d3e8      	bcc.n	800a438 <String_ReplaceSubstring+0x6a>
		}

		OutputCount = index;
 800a466:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800a46a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

		for(; replacement[OutputCount - index] != '\0'; OutputCount++)
 800a46e:	e013      	b.n	800a498 <String_ReplaceSubstring+0xca>
		{
			output[OutputCount] = replacement[OutputCount - index];
 800a470:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800a474:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 800a478:	1a9b      	subs	r3, r3, r2
 800a47a:	461a      	mov	r2, r3
 800a47c:	1d3b      	adds	r3, r7, #4
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	441a      	add	r2, r3
 800a482:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800a486:	7811      	ldrb	r1, [r2, #0]
 800a488:	f107 0214 	add.w	r2, r7, #20
 800a48c:	54d1      	strb	r1, [r2, r3]
		for(; replacement[OutputCount - index] != '\0'; OutputCount++)
 800a48e:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800a492:	3301      	adds	r3, #1
 800a494:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800a498:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800a49c:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 800a4a0:	1a9b      	subs	r3, r3, r2
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	1d3b      	adds	r3, r7, #4
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1df      	bne.n	800a470 <String_ReplaceSubstring+0xa2>
		}

		StringCount = StringCount + SubstringSize;
 800a4b0:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 800a4b4:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

		while(string[StringCount] != '\0')
 800a4be:	e015      	b.n	800a4ec <String_ReplaceSubstring+0x11e>
		{
			output[OutputCount] = string[StringCount];
 800a4c0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a4c4:	f107 020c 	add.w	r2, r7, #12
 800a4c8:	6812      	ldr	r2, [r2, #0]
 800a4ca:	441a      	add	r2, r3
 800a4cc:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800a4d0:	7811      	ldrb	r1, [r2, #0]
 800a4d2:	f107 0214 	add.w	r2, r7, #20
 800a4d6:	54d1      	strb	r1, [r2, r3]
			StringCount++;
 800a4d8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a4dc:	3301      	adds	r3, #1
 800a4de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
			OutputCount++;
 800a4e2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		while(string[StringCount] != '\0')
 800a4ec:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a4f0:	f107 020c 	add.w	r2, r7, #12
 800a4f4:	6812      	ldr	r2, [r2, #0]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1e0      	bne.n	800a4c0 <String_ReplaceSubstring+0xf2>
		}

		output[OutputCount] = '\0';
 800a4fe:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800a502:	f107 0214 	add.w	r2, r7, #20
 800a506:	2100      	movs	r1, #0
 800a508:	54d1      	strb	r1, [r2, r3]
		OutputCount = 0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

		while(output[OutputCount] != '\0')
 800a510:	e010      	b.n	800a534 <String_ReplaceSubstring+0x166>
		{
			string[OutputCount] = output[OutputCount];
 800a512:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 800a516:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800a51a:	f107 010c 	add.w	r1, r7, #12
 800a51e:	6809      	ldr	r1, [r1, #0]
 800a520:	440b      	add	r3, r1
 800a522:	f107 0114 	add.w	r1, r7, #20
 800a526:	5c8a      	ldrb	r2, [r1, r2]
 800a528:	701a      	strb	r2, [r3, #0]
			OutputCount++;
 800a52a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800a52e:	3301      	adds	r3, #1
 800a530:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		while(output[OutputCount] != '\0')
 800a534:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800a538:	f107 0214 	add.w	r2, r7, #20
 800a53c:	5cd3      	ldrb	r3, [r2, r3]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1e7      	bne.n	800a512 <String_ReplaceSubstring+0x144>
		}

		string[OutputCount] = '\0';
 800a542:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800a546:	f107 020c 	add.w	r2, r7, #12
 800a54a:	6812      	ldr	r2, [r2, #0]
 800a54c:	4413      	add	r3, r2
 800a54e:	2200      	movs	r2, #0
 800a550:	701a      	strb	r2, [r3, #0]
		returnValue = 1;
 800a552:	2301      	movs	r3, #1
 800a554:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	}

	return returnValue;
 800a558:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <String_IsStartWith>:

uint8 String_IsStartWith(sint8* string, sint8 Char)
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	460b      	mov	r3, r1
 800a570:	70fb      	strb	r3, [r7, #3]
	if(string[0] == Char)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	78fa      	ldrb	r2, [r7, #3]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d101      	bne.n	800a580 <String_IsStartWith+0x1a>
	{
		return 1;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e000      	b.n	800a582 <String_IsStartWith+0x1c>
	}
	else
	{
		return 0;
 800a580:	2300      	movs	r3, #0
	}
}
 800a582:	4618      	mov	r0, r3
 800a584:	370c      	adds	r7, #12
 800a586:	46bd      	mov	sp, r7
 800a588:	bc80      	pop	{r7}
 800a58a:	4770      	bx	lr

0800a58c <Sring_Trim>:

void Sring_Trim(sint8* string)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b0c4      	sub	sp, #272	; 0x110
 800a590:	af00      	add	r7, sp, #0
 800a592:	1d3b      	adds	r3, r7, #4
 800a594:	6018      	str	r0, [r3, #0]
	uint8 count1 = 0, count2 = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800a59c:	2300      	movs	r3, #0
 800a59e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	sint8 output[255] = "";
 800a5a2:	f107 030c 	add.w	r3, r7, #12
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	22fb      	movs	r2, #251	; 0xfb
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 fdf5 	bl	800b1a0 <memset>
	while(string[count1] != '\0')
 800a5b6:	e01c      	b.n	800a5f2 <Sring_Trim+0x66>
	{
		if(string[count1] != ' ')
 800a5b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800a5bc:	1d3a      	adds	r2, r7, #4
 800a5be:	6812      	ldr	r2, [r2, #0]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b20      	cmp	r3, #32
 800a5c6:	d00f      	beq.n	800a5e8 <Sring_Trim+0x5c>
		{
			output[count2] = string[count1];
 800a5c8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800a5cc:	1d3a      	adds	r2, r7, #4
 800a5ce:	6812      	ldr	r2, [r2, #0]
 800a5d0:	441a      	add	r2, r3
 800a5d2:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800a5d6:	7811      	ldrb	r1, [r2, #0]
 800a5d8:	f107 020c 	add.w	r2, r7, #12
 800a5dc:	54d1      	strb	r1, [r2, r3]
			count2 ++;
 800a5de:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}
		count1 ++;
 800a5e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	while(string[count1] != '\0')
 800a5f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800a5f6:	1d3a      	adds	r2, r7, #4
 800a5f8:	6812      	ldr	r2, [r2, #0]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1da      	bne.n	800a5b8 <Sring_Trim+0x2c>
	}
	output[count2] = '\0';
 800a602:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800a606:	f107 020c 	add.w	r2, r7, #12
 800a60a:	2100      	movs	r1, #0
 800a60c:	54d1      	strb	r1, [r2, r3]
	count2 = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	while(output[count2] != '\0')
 800a614:	e00f      	b.n	800a636 <Sring_Trim+0xaa>
	{
		string[count2] = output[count2];
 800a616:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800a61a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800a61e:	1d39      	adds	r1, r7, #4
 800a620:	6809      	ldr	r1, [r1, #0]
 800a622:	440b      	add	r3, r1
 800a624:	f107 010c 	add.w	r1, r7, #12
 800a628:	5c8a      	ldrb	r2, [r1, r2]
 800a62a:	701a      	strb	r2, [r3, #0]
		count2++;
 800a62c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800a630:	3301      	adds	r3, #1
 800a632:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	while(output[count2] != '\0')
 800a636:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800a63a:	f107 020c 	add.w	r2, r7, #12
 800a63e:	5cd3      	ldrb	r3, [r2, r3]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1e8      	bne.n	800a616 <Sring_Trim+0x8a>
	}
	string[count2] = '\0';
 800a644:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800a648:	1d3a      	adds	r2, r7, #4
 800a64a:	6812      	ldr	r2, [r2, #0]
 800a64c:	4413      	add	r3, r2
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]
}
 800a652:	bf00      	nop
 800a654:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800a662:	f000 fa27 	bl	800aab4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800a666:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a66a:	2201      	movs	r2, #1
 800a66c:	2178      	movs	r1, #120	; 0x78
 800a66e:	485b      	ldr	r0, [pc, #364]	; (800a7dc <SSD1306_Init+0x180>)
 800a670:	f7f7 fad0 	bl	8001c14 <HAL_I2C_IsDeviceReady>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	e0a9      	b.n	800a7d2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800a67e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800a682:	607b      	str	r3, [r7, #4]
	while(p>0)
 800a684:	e002      	b.n	800a68c <SSD1306_Init+0x30>
		p--;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	3b01      	subs	r3, #1
 800a68a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1f9      	bne.n	800a686 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800a692:	22ae      	movs	r2, #174	; 0xae
 800a694:	2100      	movs	r1, #0
 800a696:	2078      	movs	r0, #120	; 0x78
 800a698:	f000 fa68 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800a69c:	2220      	movs	r2, #32
 800a69e:	2100      	movs	r1, #0
 800a6a0:	2078      	movs	r0, #120	; 0x78
 800a6a2:	f000 fa63 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800a6a6:	2210      	movs	r2, #16
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	2078      	movs	r0, #120	; 0x78
 800a6ac:	f000 fa5e 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800a6b0:	22b0      	movs	r2, #176	; 0xb0
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	2078      	movs	r0, #120	; 0x78
 800a6b6:	f000 fa59 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800a6ba:	22c8      	movs	r2, #200	; 0xc8
 800a6bc:	2100      	movs	r1, #0
 800a6be:	2078      	movs	r0, #120	; 0x78
 800a6c0:	f000 fa54 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	2078      	movs	r0, #120	; 0x78
 800a6ca:	f000 fa4f 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800a6ce:	2210      	movs	r2, #16
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	2078      	movs	r0, #120	; 0x78
 800a6d4:	f000 fa4a 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800a6d8:	2240      	movs	r2, #64	; 0x40
 800a6da:	2100      	movs	r1, #0
 800a6dc:	2078      	movs	r0, #120	; 0x78
 800a6de:	f000 fa45 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800a6e2:	2281      	movs	r2, #129	; 0x81
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	2078      	movs	r0, #120	; 0x78
 800a6e8:	f000 fa40 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800a6ec:	22ff      	movs	r2, #255	; 0xff
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	2078      	movs	r0, #120	; 0x78
 800a6f2:	f000 fa3b 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800a6f6:	22a1      	movs	r2, #161	; 0xa1
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	2078      	movs	r0, #120	; 0x78
 800a6fc:	f000 fa36 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800a700:	22a6      	movs	r2, #166	; 0xa6
 800a702:	2100      	movs	r1, #0
 800a704:	2078      	movs	r0, #120	; 0x78
 800a706:	f000 fa31 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800a70a:	22a8      	movs	r2, #168	; 0xa8
 800a70c:	2100      	movs	r1, #0
 800a70e:	2078      	movs	r0, #120	; 0x78
 800a710:	f000 fa2c 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800a714:	223f      	movs	r2, #63	; 0x3f
 800a716:	2100      	movs	r1, #0
 800a718:	2078      	movs	r0, #120	; 0x78
 800a71a:	f000 fa27 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800a71e:	22a4      	movs	r2, #164	; 0xa4
 800a720:	2100      	movs	r1, #0
 800a722:	2078      	movs	r0, #120	; 0x78
 800a724:	f000 fa22 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800a728:	22d3      	movs	r2, #211	; 0xd3
 800a72a:	2100      	movs	r1, #0
 800a72c:	2078      	movs	r0, #120	; 0x78
 800a72e:	f000 fa1d 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800a732:	2200      	movs	r2, #0
 800a734:	2100      	movs	r1, #0
 800a736:	2078      	movs	r0, #120	; 0x78
 800a738:	f000 fa18 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800a73c:	22d5      	movs	r2, #213	; 0xd5
 800a73e:	2100      	movs	r1, #0
 800a740:	2078      	movs	r0, #120	; 0x78
 800a742:	f000 fa13 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800a746:	22f0      	movs	r2, #240	; 0xf0
 800a748:	2100      	movs	r1, #0
 800a74a:	2078      	movs	r0, #120	; 0x78
 800a74c:	f000 fa0e 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800a750:	22d9      	movs	r2, #217	; 0xd9
 800a752:	2100      	movs	r1, #0
 800a754:	2078      	movs	r0, #120	; 0x78
 800a756:	f000 fa09 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800a75a:	2222      	movs	r2, #34	; 0x22
 800a75c:	2100      	movs	r1, #0
 800a75e:	2078      	movs	r0, #120	; 0x78
 800a760:	f000 fa04 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800a764:	22da      	movs	r2, #218	; 0xda
 800a766:	2100      	movs	r1, #0
 800a768:	2078      	movs	r0, #120	; 0x78
 800a76a:	f000 f9ff 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800a76e:	2212      	movs	r2, #18
 800a770:	2100      	movs	r1, #0
 800a772:	2078      	movs	r0, #120	; 0x78
 800a774:	f000 f9fa 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800a778:	22db      	movs	r2, #219	; 0xdb
 800a77a:	2100      	movs	r1, #0
 800a77c:	2078      	movs	r0, #120	; 0x78
 800a77e:	f000 f9f5 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800a782:	2220      	movs	r2, #32
 800a784:	2100      	movs	r1, #0
 800a786:	2078      	movs	r0, #120	; 0x78
 800a788:	f000 f9f0 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800a78c:	228d      	movs	r2, #141	; 0x8d
 800a78e:	2100      	movs	r1, #0
 800a790:	2078      	movs	r0, #120	; 0x78
 800a792:	f000 f9eb 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800a796:	2214      	movs	r2, #20
 800a798:	2100      	movs	r1, #0
 800a79a:	2078      	movs	r0, #120	; 0x78
 800a79c:	f000 f9e6 	bl	800ab6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800a7a0:	22af      	movs	r2, #175	; 0xaf
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	2078      	movs	r0, #120	; 0x78
 800a7a6:	f000 f9e1 	bl	800ab6c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800a7aa:	222e      	movs	r2, #46	; 0x2e
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	2078      	movs	r0, #120	; 0x78
 800a7b0:	f000 f9dc 	bl	800ab6c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	f000 f843 	bl	800a840 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800a7ba:	f000 f813 	bl	800a7e4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800a7be:	4b08      	ldr	r3, [pc, #32]	; (800a7e0 <SSD1306_Init+0x184>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800a7c4:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <SSD1306_Init+0x184>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800a7ca:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <SSD1306_Init+0x184>)
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800a7d0:	2301      	movs	r3, #1
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	200037a0 	.word	0x200037a0
 800a7e0:	200006c0 	.word	0x200006c0

0800a7e4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	71fb      	strb	r3, [r7, #7]
 800a7ee:	e01d      	b.n	800a82c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800a7f0:	79fb      	ldrb	r3, [r7, #7]
 800a7f2:	3b50      	subs	r3, #80	; 0x50
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	2078      	movs	r0, #120	; 0x78
 800a7fc:	f000 f9b6 	bl	800ab6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800a800:	2200      	movs	r2, #0
 800a802:	2100      	movs	r1, #0
 800a804:	2078      	movs	r0, #120	; 0x78
 800a806:	f000 f9b1 	bl	800ab6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800a80a:	2210      	movs	r2, #16
 800a80c:	2100      	movs	r1, #0
 800a80e:	2078      	movs	r0, #120	; 0x78
 800a810:	f000 f9ac 	bl	800ab6c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800a814:	79fb      	ldrb	r3, [r7, #7]
 800a816:	01db      	lsls	r3, r3, #7
 800a818:	4a08      	ldr	r2, [pc, #32]	; (800a83c <SSD1306_UpdateScreen+0x58>)
 800a81a:	441a      	add	r2, r3
 800a81c:	2380      	movs	r3, #128	; 0x80
 800a81e:	2140      	movs	r1, #64	; 0x40
 800a820:	2078      	movs	r0, #120	; 0x78
 800a822:	f000 f95b 	bl	800aadc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	3301      	adds	r3, #1
 800a82a:	71fb      	strb	r3, [r7, #7]
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	2b07      	cmp	r3, #7
 800a830:	d9de      	bls.n	800a7f0 <SSD1306_UpdateScreen+0xc>
	}
}
 800a832:	bf00      	nop
 800a834:	bf00      	nop
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	200002c0 	.word	0x200002c0

0800a840 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800a84a:	79fb      	ldrb	r3, [r7, #7]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <SSD1306_Fill+0x14>
 800a850:	2300      	movs	r3, #0
 800a852:	e000      	b.n	800a856 <SSD1306_Fill+0x16>
 800a854:	23ff      	movs	r3, #255	; 0xff
 800a856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a85a:	4619      	mov	r1, r3
 800a85c:	4803      	ldr	r0, [pc, #12]	; (800a86c <SSD1306_Fill+0x2c>)
 800a85e:	f000 fc9f 	bl	800b1a0 <memset>
}
 800a862:	bf00      	nop
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	200002c0 	.word	0x200002c0

0800a870 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	80fb      	strh	r3, [r7, #6]
 800a87a:	460b      	mov	r3, r1
 800a87c:	80bb      	strh	r3, [r7, #4]
 800a87e:	4613      	mov	r3, r2
 800a880:	70fb      	strb	r3, [r7, #3]
	if (
 800a882:	88fb      	ldrh	r3, [r7, #6]
 800a884:	2b7f      	cmp	r3, #127	; 0x7f
 800a886:	d848      	bhi.n	800a91a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800a888:	88bb      	ldrh	r3, [r7, #4]
 800a88a:	2b3f      	cmp	r3, #63	; 0x3f
 800a88c:	d845      	bhi.n	800a91a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800a88e:	4b25      	ldr	r3, [pc, #148]	; (800a924 <SSD1306_DrawPixel+0xb4>)
 800a890:	791b      	ldrb	r3, [r3, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d006      	beq.n	800a8a4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800a896:	78fb      	ldrb	r3, [r7, #3]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	bf0c      	ite	eq
 800a89c:	2301      	moveq	r3, #1
 800a89e:	2300      	movne	r3, #0
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800a8a4:	78fb      	ldrb	r3, [r7, #3]
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d11a      	bne.n	800a8e0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800a8aa:	88fa      	ldrh	r2, [r7, #6]
 800a8ac:	88bb      	ldrh	r3, [r7, #4]
 800a8ae:	08db      	lsrs	r3, r3, #3
 800a8b0:	b298      	uxth	r0, r3
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	01db      	lsls	r3, r3, #7
 800a8b6:	4413      	add	r3, r2
 800a8b8:	4a1b      	ldr	r2, [pc, #108]	; (800a928 <SSD1306_DrawPixel+0xb8>)
 800a8ba:	5cd3      	ldrb	r3, [r2, r3]
 800a8bc:	b25a      	sxtb	r2, r3
 800a8be:	88bb      	ldrh	r3, [r7, #4]
 800a8c0:	f003 0307 	and.w	r3, r3, #7
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ca:	b25b      	sxtb	r3, r3
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	b259      	sxtb	r1, r3
 800a8d0:	88fa      	ldrh	r2, [r7, #6]
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	01db      	lsls	r3, r3, #7
 800a8d6:	4413      	add	r3, r2
 800a8d8:	b2c9      	uxtb	r1, r1
 800a8da:	4a13      	ldr	r2, [pc, #76]	; (800a928 <SSD1306_DrawPixel+0xb8>)
 800a8dc:	54d1      	strb	r1, [r2, r3]
 800a8de:	e01d      	b.n	800a91c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800a8e0:	88fa      	ldrh	r2, [r7, #6]
 800a8e2:	88bb      	ldrh	r3, [r7, #4]
 800a8e4:	08db      	lsrs	r3, r3, #3
 800a8e6:	b298      	uxth	r0, r3
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	01db      	lsls	r3, r3, #7
 800a8ec:	4413      	add	r3, r2
 800a8ee:	4a0e      	ldr	r2, [pc, #56]	; (800a928 <SSD1306_DrawPixel+0xb8>)
 800a8f0:	5cd3      	ldrb	r3, [r2, r3]
 800a8f2:	b25a      	sxtb	r2, r3
 800a8f4:	88bb      	ldrh	r3, [r7, #4]
 800a8f6:	f003 0307 	and.w	r3, r3, #7
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a900:	b25b      	sxtb	r3, r3
 800a902:	43db      	mvns	r3, r3
 800a904:	b25b      	sxtb	r3, r3
 800a906:	4013      	ands	r3, r2
 800a908:	b259      	sxtb	r1, r3
 800a90a:	88fa      	ldrh	r2, [r7, #6]
 800a90c:	4603      	mov	r3, r0
 800a90e:	01db      	lsls	r3, r3, #7
 800a910:	4413      	add	r3, r2
 800a912:	b2c9      	uxtb	r1, r1
 800a914:	4a04      	ldr	r2, [pc, #16]	; (800a928 <SSD1306_DrawPixel+0xb8>)
 800a916:	54d1      	strb	r1, [r2, r3]
 800a918:	e000      	b.n	800a91c <SSD1306_DrawPixel+0xac>
		return;
 800a91a:	bf00      	nop
	}
}
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	bc80      	pop	{r7}
 800a922:	4770      	bx	lr
 800a924:	200006c0 	.word	0x200006c0
 800a928:	200002c0 	.word	0x200002c0

0800a92c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	460a      	mov	r2, r1
 800a936:	80fb      	strh	r3, [r7, #6]
 800a938:	4613      	mov	r3, r2
 800a93a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800a93c:	4a05      	ldr	r2, [pc, #20]	; (800a954 <SSD1306_GotoXY+0x28>)
 800a93e:	88fb      	ldrh	r3, [r7, #6]
 800a940:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800a942:	4a04      	ldr	r2, [pc, #16]	; (800a954 <SSD1306_GotoXY+0x28>)
 800a944:	88bb      	ldrh	r3, [r7, #4]
 800a946:	8053      	strh	r3, [r2, #2]
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bc80      	pop	{r7}
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	200006c0 	.word	0x200006c0

0800a958 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	6039      	str	r1, [r7, #0]
 800a962:	71fb      	strb	r3, [r7, #7]
 800a964:	4613      	mov	r3, r2
 800a966:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800a968:	4b3a      	ldr	r3, [pc, #232]	; (800aa54 <SSD1306_Putc+0xfc>)
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	461a      	mov	r2, r3
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	4413      	add	r3, r2
	if (
 800a974:	2b7f      	cmp	r3, #127	; 0x7f
 800a976:	dc07      	bgt.n	800a988 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800a978:	4b36      	ldr	r3, [pc, #216]	; (800aa54 <SSD1306_Putc+0xfc>)
 800a97a:	885b      	ldrh	r3, [r3, #2]
 800a97c:	461a      	mov	r2, r3
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	785b      	ldrb	r3, [r3, #1]
 800a982:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800a984:	2b3f      	cmp	r3, #63	; 0x3f
 800a986:	dd01      	ble.n	800a98c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	e05e      	b.n	800aa4a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800a98c:	2300      	movs	r3, #0
 800a98e:	617b      	str	r3, [r7, #20]
 800a990:	e04b      	b.n	800aa2a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	685a      	ldr	r2, [r3, #4]
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	3b20      	subs	r3, #32
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	7849      	ldrb	r1, [r1, #1]
 800a99e:	fb01 f303 	mul.w	r3, r1, r3
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	440b      	add	r3, r1
 800a9a8:	005b      	lsls	r3, r3, #1
 800a9aa:	4413      	add	r3, r2
 800a9ac:	881b      	ldrh	r3, [r3, #0]
 800a9ae:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	613b      	str	r3, [r7, #16]
 800a9b4:	e030      	b.n	800aa18 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a9be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d010      	beq.n	800a9e8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800a9c6:	4b23      	ldr	r3, [pc, #140]	; (800aa54 <SSD1306_Putc+0xfc>)
 800a9c8:	881a      	ldrh	r2, [r3, #0]
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	4413      	add	r3, r2
 800a9d0:	b298      	uxth	r0, r3
 800a9d2:	4b20      	ldr	r3, [pc, #128]	; (800aa54 <SSD1306_Putc+0xfc>)
 800a9d4:	885a      	ldrh	r2, [r3, #2]
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	4413      	add	r3, r2
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	79ba      	ldrb	r2, [r7, #6]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	f7ff ff45 	bl	800a870 <SSD1306_DrawPixel>
 800a9e6:	e014      	b.n	800aa12 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800a9e8:	4b1a      	ldr	r3, [pc, #104]	; (800aa54 <SSD1306_Putc+0xfc>)
 800a9ea:	881a      	ldrh	r2, [r3, #0]
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	4413      	add	r3, r2
 800a9f2:	b298      	uxth	r0, r3
 800a9f4:	4b17      	ldr	r3, [pc, #92]	; (800aa54 <SSD1306_Putc+0xfc>)
 800a9f6:	885a      	ldrh	r2, [r3, #2]
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	4413      	add	r3, r2
 800a9fe:	b299      	uxth	r1, r3
 800aa00:	79bb      	ldrb	r3, [r7, #6]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	bf0c      	ite	eq
 800aa06:	2301      	moveq	r3, #1
 800aa08:	2300      	movne	r3, #0
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	f7ff ff2f 	bl	800a870 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	3301      	adds	r3, #1
 800aa16:	613b      	str	r3, [r7, #16]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d3c8      	bcc.n	800a9b6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	3301      	adds	r3, #1
 800aa28:	617b      	str	r3, [r7, #20]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	785b      	ldrb	r3, [r3, #1]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d3ad      	bcc.n	800a992 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800aa36:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <SSD1306_Putc+0xfc>)
 800aa38:	881a      	ldrh	r2, [r3, #0]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	4413      	add	r3, r2
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	4b03      	ldr	r3, [pc, #12]	; (800aa54 <SSD1306_Putc+0xfc>)
 800aa46:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800aa48:	79fb      	ldrb	r3, [r7, #7]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	200006c0 	.word	0x200006c0

0800aa58 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	4613      	mov	r3, r2
 800aa64:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800aa66:	e012      	b.n	800aa8e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	79fa      	ldrb	r2, [r7, #7]
 800aa6e:	68b9      	ldr	r1, [r7, #8]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff ff71 	bl	800a958 <SSD1306_Putc>
 800aa76:	4603      	mov	r3, r0
 800aa78:	461a      	mov	r2, r3
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d002      	beq.n	800aa88 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	e008      	b.n	800aa9a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e8      	bne.n	800aa68 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	781b      	ldrb	r3, [r3, #0]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	f7ff feca 	bl	800a840 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800aaac:	f7ff fe9a 	bl	800a7e4 <SSD1306_UpdateScreen>
}
 800aab0:	bf00      	nop
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800aaba:	4b07      	ldr	r3, [pc, #28]	; (800aad8 <ssd1306_I2C_Init+0x24>)
 800aabc:	607b      	str	r3, [r7, #4]
	while(p>0)
 800aabe:	e002      	b.n	800aac6 <ssd1306_I2C_Init+0x12>
		p--;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	607b      	str	r3, [r7, #4]
	while(p>0)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1f9      	bne.n	800aac0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800aacc:	bf00      	nop
 800aace:	bf00      	nop
 800aad0:	370c      	adds	r7, #12
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bc80      	pop	{r7}
 800aad6:	4770      	bx	lr
 800aad8:	0003d090 	.word	0x0003d090

0800aadc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800aadc:	b590      	push	{r4, r7, lr}
 800aade:	b0c7      	sub	sp, #284	; 0x11c
 800aae0:	af02      	add	r7, sp, #8
 800aae2:	4604      	mov	r4, r0
 800aae4:	4608      	mov	r0, r1
 800aae6:	4639      	mov	r1, r7
 800aae8:	600a      	str	r2, [r1, #0]
 800aaea:	4619      	mov	r1, r3
 800aaec:	1dfb      	adds	r3, r7, #7
 800aaee:	4622      	mov	r2, r4
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	1dbb      	adds	r3, r7, #6
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	701a      	strb	r2, [r3, #0]
 800aaf8:	1d3b      	adds	r3, r7, #4
 800aafa:	460a      	mov	r2, r1
 800aafc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800aafe:	f107 030c 	add.w	r3, r7, #12
 800ab02:	1dba      	adds	r2, r7, #6
 800ab04:	7812      	ldrb	r2, [r2, #0]
 800ab06:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800ab0e:	e010      	b.n	800ab32 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800ab10:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ab14:	463a      	mov	r2, r7
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	441a      	add	r2, r3
 800ab1a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ab1e:	3301      	adds	r3, #1
 800ab20:	7811      	ldrb	r1, [r2, #0]
 800ab22:	f107 020c 	add.w	r2, r7, #12
 800ab26:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800ab28:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800ab32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	1d3a      	adds	r2, r7, #4
 800ab3a:	8812      	ldrh	r2, [r2, #0]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d8e7      	bhi.n	800ab10 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800ab40:	1dfb      	adds	r3, r7, #7
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	b299      	uxth	r1, r3
 800ab46:	1d3b      	adds	r3, r7, #4
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	f107 020c 	add.w	r2, r7, #12
 800ab52:	200a      	movs	r0, #10
 800ab54:	9000      	str	r0, [sp, #0]
 800ab56:	4804      	ldr	r0, [pc, #16]	; (800ab68 <ssd1306_I2C_WriteMulti+0x8c>)
 800ab58:	f7f6 ff4e 	bl	80019f8 <HAL_I2C_Master_Transmit>
}
 800ab5c:	bf00      	nop
 800ab5e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd90      	pop	{r4, r7, pc}
 800ab66:	bf00      	nop
 800ab68:	200037a0 	.word	0x200037a0

0800ab6c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b086      	sub	sp, #24
 800ab70:	af02      	add	r7, sp, #8
 800ab72:	4603      	mov	r3, r0
 800ab74:	71fb      	strb	r3, [r7, #7]
 800ab76:	460b      	mov	r3, r1
 800ab78:	71bb      	strb	r3, [r7, #6]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800ab7e:	79bb      	ldrb	r3, [r7, #6]
 800ab80:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800ab82:	797b      	ldrb	r3, [r7, #5]
 800ab84:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	b299      	uxth	r1, r3
 800ab8a:	f107 020c 	add.w	r2, r7, #12
 800ab8e:	230a      	movs	r3, #10
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	2302      	movs	r3, #2
 800ab94:	4803      	ldr	r0, [pc, #12]	; (800aba4 <ssd1306_I2C_Write+0x38>)
 800ab96:	f7f6 ff2f 	bl	80019f8 <HAL_I2C_Master_Transmit>
}
 800ab9a:	bf00      	nop
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	200037a0 	.word	0x200037a0

0800aba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800abae:	4b15      	ldr	r3, [pc, #84]	; (800ac04 <HAL_MspInit+0x5c>)
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	4a14      	ldr	r2, [pc, #80]	; (800ac04 <HAL_MspInit+0x5c>)
 800abb4:	f043 0301 	orr.w	r3, r3, #1
 800abb8:	6193      	str	r3, [r2, #24]
 800abba:	4b12      	ldr	r3, [pc, #72]	; (800ac04 <HAL_MspInit+0x5c>)
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	60bb      	str	r3, [r7, #8]
 800abc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800abc6:	4b0f      	ldr	r3, [pc, #60]	; (800ac04 <HAL_MspInit+0x5c>)
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	4a0e      	ldr	r2, [pc, #56]	; (800ac04 <HAL_MspInit+0x5c>)
 800abcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abd0:	61d3      	str	r3, [r2, #28]
 800abd2:	4b0c      	ldr	r3, [pc, #48]	; (800ac04 <HAL_MspInit+0x5c>)
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abda:	607b      	str	r3, [r7, #4]
 800abdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800abde:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <HAL_MspInit+0x60>)
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800abea:	60fb      	str	r3, [r7, #12]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	4a04      	ldr	r2, [pc, #16]	; (800ac08 <HAL_MspInit+0x60>)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800abfa:	bf00      	nop
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bc80      	pop	{r7}
 800ac02:	4770      	bx	lr
 800ac04:	40021000 	.word	0x40021000
 800ac08:	40010000 	.word	0x40010000

0800ac0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac14:	f107 0310 	add.w	r3, r7, #16
 800ac18:	2200      	movs	r2, #0
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	605a      	str	r2, [r3, #4]
 800ac1e:	609a      	str	r2, [r3, #8]
 800ac20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a28      	ldr	r2, [pc, #160]	; (800acc8 <HAL_ADC_MspInit+0xbc>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d149      	bne.n	800acc0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ac2c:	4b27      	ldr	r3, [pc, #156]	; (800accc <HAL_ADC_MspInit+0xc0>)
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	4a26      	ldr	r2, [pc, #152]	; (800accc <HAL_ADC_MspInit+0xc0>)
 800ac32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac36:	6193      	str	r3, [r2, #24]
 800ac38:	4b24      	ldr	r3, [pc, #144]	; (800accc <HAL_ADC_MspInit+0xc0>)
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac40:	60fb      	str	r3, [r7, #12]
 800ac42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac44:	4b21      	ldr	r3, [pc, #132]	; (800accc <HAL_ADC_MspInit+0xc0>)
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	4a20      	ldr	r2, [pc, #128]	; (800accc <HAL_ADC_MspInit+0xc0>)
 800ac4a:	f043 0304 	orr.w	r3, r3, #4
 800ac4e:	6193      	str	r3, [r2, #24]
 800ac50:	4b1e      	ldr	r3, [pc, #120]	; (800accc <HAL_ADC_MspInit+0xc0>)
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	60bb      	str	r3, [r7, #8]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Joystick_xValue_Pin|Joystick_yValue_Pin;
 800ac5c:	2306      	movs	r3, #6
 800ac5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ac60:	2303      	movs	r3, #3
 800ac62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac64:	f107 0310 	add.w	r3, r7, #16
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4819      	ldr	r0, [pc, #100]	; (800acd0 <HAL_ADC_MspInit+0xc4>)
 800ac6c:	f7f6 fbfc 	bl	8001468 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800ac70:	4b18      	ldr	r3, [pc, #96]	; (800acd4 <HAL_ADC_MspInit+0xc8>)
 800ac72:	4a19      	ldr	r2, [pc, #100]	; (800acd8 <HAL_ADC_MspInit+0xcc>)
 800ac74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac76:	4b17      	ldr	r3, [pc, #92]	; (800acd4 <HAL_ADC_MspInit+0xc8>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac7c:	4b15      	ldr	r3, [pc, #84]	; (800acd4 <HAL_ADC_MspInit+0xc8>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ac82:	4b14      	ldr	r3, [pc, #80]	; (800acd4 <HAL_ADC_MspInit+0xc8>)
 800ac84:	2280      	movs	r2, #128	; 0x80
 800ac86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ac88:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <HAL_ADC_MspInit+0xc8>)
 800ac8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ac90:	4b10      	ldr	r3, [pc, #64]	; (800acd4 <HAL_ADC_MspInit+0xc8>)
 800ac92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800ac98:	4b0e      	ldr	r3, [pc, #56]	; (800acd4 <HAL_ADC_MspInit+0xc8>)
 800ac9a:	2220      	movs	r2, #32
 800ac9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800ac9e:	4b0d      	ldr	r3, [pc, #52]	; (800acd4 <HAL_ADC_MspInit+0xc8>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800aca4:	480b      	ldr	r0, [pc, #44]	; (800acd4 <HAL_ADC_MspInit+0xc8>)
 800aca6:	f7f6 fa09 	bl	80010bc <HAL_DMA_Init>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d001      	beq.n	800acb4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800acb0:	f7ff fa50 	bl	800a154 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a07      	ldr	r2, [pc, #28]	; (800acd4 <HAL_ADC_MspInit+0xc8>)
 800acb8:	621a      	str	r2, [r3, #32]
 800acba:	4a06      	ldr	r2, [pc, #24]	; (800acd4 <HAL_ADC_MspInit+0xc8>)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800acc0:	bf00      	nop
 800acc2:	3720      	adds	r7, #32
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	40012400 	.word	0x40012400
 800accc:	40021000 	.word	0x40021000
 800acd0:	40010800 	.word	0x40010800
 800acd4:	200048f8 	.word	0x200048f8
 800acd8:	40020008 	.word	0x40020008

0800acdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b088      	sub	sp, #32
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ace4:	f107 0310 	add.w	r3, r7, #16
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
 800acec:	605a      	str	r2, [r3, #4]
 800acee:	609a      	str	r2, [r3, #8]
 800acf0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a15      	ldr	r2, [pc, #84]	; (800ad4c <HAL_I2C_MspInit+0x70>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d123      	bne.n	800ad44 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800acfc:	4b14      	ldr	r3, [pc, #80]	; (800ad50 <HAL_I2C_MspInit+0x74>)
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	4a13      	ldr	r2, [pc, #76]	; (800ad50 <HAL_I2C_MspInit+0x74>)
 800ad02:	f043 0308 	orr.w	r3, r3, #8
 800ad06:	6193      	str	r3, [r2, #24]
 800ad08:	4b11      	ldr	r3, [pc, #68]	; (800ad50 <HAL_I2C_MspInit+0x74>)
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	f003 0308 	and.w	r3, r3, #8
 800ad10:	60fb      	str	r3, [r7, #12]
 800ad12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800ad14:	23c0      	movs	r3, #192	; 0xc0
 800ad16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ad18:	2312      	movs	r3, #18
 800ad1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad20:	f107 0310 	add.w	r3, r7, #16
 800ad24:	4619      	mov	r1, r3
 800ad26:	480b      	ldr	r0, [pc, #44]	; (800ad54 <HAL_I2C_MspInit+0x78>)
 800ad28:	f7f6 fb9e 	bl	8001468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ad2c:	4b08      	ldr	r3, [pc, #32]	; (800ad50 <HAL_I2C_MspInit+0x74>)
 800ad2e:	69db      	ldr	r3, [r3, #28]
 800ad30:	4a07      	ldr	r2, [pc, #28]	; (800ad50 <HAL_I2C_MspInit+0x74>)
 800ad32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad36:	61d3      	str	r3, [r2, #28]
 800ad38:	4b05      	ldr	r3, [pc, #20]	; (800ad50 <HAL_I2C_MspInit+0x74>)
 800ad3a:	69db      	ldr	r3, [r3, #28]
 800ad3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad40:	60bb      	str	r3, [r7, #8]
 800ad42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800ad44:	bf00      	nop
 800ad46:	3720      	adds	r7, #32
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	40005400 	.word	0x40005400
 800ad50:	40021000 	.word	0x40021000
 800ad54:	40010c00 	.word	0x40010c00

0800ad58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad60:	f107 0310 	add.w	r3, r7, #16
 800ad64:	2200      	movs	r2, #0
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	605a      	str	r2, [r3, #4]
 800ad6a:	609a      	str	r2, [r3, #8]
 800ad6c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a1b      	ldr	r2, [pc, #108]	; (800ade0 <HAL_SPI_MspInit+0x88>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d12f      	bne.n	800add8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ad78:	4b1a      	ldr	r3, [pc, #104]	; (800ade4 <HAL_SPI_MspInit+0x8c>)
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	4a19      	ldr	r2, [pc, #100]	; (800ade4 <HAL_SPI_MspInit+0x8c>)
 800ad7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ad82:	6193      	str	r3, [r2, #24]
 800ad84:	4b17      	ldr	r3, [pc, #92]	; (800ade4 <HAL_SPI_MspInit+0x8c>)
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad8c:	60fb      	str	r3, [r7, #12]
 800ad8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad90:	4b14      	ldr	r3, [pc, #80]	; (800ade4 <HAL_SPI_MspInit+0x8c>)
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	4a13      	ldr	r2, [pc, #76]	; (800ade4 <HAL_SPI_MspInit+0x8c>)
 800ad96:	f043 0304 	orr.w	r3, r3, #4
 800ad9a:	6193      	str	r3, [r2, #24]
 800ad9c:	4b11      	ldr	r3, [pc, #68]	; (800ade4 <HAL_SPI_MspInit+0x8c>)
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	f003 0304 	and.w	r3, r3, #4
 800ada4:	60bb      	str	r3, [r7, #8]
 800ada6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_CLK_Pin|SD_MOSI_Pin;
 800ada8:	23a0      	movs	r3, #160	; 0xa0
 800adaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adac:	2302      	movs	r3, #2
 800adae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800adb0:	2303      	movs	r3, #3
 800adb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adb4:	f107 0310 	add.w	r3, r7, #16
 800adb8:	4619      	mov	r1, r3
 800adba:	480b      	ldr	r0, [pc, #44]	; (800ade8 <HAL_SPI_MspInit+0x90>)
 800adbc:	f7f6 fb54 	bl	8001468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin;
 800adc0:	2340      	movs	r3, #64	; 0x40
 800adc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800adc4:	2300      	movs	r3, #0
 800adc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adc8:	2300      	movs	r3, #0
 800adca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 800adcc:	f107 0310 	add.w	r3, r7, #16
 800add0:	4619      	mov	r1, r3
 800add2:	4805      	ldr	r0, [pc, #20]	; (800ade8 <HAL_SPI_MspInit+0x90>)
 800add4:	f7f6 fb48 	bl	8001468 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800add8:	bf00      	nop
 800adda:	3720      	adds	r7, #32
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	40013000 	.word	0x40013000
 800ade4:	40021000 	.word	0x40021000
 800ade8:	40010800 	.word	0x40010800

0800adec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adf4:	f107 0310 	add.w	r3, r7, #16
 800adf8:	2200      	movs	r2, #0
 800adfa:	601a      	str	r2, [r3, #0]
 800adfc:	605a      	str	r2, [r3, #4]
 800adfe:	609a      	str	r2, [r3, #8]
 800ae00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a34      	ldr	r2, [pc, #208]	; (800aed8 <HAL_UART_MspInit+0xec>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d160      	bne.n	800aece <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ae0c:	4b33      	ldr	r3, [pc, #204]	; (800aedc <HAL_UART_MspInit+0xf0>)
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	4a32      	ldr	r2, [pc, #200]	; (800aedc <HAL_UART_MspInit+0xf0>)
 800ae12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae16:	6193      	str	r3, [r2, #24]
 800ae18:	4b30      	ldr	r3, [pc, #192]	; (800aedc <HAL_UART_MspInit+0xf0>)
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae24:	4b2d      	ldr	r3, [pc, #180]	; (800aedc <HAL_UART_MspInit+0xf0>)
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	4a2c      	ldr	r2, [pc, #176]	; (800aedc <HAL_UART_MspInit+0xf0>)
 800ae2a:	f043 0304 	orr.w	r3, r3, #4
 800ae2e:	6193      	str	r3, [r2, #24]
 800ae30:	4b2a      	ldr	r3, [pc, #168]	; (800aedc <HAL_UART_MspInit+0xf0>)
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	60bb      	str	r3, [r7, #8]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ae3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae42:	2302      	movs	r3, #2
 800ae44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ae46:	2303      	movs	r3, #3
 800ae48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae4a:	f107 0310 	add.w	r3, r7, #16
 800ae4e:	4619      	mov	r1, r3
 800ae50:	4823      	ldr	r0, [pc, #140]	; (800aee0 <HAL_UART_MspInit+0xf4>)
 800ae52:	f7f6 fb09 	bl	8001468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ae56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae60:	2300      	movs	r3, #0
 800ae62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae64:	f107 0310 	add.w	r3, r7, #16
 800ae68:	4619      	mov	r1, r3
 800ae6a:	481d      	ldr	r0, [pc, #116]	; (800aee0 <HAL_UART_MspInit+0xf4>)
 800ae6c:	f7f6 fafc 	bl	8001468 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800ae70:	4b1c      	ldr	r3, [pc, #112]	; (800aee4 <HAL_UART_MspInit+0xf8>)
 800ae72:	4a1d      	ldr	r2, [pc, #116]	; (800aee8 <HAL_UART_MspInit+0xfc>)
 800ae74:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae76:	4b1b      	ldr	r3, [pc, #108]	; (800aee4 <HAL_UART_MspInit+0xf8>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae7c:	4b19      	ldr	r3, [pc, #100]	; (800aee4 <HAL_UART_MspInit+0xf8>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ae82:	4b18      	ldr	r3, [pc, #96]	; (800aee4 <HAL_UART_MspInit+0xf8>)
 800ae84:	2280      	movs	r2, #128	; 0x80
 800ae86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae88:	4b16      	ldr	r3, [pc, #88]	; (800aee4 <HAL_UART_MspInit+0xf8>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae8e:	4b15      	ldr	r3, [pc, #84]	; (800aee4 <HAL_UART_MspInit+0xf8>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800ae94:	4b13      	ldr	r3, [pc, #76]	; (800aee4 <HAL_UART_MspInit+0xf8>)
 800ae96:	2220      	movs	r2, #32
 800ae98:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ae9a:	4b12      	ldr	r3, [pc, #72]	; (800aee4 <HAL_UART_MspInit+0xf8>)
 800ae9c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aea0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800aea2:	4810      	ldr	r0, [pc, #64]	; (800aee4 <HAL_UART_MspInit+0xf8>)
 800aea4:	f7f6 f90a 	bl	80010bc <HAL_DMA_Init>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d001      	beq.n	800aeb2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800aeae:	f7ff f951 	bl	800a154 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a0b      	ldr	r2, [pc, #44]	; (800aee4 <HAL_UART_MspInit+0xf8>)
 800aeb6:	635a      	str	r2, [r3, #52]	; 0x34
 800aeb8:	4a0a      	ldr	r2, [pc, #40]	; (800aee4 <HAL_UART_MspInit+0xf8>)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800aebe:	2200      	movs	r2, #0
 800aec0:	2100      	movs	r1, #0
 800aec2:	2025      	movs	r0, #37	; 0x25
 800aec4:	f7f6 f8c3 	bl	800104e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800aec8:	2025      	movs	r0, #37	; 0x25
 800aeca:	f7f6 f8dc 	bl	8001086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800aece:	bf00      	nop
 800aed0:	3720      	adds	r7, #32
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	40013800 	.word	0x40013800
 800aedc:	40021000 	.word	0x40021000
 800aee0:	40010800 	.word	0x40010800
 800aee4:	20004870 	.word	0x20004870
 800aee8:	40020058 	.word	0x40020058

0800aeec <SDTimer_Handler>:
/* USER CODE BEGIN EV */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800aeec:	b480      	push	{r7}
 800aeee:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800aef0:	4b0d      	ldr	r3, [pc, #52]	; (800af28 <SDTimer_Handler+0x3c>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d006      	beq.n	800af08 <SDTimer_Handler+0x1c>
    Timer1--;
 800aefa:	4b0b      	ldr	r3, [pc, #44]	; (800af28 <SDTimer_Handler+0x3c>)
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	3b01      	subs	r3, #1
 800af02:	b2da      	uxtb	r2, r3
 800af04:	4b08      	ldr	r3, [pc, #32]	; (800af28 <SDTimer_Handler+0x3c>)
 800af06:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800af08:	4b08      	ldr	r3, [pc, #32]	; (800af2c <SDTimer_Handler+0x40>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d006      	beq.n	800af20 <SDTimer_Handler+0x34>
    Timer2--;
 800af12:	4b06      	ldr	r3, [pc, #24]	; (800af2c <SDTimer_Handler+0x40>)
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	b2db      	uxtb	r3, r3
 800af18:	3b01      	subs	r3, #1
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	4b03      	ldr	r3, [pc, #12]	; (800af2c <SDTimer_Handler+0x40>)
 800af1e:	701a      	strb	r2, [r3, #0]
}
 800af20:	bf00      	nop
 800af22:	46bd      	mov	sp, r7
 800af24:	bc80      	pop	{r7}
 800af26:	4770      	bx	lr
 800af28:	200049be 	.word	0x200049be
 800af2c:	200049bd 	.word	0x200049bd

0800af30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800af30:	b480      	push	{r7}
 800af32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800af34:	bf00      	nop
 800af36:	46bd      	mov	sp, r7
 800af38:	bc80      	pop	{r7}
 800af3a:	4770      	bx	lr

0800af3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800af40:	e7fe      	b.n	800af40 <HardFault_Handler+0x4>

0800af42 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af42:	b480      	push	{r7}
 800af44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800af46:	e7fe      	b.n	800af46 <MemManage_Handler+0x4>

0800af48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800af4c:	e7fe      	b.n	800af4c <BusFault_Handler+0x4>

0800af4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af4e:	b480      	push	{r7}
 800af50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800af52:	e7fe      	b.n	800af52 <UsageFault_Handler+0x4>

0800af54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800af54:	b480      	push	{r7}
 800af56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800af58:	bf00      	nop
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bc80      	pop	{r7}
 800af5e:	4770      	bx	lr

0800af60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af60:	b480      	push	{r7}
 800af62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800af64:	bf00      	nop
 800af66:	46bd      	mov	sp, r7
 800af68:	bc80      	pop	{r7}
 800af6a:	4770      	bx	lr

0800af6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800af6c:	b480      	push	{r7}
 800af6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800af70:	bf00      	nop
 800af72:	46bd      	mov	sp, r7
 800af74:	bc80      	pop	{r7}
 800af76:	4770      	bx	lr

0800af78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  	FatFsCnt++;
 800af7c:	4b0a      	ldr	r3, [pc, #40]	; (800afa8 <SysTick_Handler+0x30>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	b2db      	uxtb	r3, r3
 800af82:	3301      	adds	r3, #1
 800af84:	b2da      	uxtb	r2, r3
 800af86:	4b08      	ldr	r3, [pc, #32]	; (800afa8 <SysTick_Handler+0x30>)
 800af88:	701a      	strb	r2, [r3, #0]
    if(FatFsCnt >= 10)
 800af8a:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <SysTick_Handler+0x30>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b09      	cmp	r3, #9
 800af92:	d904      	bls.n	800af9e <SysTick_Handler+0x26>
    {
      FatFsCnt = 0;
 800af94:	4b04      	ldr	r3, [pc, #16]	; (800afa8 <SysTick_Handler+0x30>)
 800af96:	2200      	movs	r2, #0
 800af98:	701a      	strb	r2, [r3, #0]
      SDTimer_Handler();
 800af9a:	f7ff ffa7 	bl	800aeec <SDTimer_Handler>
    }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800af9e:	f7f5 fa97 	bl	80004d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800afa2:	bf00      	nop
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	200006c6 	.word	0x200006c6

0800afac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800afb0:	4802      	ldr	r0, [pc, #8]	; (800afbc <DMA1_Channel1_IRQHandler+0x10>)
 800afb2:	f7f6 f953 	bl	800125c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800afb6:	bf00      	nop
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	200048f8 	.word	0x200048f8

0800afc0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800afc4:	4802      	ldr	r0, [pc, #8]	; (800afd0 <DMA1_Channel5_IRQHandler+0x10>)
 800afc6:	f7f6 f949 	bl	800125c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800afca:	bf00      	nop
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20004870 	.word	0x20004870

0800afd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800afd8:	4802      	ldr	r0, [pc, #8]	; (800afe4 <USART1_IRQHandler+0x10>)
 800afda:	f7f8 fc2b 	bl	8003834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800afde:	bf00      	nop
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	200048b8 	.word	0x200048b8

0800afe8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800afe8:	b480      	push	{r7}
 800afea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800afec:	4b15      	ldr	r3, [pc, #84]	; (800b044 <SystemInit+0x5c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a14      	ldr	r2, [pc, #80]	; (800b044 <SystemInit+0x5c>)
 800aff2:	f043 0301 	orr.w	r3, r3, #1
 800aff6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800aff8:	4b12      	ldr	r3, [pc, #72]	; (800b044 <SystemInit+0x5c>)
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	4911      	ldr	r1, [pc, #68]	; (800b044 <SystemInit+0x5c>)
 800affe:	4b12      	ldr	r3, [pc, #72]	; (800b048 <SystemInit+0x60>)
 800b000:	4013      	ands	r3, r2
 800b002:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800b004:	4b0f      	ldr	r3, [pc, #60]	; (800b044 <SystemInit+0x5c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a0e      	ldr	r2, [pc, #56]	; (800b044 <SystemInit+0x5c>)
 800b00a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b00e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b012:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b014:	4b0b      	ldr	r3, [pc, #44]	; (800b044 <SystemInit+0x5c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a0a      	ldr	r2, [pc, #40]	; (800b044 <SystemInit+0x5c>)
 800b01a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b01e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800b020:	4b08      	ldr	r3, [pc, #32]	; (800b044 <SystemInit+0x5c>)
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	4a07      	ldr	r2, [pc, #28]	; (800b044 <SystemInit+0x5c>)
 800b026:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800b02a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800b02c:	4b05      	ldr	r3, [pc, #20]	; (800b044 <SystemInit+0x5c>)
 800b02e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800b032:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <SystemInit+0x64>)
 800b036:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b03a:	609a      	str	r2, [r3, #8]
#endif 
}
 800b03c:	bf00      	nop
 800b03e:	46bd      	mov	sp, r7
 800b040:	bc80      	pop	{r7}
 800b042:	4770      	bx	lr
 800b044:	40021000 	.word	0x40021000
 800b048:	f8ff0000 	.word	0xf8ff0000
 800b04c:	e000ed00 	.word	0xe000ed00

0800b050 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	4603      	mov	r3, r0
 800b058:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 800b05a:	79fb      	ldrb	r3, [r7, #7]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fd fbe3 	bl	8008828 <SD_disk_initialize>
 800b062:	4603      	mov	r3, r0
 800b064:	461a      	mov	r2, r3
 800b066:	4b04      	ldr	r3, [pc, #16]	; (800b078 <USER_initialize+0x28>)
 800b068:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b06a:	4b03      	ldr	r3, [pc, #12]	; (800b078 <USER_initialize+0x28>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	20000018 	.word	0x20000018

0800b07c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	4603      	mov	r3, r0
 800b084:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800b086:	79fb      	ldrb	r3, [r7, #7]
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fd fcb7 	bl	80089fc <SD_disk_status>
 800b08e:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 800b090:	4618      	mov	r0, r3
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800b0a8:	7bf8      	ldrb	r0, [r7, #15]
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	68b9      	ldr	r1, [r7, #8]
 800b0b0:	f7fd fcb8 	bl	8008a24 <SD_disk_read>
 800b0b4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800b0ce:	7bf8      	ldrb	r0, [r7, #15]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	f7fd fd0f 	bl	8008af8 <SD_disk_write>
 800b0da:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	603a      	str	r2, [r7, #0]
 800b0ee:	71fb      	strb	r3, [r7, #7]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800b0f4:	79b9      	ldrb	r1, [r7, #6]
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fd fd80 	bl	8008c00 <SD_disk_ioctl>
 800b100:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b102:	4618      	mov	r0, r3
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800b10c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800b10e:	e003      	b.n	800b118 <LoopCopyDataInit>

0800b110 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800b110:	4b0b      	ldr	r3, [pc, #44]	; (800b140 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800b112:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800b114:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800b116:	3104      	adds	r1, #4

0800b118 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800b118:	480a      	ldr	r0, [pc, #40]	; (800b144 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800b11a:	4b0b      	ldr	r3, [pc, #44]	; (800b148 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800b11c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800b11e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800b120:	d3f6      	bcc.n	800b110 <CopyDataInit>
  ldr r2, =_sbss
 800b122:	4a0a      	ldr	r2, [pc, #40]	; (800b14c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800b124:	e002      	b.n	800b12c <LoopFillZerobss>

0800b126 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800b126:	2300      	movs	r3, #0
  str r3, [r2], #4
 800b128:	f842 3b04 	str.w	r3, [r2], #4

0800b12c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800b12c:	4b08      	ldr	r3, [pc, #32]	; (800b150 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800b12e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800b130:	d3f9      	bcc.n	800b126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b132:	f7ff ff59 	bl	800afe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b136:	f000 f80f 	bl	800b158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800b13a:	f7fd fe93 	bl	8008e64 <main>
  bx lr
 800b13e:	4770      	bx	lr
  ldr r3, =_sidata
 800b140:	0800c720 	.word	0x0800c720
  ldr r0, =_sdata
 800b144:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800b148:	20000030 	.word	0x20000030
  ldr r2, =_sbss
 800b14c:	20000030 	.word	0x20000030
  ldr r3, = _ebss
 800b150:	200049c0 	.word	0x200049c0

0800b154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b154:	e7fe      	b.n	800b154 <ADC1_2_IRQHandler>
	...

0800b158 <__libc_init_array>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	2600      	movs	r6, #0
 800b15c:	4d0c      	ldr	r5, [pc, #48]	; (800b190 <__libc_init_array+0x38>)
 800b15e:	4c0d      	ldr	r4, [pc, #52]	; (800b194 <__libc_init_array+0x3c>)
 800b160:	1b64      	subs	r4, r4, r5
 800b162:	10a4      	asrs	r4, r4, #2
 800b164:	42a6      	cmp	r6, r4
 800b166:	d109      	bne.n	800b17c <__libc_init_array+0x24>
 800b168:	f000 f822 	bl	800b1b0 <_init>
 800b16c:	2600      	movs	r6, #0
 800b16e:	4d0a      	ldr	r5, [pc, #40]	; (800b198 <__libc_init_array+0x40>)
 800b170:	4c0a      	ldr	r4, [pc, #40]	; (800b19c <__libc_init_array+0x44>)
 800b172:	1b64      	subs	r4, r4, r5
 800b174:	10a4      	asrs	r4, r4, #2
 800b176:	42a6      	cmp	r6, r4
 800b178:	d105      	bne.n	800b186 <__libc_init_array+0x2e>
 800b17a:	bd70      	pop	{r4, r5, r6, pc}
 800b17c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b180:	4798      	blx	r3
 800b182:	3601      	adds	r6, #1
 800b184:	e7ee      	b.n	800b164 <__libc_init_array+0xc>
 800b186:	f855 3b04 	ldr.w	r3, [r5], #4
 800b18a:	4798      	blx	r3
 800b18c:	3601      	adds	r6, #1
 800b18e:	e7f2      	b.n	800b176 <__libc_init_array+0x1e>
 800b190:	0800c718 	.word	0x0800c718
 800b194:	0800c718 	.word	0x0800c718
 800b198:	0800c718 	.word	0x0800c718
 800b19c:	0800c71c 	.word	0x0800c71c

0800b1a0 <memset>:
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	4402      	add	r2, r0
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d100      	bne.n	800b1aa <memset+0xa>
 800b1a8:	4770      	bx	lr
 800b1aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ae:	e7f9      	b.n	800b1a4 <memset+0x4>

0800b1b0 <_init>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	bf00      	nop
 800b1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b6:	bc08      	pop	{r3}
 800b1b8:	469e      	mov	lr, r3
 800b1ba:	4770      	bx	lr

0800b1bc <_fini>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr
